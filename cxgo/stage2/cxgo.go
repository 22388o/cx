// Code generated by goyacc - DO NOT EDIT.

package stage2

import __yyfmt__ "fmt"

import (
	// "fmt"
	"github.com/skycoin/cx/cx"
	"github.com/skycoin/cx/cxgo/actions"
	"github.com/skycoin/skycoin/src/cipher/encoder"
	"strconv"
)

/*
This is a machine generated file
cxparser.go is is generated by GOYACC from cxparser.y

build-stage2: ## Generate lexer and stage2 for CX grammar
        ./bin/goyacc -o cxparser/stage1/stage1.go cxparser/stage1/stage1.y
        ./bin/goyacc -o cxparser/stage2/cxparser.go cxparser/stage2/cxparser.y

- stage1.go is output
- cxparser/stage1/stage1.y is input
*/

// var actions.PRGRM = MakeProgram(CALLSTACK_SIZE, STACK_SIZE, INIT_HEAP_SIZE)

func Parse(lexer *Lexer) int {
	return yyParse(lexer)
}

type yySymType struct {
	yys     int
	i       int
	i8      int8
	i16     int16
	i32     int32
	i64     int64
	ui8     uint8
	ui16    uint16
	ui32    uint32
	ui64    uint64
	f32     float32
	f64     float64
	tok     string
	bool    bool
	string  string
	stringA []string
	ints    []int

	line int

	argument  *cxcore.CXArgument
	arguments []*cxcore.CXArgument

	expression  *cxcore.CXExpression
	expressions []*cxcore.CXExpression

	SelectStatement  actions.SelectStatement
	SelectStatements []actions.SelectStatement

	ReturnExpressions actions.ReturnExpressions

	arrayArguments [][]*cxcore.CXExpression

	function *cxcore.CXFunction
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault              = 57492
	yyEofCode              = 57344
	ADDR                   = 57489
	ADD_ASSIGN             = 57439
	ADD_OP                 = 57399
	AFF                    = 57484
	AFFVAR                 = 57406
	AND                    = 57397
	AND_ASSIGN             = 57440
	AND_OP                 = 57437
	ASSIGN                 = 57379
	BASICTYPE              = 57470
	BITANDEQ               = 57425
	BITCLEAR_OP            = 57416
	BITOREQ                = 57427
	BITOR_OP               = 57415
	BITXOREQ               = 57426
	BITXOR_OP              = 57414
	BOOL                   = 57449
	BOOLEAN_LITERAL        = 57346
	BREAK                  = 57467
	BYTE_LITERAL           = 57347
	CAFF                   = 57485
	CASE                   = 57464
	CASSIGN                = 57380
	CLAUSES                = 57478
	COLON                  = 57389
	COMMA                  = 57367
	COMMENT                = 57369
	CONST                  = 57463
	CONTINUE               = 57468
	DEC_OP                 = 57428
	DEF                    = 57475
	DEFAULT                = 57465
	DIVEQ                  = 57420
	DIV_ASSIGN             = 57444
	DIV_OP                 = 57402
	DOUBLE_LITERAL         = 57356
	DPROGRAM               = 57482
	DSTACK                 = 57481
	DSTATE                 = 57483
	ELSE                   = 57373
	ENUM                   = 57462
	EQUAL                  = 57388
	EQUALWORD              = 57391
	EQ_OP                  = 57435
	EXP                    = 57412
	EXPEQ                  = 57422
	EXPR                   = 57476
	F32                    = 57450
	F64                    = 57451
	FIELD                  = 57477
	FLOAT_LITERAL          = 57355
	FOR                    = 57374
	FUNC                   = 57357
	GE_OP                  = 57433
	GOTO                   = 57383
	GTEQ_OP                = 57386
	GTHANEQ                = 57394
	GTHANWORD              = 57392
	GT_OP                  = 57384
	I16                    = 57453
	I32                    = 57454
	I64                    = 57455
	I8                     = 57452
	IDENTIFIER             = 57365
	IF                     = 57372
	IMPORT                 = 57381
	INC_OP                 = 57429
	INFER                  = 57487
	INT_LITERAL            = 57349
	LBRACE                 = 57361
	LBRACK                 = 57363
	LEFTSHIFT              = 57410
	LEFTSHIFTEQ            = 57423
	LEFT_ASSIGN            = 57441
	LEFT_OP                = 57431
	LE_OP                  = 57434
	LONG_LITERAL           = 57350
	LPAREN                 = 57359
	LTEQ_OP                = 57387
	LTHANEQ                = 57395
	LTHANWORD              = 57393
	LT_OP                  = 57385
	MINUSEQ                = 57418
	MINUSMINUS             = 57408
	MOD_ASSIGN             = 57442
	MOD_OP                 = 57403
	MULTEQ                 = 57419
	MUL_ASSIGN             = 57443
	MUL_OP                 = 57401
	NEG_OP                 = 57405
	NEW                    = 57390
	NEWLINE                = 57378
	NE_OP                  = 57436
	NOT                    = 57413
	OBJECT                 = 57479
	OBJECTS                = 57480
	OP                     = 57358
	OR                     = 57398
	OR_ASSIGN              = 57445
	OR_OP                  = 57438
	PACKAGE                = 57371
	PERIOD                 = 57368
	PLUSEQ                 = 57417
	PLUSPLUS               = 57407
	PTR_OP                 = 57430
	RBRACE                 = 57362
	RBRACK                 = 57364
	REF_OP                 = 57404
	REM                    = 57474
	REMAINDER              = 57409
	REMAINDEREQ            = 57421
	RETURN                 = 57382
	RIGHTSHIFT             = 57411
	RIGHTSHIFTEQ           = 57424
	RIGHT_ASSIGN           = 57446
	RIGHT_OP               = 57432
	RPAREN                 = 57360
	SEMICOLON              = 57377
	SFUNC                  = 57473
	SHORT_LITERAL          = 57348
	SPACKAGE               = 57471
	SSTRUCT                = 57472
	STR                    = 57456
	STRING_LITERAL         = 57370
	STRUCT                 = 57376
	SUB_ASSIGN             = 57447
	SUB_OP                 = 57400
	SWITCH                 = 57466
	TAG                    = 57486
	TYPE                   = 57469
	TYPSTRUCT              = 57375
	UI16                   = 57458
	UI32                   = 57459
	UI64                   = 57460
	UI8                    = 57457
	UNEQUAL                = 57396
	UNION                  = 57461
	UNSIGNED_BYTE_LITERAL  = 57351
	UNSIGNED_INT_LITERAL   = 57353
	UNSIGNED_LONG_LITERAL  = 57354
	UNSIGNED_SHORT_LITERAL = 57352
	VALUE                  = 57488
	VAR                    = 57366
	XOR_ASSIGN             = 57448
	yyErrCode              = 57345

	yyMaxDepth = 200
	yyTabOfs   = -236
)

var (
	yyPrec = map[int]int{
		IDENTIFIER: 0,
		LBRACE:     0,
	}

	yyXLAT = map[int]int{
		57377: 0,   // SEMICOLON (212x)
		57404: 1,   // REF_OP (205x)
		57359: 2,   // LPAREN (204x)
		57401: 3,   // MUL_OP (198x)
		57400: 4,   // SUB_OP (195x)
		57399: 5,   // ADD_OP (194x)
		57363: 6,   // LBRACK (192x)
		57428: 7,   // DEC_OP (179x)
		57429: 8,   // INC_OP (179x)
		57362: 9,   // RBRACE (177x)
		57361: 10,  // LBRACE (174x)
		57365: 11,  // IDENTIFIER (173x)
		57367: 12,  // COMMA (159x)
		57357: 13,  // FUNC (149x)
		57360: 14,  // RPAREN (145x)
		57484: 15,  // AFF (140x)
		57449: 16,  // BOOL (140x)
		57450: 17,  // F32 (140x)
		57451: 18,  // F64 (140x)
		57453: 19,  // I16 (140x)
		57454: 20,  // I32 (140x)
		57455: 21,  // I64 (140x)
		57452: 22,  // I8 (140x)
		57456: 23,  // STR (140x)
		57458: 24,  // UI16 (140x)
		57459: 25,  // UI32 (140x)
		57460: 26,  // UI64 (140x)
		57457: 27,  // UI8 (140x)
		57349: 28,  // INT_LITERAL (128x)
		57370: 29,  // STRING_LITERAL (124x)
		57346: 30,  // BOOLEAN_LITERAL (123x)
		57347: 31,  // BYTE_LITERAL (123x)
		57356: 32,  // DOUBLE_LITERAL (123x)
		57355: 33,  // FLOAT_LITERAL (123x)
		57487: 34,  // INFER (123x)
		57350: 35,  // LONG_LITERAL (123x)
		57405: 36,  // NEG_OP (123x)
		57348: 37,  // SHORT_LITERAL (123x)
		57351: 38,  // UNSIGNED_BYTE_LITERAL (123x)
		57353: 39,  // UNSIGNED_INT_LITERAL (123x)
		57354: 40,  // UNSIGNED_LONG_LITERAL (123x)
		57352: 41,  // UNSIGNED_SHORT_LITERAL (123x)
		57389: 42,  // COLON (104x)
		57364: 43,  // RBRACK (103x)
		63:    44,  // '?' (89x)
		57438: 45,  // OR_OP (89x)
		57437: 46,  // AND_OP (88x)
		57415: 47,  // BITOR_OP (86x)
		57414: 48,  // BITXOR_OP (84x)
		57435: 49,  // EQ_OP (80x)
		57384: 50,  // GT_OP (80x)
		57386: 51,  // GTEQ_OP (80x)
		57385: 52,  // LT_OP (80x)
		57387: 53,  // LTEQ_OP (80x)
		57436: 54,  // NE_OP (80x)
		57416: 55,  // BITCLEAR_OP (78x)
		57431: 56,  // LEFT_OP (78x)
		57432: 57,  // RIGHT_OP (78x)
		57482: 58,  // DPROGRAM (74x)
		57473: 59,  // SFUNC (74x)
		57471: 60,  // SPACKAGE (74x)
		57472: 61,  // SSTRUCT (74x)
		57559: 62,  // type_specifier (74x)
		57379: 63,  // ASSIGN (73x)
		57366: 64,  // VAR (71x)
		57402: 65,  // DIV_OP (67x)
		57526: 66,  // indexing_literal (67x)
		57403: 67,  // MOD_OP (67x)
		57551: 68,  // slice_literal_expression (63x)
		57497: 69,  // array_literal_expression (62x)
		57544: 70,  // postfix_expression (62x)
		57545: 71,  // primary_expression (62x)
		57561: 72,  // unary_expression (62x)
		57562: 73,  // unary_operator (62x)
		57439: 74,  // ADD_ASSIGN (60x)
		57440: 75,  // AND_ASSIGN (60x)
		57380: 76,  // CASSIGN (60x)
		57444: 77,  // DIV_ASSIGN (60x)
		57441: 78,  // LEFT_ASSIGN (60x)
		57442: 79,  // MOD_ASSIGN (60x)
		57443: 80,  // MUL_ASSIGN (60x)
		57445: 81,  // OR_ASSIGN (60x)
		57368: 82,  // PERIOD (60x)
		57446: 83,  // RIGHT_ASSIGN (60x)
		57447: 84,  // SUB_ASSIGN (60x)
		57448: 85,  // XOR_ASSIGN (60x)
		57372: 86,  // IF (57x)
		57467: 87,  // BREAK (56x)
		57464: 88,  // CASE (56x)
		57468: 89,  // CONTINUE (56x)
		57465: 90,  // DEFAULT (56x)
		57374: 91,  // FOR (56x)
		57383: 92,  // GOTO (56x)
		57382: 93,  // RETURN (56x)
		57466: 94,  // SWITCH (56x)
		57539: 95,  // multiplicative_expression (55x)
		57493: 96,  // additive_expression (53x)
		57550: 97,  // shift_expression (50x)
		57546: 98,  // relational_expression (44x)
		57495: 99,  // and_expression (43x)
		57514: 100, // exclusive_or_expression (42x)
		57525: 101, // inclusive_or_expression (41x)
		57537: 102, // logical_and_expression (40x)
		57504: 103, // conditional_expression (39x)
		57538: 104, // logical_or_expression (39x)
		57556: 105, // struct_literal_expression (33x)
		57499: 106, // assignment_expression (31x)
		57381: 107, // IMPORT (27x)
		57371: 108, // PACKAGE (27x)
		57469: 109, // TYPE (27x)
		57344: 110, // $end (26x)
		57503: 111, // compound_statement (19x)
		57515: 112, // expression (19x)
		57506: 113, // debugging (14x)
		57516: 114, // expression_statement (14x)
		57549: 115, // selector (14x)
		57534: 116, // iteration_statement (12x)
		57535: 117, // jump_statement (12x)
		57536: 118, // labeled_statement (12x)
		57548: 119, // selection_statement (12x)
		57553: 120, // statement (12x)
		57501: 121, // block_item (9x)
		57507: 122, // declaration (9x)
		57509: 123, // declarator (8x)
		57510: 124, // direct_declarator (8x)
		57373: 125, // ELSE (8x)
		57508: 126, // declaration_specifiers (5x)
		57541: 127, // parameter_declaration (5x)
		57502: 128, // block_item_list (4x)
		57511: 129, // else_statement (4x)
		57512: 130, // elseif (4x)
		57528: 131, // infer_action (4x)
		57505: 132, // constant_expression (3x)
		57557: 133, // struct_literal_fields (3x)
		57498: 134, // array_literal_expression_list (2x)
		57513: 135, // elseif_list (2x)
		57517: 136, // external_declaration (2x)
		57519: 137, // function_declaration (2x)
		57520: 138, // function_header (2x)
		57521: 139, // function_parameters (2x)
		57522: 140, // global_declaration (2x)
		57524: 141, // import_declaration (2x)
		57532: 142, // initializer (2x)
		57540: 143, // package_declaration (2x)
		57542: 144, // parameter_list (2x)
		57543: 145, // parameter_type_list (2x)
		57552: 146, // slice_literal_expression_list (2x)
		57554: 147, // struct_declaration (2x)
		57555: 148, // struct_fields (2x)
		57560: 149, // types_list (2x)
		57490: 150, // $@1 (1x)
		57491: 151, // $@2 (1x)
		57494: 152, // after_period (1x)
		57496: 153, // argument_expression_list (1x)
		57500: 154, // assignment_operator (1x)
		57518: 155, // fields (1x)
		57523: 156, // id_list (1x)
		57529: 157, // infer_action_arg (1x)
		57530: 158, // infer_actions (1x)
		57531: 159, // infer_clauses (1x)
		57533: 160, // int_value (1x)
		57547: 161, // return_expression (1x)
		57376: 162, // STRUCT (1x)
		57558: 163, // translation_unit (1x)
		57492: 164, // $default (0x)
		57489: 165, // ADDR (0x)
		57406: 166, // AFFVAR (0x)
		57397: 167, // AND (0x)
		57470: 168, // BASICTYPE (0x)
		57425: 169, // BITANDEQ (0x)
		57427: 170, // BITOREQ (0x)
		57426: 171, // BITXOREQ (0x)
		57485: 172, // CAFF (0x)
		57478: 173, // CLAUSES (0x)
		57369: 174, // COMMENT (0x)
		57463: 175, // CONST (0x)
		57475: 176, // DEF (0x)
		57420: 177, // DIVEQ (0x)
		57481: 178, // DSTACK (0x)
		57483: 179, // DSTATE (0x)
		57462: 180, // ENUM (0x)
		57388: 181, // EQUAL (0x)
		57391: 182, // EQUALWORD (0x)
		57345: 183, // error (0x)
		57412: 184, // EXP (0x)
		57422: 185, // EXPEQ (0x)
		57476: 186, // EXPR (0x)
		57477: 187, // FIELD (0x)
		57433: 188, // GE_OP (0x)
		57394: 189, // GTHANEQ (0x)
		57392: 190, // GTHANWORD (0x)
		57527: 191, // indexing_slice_literal (0x)
		57434: 192, // LE_OP (0x)
		57410: 193, // LEFTSHIFT (0x)
		57423: 194, // LEFTSHIFTEQ (0x)
		57395: 195, // LTHANEQ (0x)
		57393: 196, // LTHANWORD (0x)
		57418: 197, // MINUSEQ (0x)
		57408: 198, // MINUSMINUS (0x)
		57419: 199, // MULTEQ (0x)
		57390: 200, // NEW (0x)
		57378: 201, // NEWLINE (0x)
		57413: 202, // NOT (0x)
		57479: 203, // OBJECT (0x)
		57480: 204, // OBJECTS (0x)
		57358: 205, // OP (0x)
		57398: 206, // OR (0x)
		57417: 207, // PLUSEQ (0x)
		57407: 208, // PLUSPLUS (0x)
		57430: 209, // PTR_OP (0x)
		57474: 210, // REM (0x)
		57409: 211, // REMAINDER (0x)
		57421: 212, // REMAINDEREQ (0x)
		57411: 213, // RIGHTSHIFT (0x)
		57424: 214, // RIGHTSHIFTEQ (0x)
		57486: 215, // TAG (0x)
		57375: 216, // TYPSTRUCT (0x)
		57396: 217, // UNEQUAL (0x)
		57461: 218, // UNION (0x)
		57488: 219, // VALUE (0x)
	}

	yySymNames = []string{
		"SEMICOLON",
		"REF_OP",
		"LPAREN",
		"MUL_OP",
		"SUB_OP",
		"ADD_OP",
		"LBRACK",
		"DEC_OP",
		"INC_OP",
		"RBRACE",
		"LBRACE",
		"IDENTIFIER",
		"COMMA",
		"FUNC",
		"RPAREN",
		"AFF",
		"BOOL",
		"F32",
		"F64",
		"I16",
		"I32",
		"I64",
		"I8",
		"STR",
		"UI16",
		"UI32",
		"UI64",
		"UI8",
		"INT_LITERAL",
		"STRING_LITERAL",
		"BOOLEAN_LITERAL",
		"BYTE_LITERAL",
		"DOUBLE_LITERAL",
		"FLOAT_LITERAL",
		"INFER",
		"LONG_LITERAL",
		"NEG_OP",
		"SHORT_LITERAL",
		"UNSIGNED_BYTE_LITERAL",
		"UNSIGNED_INT_LITERAL",
		"UNSIGNED_LONG_LITERAL",
		"UNSIGNED_SHORT_LITERAL",
		"COLON",
		"RBRACK",
		"'?'",
		"OR_OP",
		"AND_OP",
		"BITOR_OP",
		"BITXOR_OP",
		"EQ_OP",
		"GT_OP",
		"GTEQ_OP",
		"LT_OP",
		"LTEQ_OP",
		"NE_OP",
		"BITCLEAR_OP",
		"LEFT_OP",
		"RIGHT_OP",
		"DPROGRAM",
		"SFUNC",
		"SPACKAGE",
		"SSTRUCT",
		"type_specifier",
		"ASSIGN",
		"VAR",
		"DIV_OP",
		"indexing_literal",
		"MOD_OP",
		"slice_literal_expression",
		"array_literal_expression",
		"postfix_expression",
		"primary_expression",
		"unary_expression",
		"unary_operator",
		"ADD_ASSIGN",
		"AND_ASSIGN",
		"CASSIGN",
		"DIV_ASSIGN",
		"LEFT_ASSIGN",
		"MOD_ASSIGN",
		"MUL_ASSIGN",
		"OR_ASSIGN",
		"PERIOD",
		"RIGHT_ASSIGN",
		"SUB_ASSIGN",
		"XOR_ASSIGN",
		"IF",
		"BREAK",
		"CASE",
		"CONTINUE",
		"DEFAULT",
		"FOR",
		"GOTO",
		"RETURN",
		"SWITCH",
		"multiplicative_expression",
		"additive_expression",
		"shift_expression",
		"relational_expression",
		"and_expression",
		"exclusive_or_expression",
		"inclusive_or_expression",
		"logical_and_expression",
		"conditional_expression",
		"logical_or_expression",
		"struct_literal_expression",
		"assignment_expression",
		"IMPORT",
		"PACKAGE",
		"TYPE",
		"$end",
		"compound_statement",
		"expression",
		"debugging",
		"expression_statement",
		"selector",
		"iteration_statement",
		"jump_statement",
		"labeled_statement",
		"selection_statement",
		"statement",
		"block_item",
		"declaration",
		"declarator",
		"direct_declarator",
		"ELSE",
		"declaration_specifiers",
		"parameter_declaration",
		"block_item_list",
		"else_statement",
		"elseif",
		"infer_action",
		"constant_expression",
		"struct_literal_fields",
		"array_literal_expression_list",
		"elseif_list",
		"external_declaration",
		"function_declaration",
		"function_header",
		"function_parameters",
		"global_declaration",
		"import_declaration",
		"initializer",
		"package_declaration",
		"parameter_list",
		"parameter_type_list",
		"slice_literal_expression_list",
		"struct_declaration",
		"struct_fields",
		"types_list",
		"$@1",
		"$@2",
		"after_period",
		"argument_expression_list",
		"assignment_operator",
		"fields",
		"id_list",
		"infer_action_arg",
		"infer_actions",
		"infer_clauses",
		"int_value",
		"return_expression",
		"STRUCT",
		"translation_unit",
		"$default",
		"ADDR",
		"AFFVAR",
		"AND",
		"BASICTYPE",
		"BITANDEQ",
		"BITOREQ",
		"BITXOREQ",
		"CAFF",
		"CLAUSES",
		"COMMENT",
		"CONST",
		"DEF",
		"DIVEQ",
		"DSTACK",
		"DSTATE",
		"ENUM",
		"EQUAL",
		"EQUALWORD",
		"error",
		"EXP",
		"EXPEQ",
		"EXPR",
		"FIELD",
		"GE_OP",
		"GTHANEQ",
		"GTHANWORD",
		"indexing_slice_literal",
		"LE_OP",
		"LEFTSHIFT",
		"LEFTSHIFTEQ",
		"LTHANEQ",
		"LTHANWORD",
		"MINUSEQ",
		"MINUSMINUS",
		"MULTEQ",
		"NEW",
		"NEWLINE",
		"NOT",
		"OBJECT",
		"OBJECTS",
		"OP",
		"OR",
		"PLUSEQ",
		"PLUSPLUS",
		"PTR_OP",
		"REM",
		"REMAINDER",
		"REMAINDEREQ",
		"RIGHTSHIFT",
		"RIGHTSHIFTEQ",
		"TAG",
		"TYPSTRUCT",
		"UNEQUAL",
		"UNION",
		"VALUE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {163, 1},
		2:   {163, 2},
		3:   {136, 1},
		4:   {136, 1},
		5:   {136, 1},
		6:   {136, 1},
		7:   {136, 1},
		8:   {136, 1},
		9:   {136, 1},
		10:  {113, 1},
		11:  {115, 3},
		12:  {150, 0},
		13:  {115, 4},
		14:  {115, 3},
		15:  {151, 0},
		16:  {115, 4},
		17:  {140, 4},
		18:  {140, 6},
		19:  {147, 4},
		20:  {148, 3},
		21:  {148, 4},
		22:  {155, 2},
		23:  {155, 3},
		24:  {143, 3},
		25:  {141, 3},
		26:  {138, 2},
		27:  {138, 5},
		28:  {139, 2},
		29:  {139, 3},
		30:  {137, 3},
		31:  {137, 4},
		32:  {145, 1},
		33:  {144, 1},
		34:  {144, 3},
		35:  {127, 2},
		36:  {123, 1},
		37:  {124, 1},
		38:  {124, 3},
		39:  {156, 1},
		40:  {156, 1},
		41:  {156, 3},
		42:  {156, 3},
		43:  {149, 3},
		44:  {149, 2},
		45:  {126, 3},
		46:  {126, 2},
		47:  {126, 3},
		48:  {126, 1},
		49:  {126, 1},
		50:  {126, 2},
		51:  {126, 2},
		52:  {126, 3},
		53:  {126, 3},
		54:  {62, 1},
		55:  {62, 1},
		56:  {62, 1},
		57:  {62, 1},
		58:  {62, 1},
		59:  {62, 1},
		60:  {62, 1},
		61:  {62, 1},
		62:  {62, 1},
		63:  {62, 1},
		64:  {62, 1},
		65:  {62, 1},
		66:  {62, 1},
		67:  {133, 0},
		68:  {133, 3},
		69:  {133, 5},
		70:  {134, 1},
		71:  {134, 3},
		72:  {66, 3},
		73:  {66, 4},
		74:  {191, 2},
		75:  {191, 3},
		76:  {69, 5},
		77:  {69, 4},
		78:  {69, 5},
		79:  {69, 4},
		80:  {146, 1},
		81:  {146, 3},
		82:  {68, 6},
		83:  {68, 5},
		84:  {68, 6},
		85:  {68, 5},
		86:  {68, 3},
		87:  {157, 1},
		88:  {157, 1},
		89:  {157, 3},
		90:  {131, 6},
		91:  {131, 4},
		92:  {131, 4},
		93:  {131, 6},
		94:  {158, 2},
		95:  {158, 3},
		96:  {159, 0},
		97:  {159, 1},
		98:  {160, 1},
		99:  {160, 2},
		100: {71, 1},
		101: {71, 3},
		102: {71, 4},
		103: {71, 1},
		104: {71, 1},
		105: {71, 1},
		106: {71, 1},
		107: {71, 1},
		108: {71, 1},
		109: {71, 1},
		110: {71, 1},
		111: {71, 1},
		112: {71, 1},
		113: {71, 1},
		114: {71, 1},
		115: {71, 3},
		116: {71, 1},
		117: {71, 1},
		118: {152, 1},
		119: {152, 1},
		120: {70, 1},
		121: {70, 4},
		122: {70, 3},
		123: {70, 3},
		124: {70, 4},
		125: {70, 2},
		126: {70, 2},
		127: {70, 3},
		128: {153, 1},
		129: {153, 3},
		130: {72, 1},
		131: {72, 2},
		132: {72, 2},
		133: {72, 2},
		134: {73, 1},
		135: {73, 1},
		136: {73, 1},
		137: {73, 1},
		138: {73, 1},
		139: {95, 1},
		140: {95, 3},
		141: {95, 3},
		142: {95, 3},
		143: {96, 1},
		144: {96, 3},
		145: {96, 3},
		146: {97, 1},
		147: {97, 3},
		148: {97, 3},
		149: {97, 3},
		150: {98, 1},
		151: {98, 3},
		152: {98, 3},
		153: {98, 3},
		154: {98, 3},
		155: {98, 3},
		156: {98, 3},
		157: {99, 1},
		158: {99, 3},
		159: {100, 1},
		160: {100, 3},
		161: {101, 1},
		162: {101, 3},
		163: {102, 1},
		164: {102, 3},
		165: {104, 1},
		166: {104, 3},
		167: {103, 1},
		168: {103, 5},
		169: {105, 1},
		170: {105, 4},
		171: {105, 5},
		172: {105, 6},
		173: {106, 1},
		174: {106, 3},
		175: {154, 1},
		176: {154, 1},
		177: {154, 1},
		178: {154, 1},
		179: {154, 1},
		180: {154, 1},
		181: {154, 1},
		182: {154, 1},
		183: {154, 1},
		184: {154, 1},
		185: {154, 1},
		186: {154, 1},
		187: {112, 1},
		188: {112, 3},
		189: {132, 1},
		190: {122, 4},
		191: {122, 6},
		192: {142, 1},
		193: {120, 1},
		194: {120, 1},
		195: {120, 1},
		196: {120, 1},
		197: {120, 1},
		198: {120, 1},
		199: {120, 1},
		200: {120, 1},
		201: {118, 3},
		202: {118, 4},
		203: {118, 3},
		204: {111, 3},
		205: {111, 4},
		206: {128, 1},
		207: {128, 2},
		208: {121, 1},
		209: {121, 1},
		210: {114, 1},
		211: {114, 2},
		212: {119, 8},
		213: {119, 7},
		214: {119, 6},
		215: {119, 7},
		216: {119, 6},
		217: {119, 7},
		218: {119, 3},
		219: {119, 5},
		220: {130, 6},
		221: {130, 5},
		222: {135, 1},
		223: {135, 2},
		224: {129, 4},
		225: {129, 3},
		226: {116, 3},
		227: {116, 4},
		228: {116, 5},
		229: {161, 1},
		230: {161, 3},
		231: {117, 3},
		232: {117, 2},
		233: {117, 2},
		234: {117, 2},
		235: {117, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [427][]uint16{
		// 0
		{13: 254, 58: 246, 248, 247, 249, 64: 250, 107: 253, 252, 251, 113: 245, 115: 244, 136: 238, 241, 255, 140: 240, 242, 143: 239, 147: 243, 163: 237},
		{13: 254, 58: 246, 248, 247, 249, 64: 250, 107: 253, 252, 251, 236, 113: 245, 115: 244, 136: 662, 241, 255, 140: 240, 242, 143: 239, 147: 243},
		{13: 235, 58: 235, 235, 235, 235, 64: 235, 107: 235, 235, 235, 235},
		{13: 233, 58: 233, 233, 233, 233, 64: 233, 107: 233, 233, 233, 233},
		{13: 232, 58: 232, 232, 232, 232, 64: 232, 107: 232, 232, 232, 232},
		// 5
		{13: 231, 58: 231, 231, 231, 231, 64: 231, 107: 231, 231, 231, 231},
		{13: 230, 58: 230, 230, 230, 230, 64: 230, 107: 230, 230, 230, 230},
		{13: 229, 58: 229, 229, 229, 229, 64: 229, 107: 229, 229, 229, 229},
		{13: 228, 58: 228, 228, 228, 228, 64: 228, 107: 228, 228, 228, 228},
		{13: 227, 58: 227, 227, 227, 227, 64: 227, 107: 227, 227, 227, 227},
		// 10
		{226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 13: 226, 15: 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 58: 226, 226, 226, 226, 64: 226, 86: 226, 226, 226, 226, 226, 226, 226, 226, 226, 107: 226, 226, 226, 226},
		{11: 660},
		{11: 657},
		{11: 653},
		{2: 440, 11: 439, 123: 647, 438},
		// 15
		{11: 634},
		{11: 632},
		{29: 630},
		{2: 626, 11: 625},
		{2: 256, 139: 257},
		// 20
		{2: 440, 11: 439, 14: 616, 123: 620, 438, 127: 619, 144: 618, 617},
		{2: 256, 10: 260, 111: 258, 139: 259},
		{13: 206, 58: 206, 206, 206, 206, 64: 206, 107: 206, 206, 206, 206},
		{10: 260, 111: 615},
		{335, 300, 291, 301, 303, 302, 274, 298, 297, 330, 260, 276, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 58: 246, 248, 247, 249, 296, 64: 319, 66: 275, 68: 293, 292, 295, 294, 305, 299, 86: 336, 341, 328, 340, 329, 338, 339, 342, 337, 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 111: 321, 318, 326, 322, 325, 324, 327, 320, 323, 334, 332, 333, 128: 331},
		// 25
		{182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 12: 182, 14: 182, 42: 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 63: 182, 65: 182, 67: 182, 74: 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182},
		{181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 12: 181, 14: 181, 42: 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 63: 181, 65: 181, 67: 181, 74: 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181},
		{180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 12: 180, 14: 180, 42: 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 63: 180, 65: 180, 67: 180, 74: 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180},
		{179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 12: 179, 14: 179, 42: 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 63: 179, 65: 179, 67: 179, 74: 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179},
		{178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 12: 178, 14: 178, 42: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 63: 178, 65: 178, 67: 178, 74: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178},
		// 30
		{177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 12: 177, 14: 177, 42: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 63: 177, 65: 177, 67: 177, 74: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177},
		{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 12: 176, 14: 176, 42: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 63: 176, 65: 176, 67: 176, 74: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176},
		{175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 12: 175, 14: 175, 42: 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 63: 175, 65: 175, 67: 175, 74: 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175},
		{174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 12: 174, 14: 174, 42: 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 63: 174, 65: 174, 67: 174, 74: 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174},
		{173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 12: 173, 14: 173, 42: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 63: 173, 65: 173, 67: 173, 74: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173},
		// 35
		{172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 12: 172, 14: 172, 42: 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 63: 172, 65: 172, 67: 172, 74: 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172},
		{171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 12: 171, 14: 171, 42: 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 63: 171, 65: 171, 67: 171, 74: 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171},
		{170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 12: 170, 14: 170, 42: 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 63: 170, 65: 170, 67: 170, 74: 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170},
		{28: 464, 43: 599},
		{6: 456, 11: 586, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 62: 587},
		// 40
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 10: 351, 12: 136, 42: 584, 44: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 63: 136, 65: 136, 67: 136, 74: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
		{2: 582},
		{10: 554},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 12: 133, 14: 133, 42: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 63: 133, 65: 133, 67: 133, 74: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 12: 132, 14: 132, 42: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 63: 132, 65: 132, 67: 132, 74: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132},
		// 45
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 12: 131, 14: 131, 42: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 63: 131, 65: 131, 67: 131, 74: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131},
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 12: 130, 14: 130, 42: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 63: 130, 65: 130, 67: 130, 74: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 12: 129, 14: 129, 42: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 63: 129, 65: 129, 67: 129, 74: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 12: 128, 14: 128, 42: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 63: 128, 65: 128, 67: 128, 74: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 12: 127, 14: 127, 42: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 63: 127, 65: 127, 67: 127, 74: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		// 50
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 12: 126, 14: 126, 42: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 63: 126, 65: 126, 67: 126, 74: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 12: 125, 14: 125, 42: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 63: 125, 65: 125, 67: 125, 74: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 12: 124, 14: 124, 42: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 63: 124, 65: 124, 67: 124, 74: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 12: 123, 14: 123, 42: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 63: 123, 65: 123, 67: 123, 74: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 12: 122, 14: 122, 42: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 63: 122, 65: 122, 67: 122, 74: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122},
		// 55
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 112: 552},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 12: 120, 14: 120, 42: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 63: 120, 65: 120, 67: 120, 74: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 12: 119, 14: 119, 42: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 63: 119, 65: 119, 67: 119, 74: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 12: 116, 14: 116, 42: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 63: 116, 65: 116, 67: 116, 74: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
		{106, 106, 365, 106, 106, 106, 364, 367, 366, 106, 106, 12: 106, 14: 106, 42: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 63: 106, 65: 106, 67: 106, 74: 106, 106, 106, 106, 106, 106, 106, 106, 547, 106, 106, 106},
		// 60
		{82: 543},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 542, 361},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 541, 361},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 537, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 363, 361},
		{1: 102, 102, 102, 102, 102, 102, 102, 102, 11: 102, 13: 102, 15: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		// 65
		{1: 101, 101, 101, 101, 101, 101, 101, 101, 11: 101, 13: 101, 15: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		{1: 100, 100, 100, 100, 100, 100, 100, 100, 11: 100, 13: 100, 15: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{1: 99, 99, 99, 99, 99, 99, 99, 99, 11: 99, 13: 99, 15: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{1: 98, 98, 98, 98, 98, 98, 98, 98, 11: 98, 13: 98, 15: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		{97, 97, 3: 97, 97, 97, 9: 97, 97, 12: 97, 14: 97, 42: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 63: 524, 65: 97, 67: 97, 74: 529, 533, 525, 527, 531, 528, 526, 535, 83: 532, 530, 534, 154: 523},
		// 70
		{93, 93, 3: 509, 93, 93, 9: 93, 93, 12: 93, 14: 93, 42: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 65: 510, 67: 511},
		{90, 90, 4: 507, 506, 9: 90, 90, 12: 90, 14: 90, 42: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{86, 86, 9: 86, 86, 12: 86, 14: 86, 42: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 504, 502, 503},
		{79, 79, 9: 79, 79, 12: 79, 14: 79, 42: 79, 79, 79, 79, 79, 79, 79, 495, 498, 500, 497, 499, 496},
		{77, 493, 9: 77, 77, 12: 77, 14: 77, 42: 77, 77, 77, 77, 77, 77, 77},
		// 75
		{75, 9: 75, 75, 12: 75, 14: 75, 42: 75, 75, 75, 75, 75, 75, 491},
		{73, 9: 73, 73, 12: 73, 14: 73, 42: 73, 73, 73, 73, 73, 489},
		{71, 9: 71, 71, 12: 71, 14: 71, 42: 71, 71, 71, 71, 487},
		{69, 9: 69, 69, 12: 69, 14: 69, 42: 69, 69, 482, 481},
		{67, 9: 67, 67, 12: 67, 14: 67, 42: 67, 67},
		// 80
		{63, 9: 63, 63, 12: 63, 14: 63, 42: 63, 63},
		{49, 10: 49, 12: 49, 14: 49, 42: 49, 49},
		{392, 12: 378},
		{2: 440, 11: 439, 123: 441, 438},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 13: 43, 15: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 58: 43, 43, 43, 43, 64: 43, 86: 43, 43, 43, 43, 43, 43, 43, 43, 43},
		// 85
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 13: 42, 15: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 58: 42, 42, 42, 42, 64: 42, 86: 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 13: 41, 15: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 58: 41, 41, 41, 41, 64: 41, 86: 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 13: 40, 15: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 58: 40, 40, 40, 40, 64: 40, 86: 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 13: 39, 15: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 58: 39, 39, 39, 39, 64: 39, 86: 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 13: 38, 15: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 58: 38, 38, 38, 38, 64: 38, 86: 38, 38, 38, 38, 38, 38, 38, 38, 38},
		// 90
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 13: 37, 15: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 58: 37, 37, 37, 37, 64: 37, 86: 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 13: 36, 15: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 58: 36, 36, 36, 36, 64: 36, 86: 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 308, 309, 310, 311, 312, 313, 362, 314, 132: 435},
		{42: 433},
		{425},
		// 95
		{335, 300, 291, 301, 303, 302, 274, 298, 297, 432, 260, 276, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 58: 246, 248, 247, 249, 296, 64: 319, 66: 275, 68: 293, 292, 295, 294, 305, 299, 86: 336, 341, 328, 340, 329, 338, 339, 342, 337, 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 111: 321, 318, 326, 322, 325, 324, 327, 320, 323, 334, 404, 333},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 13: 30, 15: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 58: 30, 30, 30, 30, 64: 30, 86: 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 13: 28, 15: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 58: 28, 28, 28, 28, 64: 28, 86: 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 13: 27, 15: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 58: 27, 27, 27, 27, 64: 27, 86: 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 13: 26, 15: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 58: 26, 26, 26, 26, 64: 26, 86: 26, 26, 26, 26, 26, 26, 26, 26, 26},
		// 100
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 308, 309, 310, 311, 312, 313, 398, 314},
		{2: 394},
		{335, 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 112: 386, 114: 387},
		{11: 384},
		{383},
		// 105
		{382},
		{347, 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 344, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 345, 161: 346},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 351, 12: 136, 14: 136, 42: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 63: 136, 65: 136, 67: 136, 74: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
		{97, 97, 3: 97, 97, 97, 9: 97, 97, 12: 97, 14: 97, 42: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 65: 97, 67: 97},
		{7, 12: 7},
		// 110
		{349, 12: 348},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 13: 2, 15: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 58: 2, 2, 2, 2, 64: 2, 86: 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 344, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 350},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13: 1, 15: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 58: 1, 1, 1, 1, 64: 1, 86: 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{6, 12: 6},
		// 115
		{9: 169, 11: 352, 169, 133: 353},
		{42: 380},
		{9: 355, 12: 354},
		{11: 356},
		{66, 9: 66, 66, 12: 66, 14: 66, 42: 66, 66},
		// 120
		{42: 357},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 308, 309, 310, 311, 312, 313, 362, 314, 132: 358},
		{9: 167, 12: 167},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 12: 136, 14: 136, 42: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 63: 136, 65: 136, 67: 136, 74: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
		{106, 106, 365, 106, 106, 106, 364, 367, 366, 106, 106, 12: 106, 14: 106, 42: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 63: 106, 65: 106, 67: 106, 74: 106, 106, 106, 106, 106, 106, 106, 106, 368, 106, 106, 106},
		// 125
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 363, 361},
		{9: 47, 12: 47, 42: 47},
		{103, 103, 3: 103, 103, 103, 9: 103, 103, 12: 103, 14: 103, 42: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 63: 103, 65: 103, 67: 103, 74: 103, 103, 103, 103, 103, 103, 103, 103, 83: 103, 103, 103},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 112: 376},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 370, 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 372, 153: 371},
		// 130
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 12: 111, 14: 111, 42: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 63: 111, 65: 111, 67: 111, 74: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 12: 110, 14: 110, 42: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 63: 110, 65: 110, 67: 110, 74: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
		{11: 369},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 12: 109, 14: 109, 42: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 63: 109, 65: 109, 67: 109, 74: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12: 113, 14: 113, 42: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 63: 113, 65: 113, 67: 113, 74: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113},
		// 135
		{12: 374, 14: 373},
		{12: 108, 14: 108},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12: 112, 14: 112, 42: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 63: 112, 65: 112, 67: 112, 74: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 375},
		{12: 107, 14: 107},
		// 140
		{12: 378, 43: 377},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 12: 115, 14: 115, 42: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 63: 115, 65: 115, 67: 115, 74: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 379},
		{48, 10: 48, 12: 48, 14: 48, 42: 48, 48},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 308, 309, 310, 311, 312, 313, 362, 314, 132: 381},
		// 145
		{9: 168, 12: 168},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 13: 3, 15: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 58: 3, 3, 3, 3, 64: 3, 86: 3, 3, 3, 3, 3, 3, 3, 3, 3},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 13: 4, 15: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 58: 4, 4, 4, 4, 64: 4, 86: 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{385},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13: 5, 15: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 58: 5, 5, 5, 5, 64: 5, 86: 5, 5, 5, 5, 5, 5, 5, 5, 5},
		// 150
		{392, 10: 260, 12: 378, 111: 393},
		{335, 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 112: 318, 114: 388},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 10: 260, 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 111: 390, 389},
		{10: 260, 12: 378, 111: 391},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 13: 9, 15: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 58: 9, 9, 9, 9, 64: 9, 86: 9, 9, 9, 9, 9, 9, 9, 9, 9},
		// 155
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 13: 8, 15: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 58: 8, 8, 8, 8, 64: 8, 86: 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 13: 25, 15: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 58: 25, 25, 25, 25, 64: 25, 86: 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 13: 10, 15: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 58: 10, 10, 10, 10, 64: 10, 86: 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 112: 395},
		{12: 378, 14: 396},
		// 160
		{335, 300, 291, 301, 303, 302, 274, 298, 297, 10: 260, 276, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 58: 246, 248, 247, 249, 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 86: 336, 341, 328, 340, 329, 338, 339, 342, 337, 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 111: 321, 318, 326, 322, 325, 324, 327, 320, 323, 397},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13: 17, 15: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 58: 17, 17, 17, 17, 64: 17, 86: 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{10: 399, 111: 400},
		{335, 300, 291, 301, 303, 302, 274, 298, 297, 401, 260, 276, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 58: 246, 248, 247, 249, 296, 64: 319, 66: 275, 68: 293, 292, 295, 294, 305, 299, 86: 336, 341, 328, 340, 329, 338, 339, 342, 337, 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 111: 321, 318, 326, 322, 325, 324, 327, 320, 323, 334, 332, 333, 128: 402},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 13: 18, 15: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 58: 18, 18, 18, 18, 64: 18, 86: 18, 18, 18, 18, 18, 18, 18, 18, 18},
		// 165
		{425, 125: 408, 129: 426, 409, 135: 427},
		{335, 300, 291, 301, 303, 302, 274, 298, 297, 403, 260, 276, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 58: 246, 248, 247, 249, 296, 64: 319, 66: 275, 68: 293, 292, 295, 294, 305, 299, 86: 336, 341, 328, 340, 329, 338, 339, 342, 337, 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 111: 321, 318, 326, 322, 325, 324, 327, 320, 323, 334, 404, 333},
		{405, 125: 408, 129: 407, 409, 135: 406},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 13: 29, 15: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 58: 29, 29, 29, 29, 64: 29, 86: 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 13: 31, 15: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 58: 31, 31, 31, 31, 64: 31, 86: 31, 31, 31, 31, 31, 31, 31, 31, 31, 107: 31, 31, 31, 31},
		// 170
		{422, 125: 408, 129: 421, 423},
		{420},
		{10: 411, 86: 410},
		{14, 125: 14},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 308, 309, 310, 311, 312, 313, 415, 314},
		// 175
		{335, 300, 291, 301, 303, 302, 274, 298, 297, 413, 260, 276, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 58: 246, 248, 247, 249, 296, 64: 319, 66: 275, 68: 293, 292, 295, 294, 305, 299, 86: 336, 341, 328, 340, 329, 338, 339, 342, 337, 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 111: 321, 318, 326, 322, 325, 324, 327, 320, 323, 334, 332, 333, 128: 412},
		{335, 300, 291, 301, 303, 302, 274, 298, 297, 414, 260, 276, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 58: 246, 248, 247, 249, 296, 64: 319, 66: 275, 68: 293, 292, 295, 294, 305, 299, 86: 336, 341, 328, 340, 329, 338, 339, 342, 337, 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 111: 321, 318, 326, 322, 325, 324, 327, 320, 323, 334, 404, 333},
		{11},
		{12},
		{10: 416},
		// 180
		{335, 300, 291, 301, 303, 302, 274, 298, 297, 418, 260, 276, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 58: 246, 248, 247, 249, 296, 64: 319, 66: 275, 68: 293, 292, 295, 294, 305, 299, 86: 336, 341, 328, 340, 329, 338, 339, 342, 337, 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 111: 321, 318, 326, 322, 325, 324, 327, 320, 323, 334, 332, 333, 128: 417},
		{335, 300, 291, 301, 303, 302, 274, 298, 297, 419, 260, 276, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 58: 246, 248, 247, 249, 296, 64: 319, 66: 275, 68: 293, 292, 295, 294, 305, 299, 86: 336, 341, 328, 340, 329, 338, 339, 342, 337, 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 111: 321, 318, 326, 322, 325, 324, 327, 320, 323, 334, 404, 333},
		{15, 125: 15},
		{16, 125: 16},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 13: 23, 15: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 58: 23, 23, 23, 23, 64: 23, 86: 23, 23, 23, 23, 23, 23, 23, 23, 23},
		// 185
		{424},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 13: 21, 15: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 58: 21, 21, 21, 21, 64: 21, 86: 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{13, 125: 13},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13: 24, 15: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 58: 24, 24, 24, 24, 64: 24, 86: 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 13: 32, 15: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 58: 32, 32, 32, 32, 64: 32, 86: 32, 32, 32, 32, 32, 32, 32, 32, 32, 107: 32, 32, 32, 32},
		// 190
		{431},
		{428, 125: 408, 129: 429, 423},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 13: 20, 15: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 58: 20, 20, 20, 20, 64: 20, 86: 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{430},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 13: 19, 15: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 58: 19, 19, 19, 19, 64: 19, 86: 19, 19, 19, 19, 19, 19, 19, 19, 19},
		// 195
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 13: 22, 15: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 58: 22, 22, 22, 22, 64: 22, 86: 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{405},
		{335, 300, 291, 301, 303, 302, 274, 298, 297, 10: 260, 276, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 58: 246, 248, 247, 249, 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 86: 336, 341, 328, 340, 329, 338, 339, 342, 337, 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 111: 321, 318, 326, 322, 325, 324, 327, 320, 323, 434},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 13: 33, 15: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 58: 33, 33, 33, 33, 64: 33, 86: 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{42: 436},
		// 200
		{335, 300, 291, 301, 303, 302, 274, 298, 297, 10: 260, 276, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 58: 246, 248, 247, 249, 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 86: 336, 341, 328, 340, 329, 338, 339, 342, 337, 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 111: 321, 318, 326, 322, 325, 324, 327, 320, 323, 437},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 13: 34, 15: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 58: 34, 34, 34, 34, 64: 34, 86: 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{3: 200, 6: 200, 11: 200, 13: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
		{3: 199, 6: 199, 11: 199, 13: 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199},
		{2: 440, 11: 439, 123: 479, 438},
		// 205
		{3: 443, 6: 444, 11: 446, 13: 442, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 62: 445, 66: 447, 126: 448},
		{2: 468, 149: 469},
		{3: 443, 6: 444, 11: 446, 13: 442, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 62: 445, 66: 447, 126: 467},
		{28: 464, 43: 463},
		{188, 12: 188, 14: 188, 63: 188, 82: 461},
		// 210
		{187, 12: 187, 14: 187, 63: 187, 82: 459},
		{6: 456, 11: 455, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 62: 454},
		{449, 63: 450},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 13: 46, 15: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 58: 46, 46, 46, 46, 64: 46, 86: 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 452, 142: 451},
		// 215
		{453},
		{44},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 13: 45, 15: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 58: 45, 45, 45, 45, 64: 45, 86: 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{186, 12: 186, 14: 186, 63: 186},
		{185, 12: 185, 14: 185, 63: 185},
		// 220
		{28: 457},
		{43: 458},
		{6: 163, 11: 163, 15: 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163},
		{11: 460},
		{184, 12: 184, 14: 184, 63: 184},
		// 225
		{11: 462},
		{183, 12: 183, 14: 183, 63: 183},
		{3: 443, 6: 444, 11: 446, 13: 442, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 62: 445, 66: 447, 126: 466},
		{43: 465},
		{6: 164, 11: 164, 15: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164},
		// 230
		{189, 12: 189, 14: 189, 63: 189},
		{190, 12: 190, 14: 190, 63: 190},
		{11: 471, 14: 474, 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 62: 472, 156: 473},
		{2: 468, 149: 470},
		{191, 12: 191, 14: 191, 63: 191},
		// 235
		{12: 197, 14: 197},
		{12: 196, 14: 196},
		{12: 475, 14: 476},
		{192, 2: 192, 12: 192, 14: 192, 63: 192},
		{11: 477, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 62: 478},
		// 240
		{193, 2: 193, 12: 193, 14: 193, 63: 193},
		{12: 195, 14: 195},
		{12: 194, 14: 194},
		{14: 480},
		{3: 198, 6: 198, 11: 198, 13: 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198},
		// 245
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 308, 309, 310, 311, 312, 486},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 112: 483},
		{12: 378, 42: 484},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 308, 309, 310, 311, 312, 313, 485, 314},
		{68, 9: 68, 68, 12: 68, 14: 68, 42: 68, 68},
		// 250
		{70, 9: 70, 70, 12: 70, 14: 70, 42: 70, 70, 70, 70, 487},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 308, 309, 310, 311, 488},
		{72, 9: 72, 72, 12: 72, 14: 72, 42: 72, 72, 72, 72, 72, 489},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 308, 309, 310, 490},
		{74, 9: 74, 74, 12: 74, 14: 74, 42: 74, 74, 74, 74, 74, 74, 491},
		// 255
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 308, 309, 492},
		{76, 493, 9: 76, 76, 12: 76, 14: 76, 42: 76, 76, 76, 76, 76, 76, 76},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 308, 494},
		{78, 78, 9: 78, 78, 12: 78, 14: 78, 42: 78, 78, 78, 78, 78, 78, 78, 495, 498, 500, 497, 499, 496},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 522},
		// 260
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 521},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 520},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 519},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 518},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 307, 501},
		// 265
		{80, 80, 9: 80, 80, 12: 80, 14: 80, 42: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 504, 502, 503},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 517},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 516},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 306, 505},
		{87, 87, 4: 507, 506, 9: 87, 87, 12: 87, 14: 87, 42: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		// 270
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 515},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 344, 361, 95: 508},
		{91, 91, 3: 509, 91, 91, 9: 91, 91, 12: 91, 14: 91, 42: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 65: 510, 67: 511},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 514, 361},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 513, 361},
		// 275
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 359, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 360, 294, 512, 361},
		{94, 94, 3: 94, 94, 94, 9: 94, 94, 12: 94, 14: 94, 42: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 65: 94, 67: 94},
		{95, 95, 3: 95, 95, 95, 9: 95, 95, 12: 95, 14: 95, 42: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 65: 95, 67: 95},
		{96, 96, 3: 96, 96, 96, 9: 96, 96, 12: 96, 14: 96, 42: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 65: 96, 67: 96},
		{92, 92, 3: 509, 92, 92, 9: 92, 92, 12: 92, 14: 92, 42: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 65: 510, 67: 511},
		// 280
		{88, 88, 4: 507, 506, 9: 88, 88, 12: 88, 14: 88, 42: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{89, 89, 4: 507, 506, 9: 89, 89, 12: 89, 14: 89, 42: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{81, 81, 9: 81, 81, 12: 81, 14: 81, 42: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 504, 502, 503},
		{82, 82, 9: 82, 82, 12: 82, 14: 82, 42: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 504, 502, 503},
		{83, 83, 9: 83, 83, 12: 83, 14: 83, 42: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 504, 502, 503},
		// 285
		{84, 84, 9: 84, 84, 12: 84, 14: 84, 42: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 504, 502, 503},
		{85, 85, 9: 85, 85, 12: 85, 14: 85, 42: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 504, 502, 503},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 536},
		{1: 61, 61, 61, 61, 61, 61, 61, 61, 11: 61, 13: 61, 15: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{1: 60, 60, 60, 60, 60, 60, 60, 60, 11: 60, 13: 60, 15: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		// 290
		{1: 59, 59, 59, 59, 59, 59, 59, 59, 11: 59, 13: 59, 15: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{1: 58, 58, 58, 58, 58, 58, 58, 58, 11: 58, 13: 58, 15: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{1: 57, 57, 57, 57, 57, 57, 57, 57, 11: 57, 13: 57, 15: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{1: 56, 56, 56, 56, 56, 56, 56, 56, 11: 56, 13: 56, 15: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{1: 55, 55, 55, 55, 55, 55, 55, 55, 11: 55, 13: 55, 15: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		// 295
		{1: 54, 54, 54, 54, 54, 54, 54, 54, 11: 54, 13: 54, 15: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{1: 53, 53, 53, 53, 53, 53, 53, 53, 11: 53, 13: 53, 15: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{1: 52, 52, 52, 52, 52, 52, 52, 52, 11: 52, 13: 52, 15: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{1: 51, 51, 51, 51, 51, 51, 51, 51, 11: 51, 13: 51, 15: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{1: 50, 50, 50, 50, 50, 50, 50, 50, 11: 50, 13: 50, 15: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		// 300
		{62, 9: 62, 62, 12: 62, 14: 62, 42: 62, 62},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 538, 12: 136, 14: 136, 42: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 63: 136, 65: 136, 67: 136, 74: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
		{9: 169, 11: 352, 169, 133: 539},
		{9: 540, 12: 354},
		{65, 9: 65, 65, 12: 65, 14: 65, 42: 65, 65},
		// 305
		{104, 104, 3: 104, 104, 104, 9: 104, 104, 12: 104, 14: 104, 42: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 63: 104, 65: 104, 67: 104, 74: 104, 104, 104, 104, 104, 104, 104, 104, 83: 104, 104, 104},
		{105, 105, 3: 105, 105, 105, 9: 105, 105, 12: 105, 14: 105, 42: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 63: 105, 65: 105, 67: 105, 74: 105, 105, 105, 105, 105, 105, 105, 105, 83: 105, 105, 105},
		{11: 545, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 62: 544, 152: 546},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 12: 118, 14: 118, 42: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 63: 118, 65: 118, 67: 118, 74: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 12: 117, 14: 117, 42: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 63: 117, 65: 117, 67: 117, 74: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		// 310
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 12: 114, 14: 114, 42: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 63: 114, 65: 114, 67: 114, 74: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114},
		{11: 548},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 549, 12: 109, 14: 109, 42: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 63: 109, 65: 109, 67: 109, 74: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109},
		{9: 169, 11: 352, 169, 133: 550},
		{9: 551, 12: 354},
		// 315
		{64, 9: 64, 64, 12: 64, 14: 64, 42: 64, 64},
		{12: 378, 14: 553},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 12: 121, 14: 121, 42: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 63: 121, 65: 121, 67: 121, 74: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		{9: 140, 11: 555, 131: 556, 158: 557, 558},
		{2: 563},
		// 320
		{562},
		{9: 139, 11: 555, 131: 560},
		{9: 559},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 12: 134, 14: 134, 42: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 63: 134, 65: 134, 67: 134, 74: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134},
		{561},
		// 325
		{9: 141, 11: 141},
		{9: 142, 11: 142},
		{4: 570, 11: 564, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 569, 62: 566, 131: 568, 157: 567, 160: 565},
		{2: 563, 12: 149, 14: 149},
		{12: 148, 14: 148},
		// 330
		{82: 580},
		{12: 576, 14: 577},
		{12: 573, 14: 572},
		{12: 138, 14: 138},
		{28: 571},
		// 335
		{12: 137, 14: 137},
		{144, 12: 144, 14: 144},
		{11: 555, 131: 574},
		{14: 575},
		{143, 12: 143, 14: 143},
		// 340
		{11: 578},
		{145, 12: 145, 14: 145},
		{14: 579},
		{146, 12: 146, 14: 146},
		{11: 581},
		// 345
		{12: 147, 14: 147},
		{14: 583},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 12: 135, 14: 135, 42: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 63: 135, 65: 135, 67: 135, 74: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135},
		{335, 300, 291, 301, 303, 302, 274, 298, 297, 10: 260, 276, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 58: 246, 248, 247, 249, 296, 64: 319, 66: 275, 68: 293, 292, 295, 294, 305, 299, 86: 336, 341, 328, 340, 329, 338, 339, 342, 337, 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 317, 111: 321, 318, 326, 322, 325, 324, 327, 320, 323, 334, 585, 333},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13: 35, 15: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 58: 35, 35, 35, 35, 64: 35, 86: 35, 35, 35, 35, 35, 35, 35, 35, 35},
		// 350
		{10: 595},
		{10: 588},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 591, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 589, 134: 590},
		{9: 166, 12: 166},
		{9: 593, 12: 592},
		// 355
		{157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 12: 157, 14: 157, 42: 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 63: 157, 65: 157, 67: 157, 74: 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 594},
		{158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 12: 158, 14: 158, 42: 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 63: 158, 65: 158, 67: 158, 74: 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158},
		{9: 165, 12: 165},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 597, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 589, 134: 596},
		// 360
		{9: 598, 12: 592},
		{159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 12: 159, 14: 159, 42: 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 63: 159, 65: 159, 67: 159, 74: 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159},
		{160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 12: 160, 14: 160, 42: 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 63: 160, 65: 160, 67: 160, 74: 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160},
		{6: 600, 11: 601, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 62: 602, 68: 603},
		{43: 599},
		// 365
		{10: 611},
		{10: 604},
		{150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 12: 150, 14: 150, 42: 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 63: 150, 65: 150, 67: 150, 74: 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 607, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 605, 146: 606},
		{9: 156, 12: 156},
		// 370
		{9: 609, 12: 608},
		{151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 12: 151, 14: 151, 42: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 63: 151, 65: 151, 67: 151, 74: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 610},
		{152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 12: 152, 14: 152, 42: 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 63: 152, 65: 152, 67: 152, 74: 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152},
		{9: 155, 12: 155},
		// 375
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 613, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 605, 146: 612},
		{9: 614, 12: 608},
		{153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 12: 153, 14: 153, 42: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 63: 153, 65: 153, 67: 153, 74: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153},
		{154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 12: 154, 14: 154, 42: 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 63: 154, 65: 154, 67: 154, 74: 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154},
		{13: 205, 58: 205, 205, 205, 205, 64: 205, 107: 205, 205, 205, 205},
		// 380
		{2: 208, 10: 208},
		{14: 624},
		{12: 622, 14: 204},
		{12: 203, 14: 203},
		{3: 443, 6: 444, 11: 446, 13: 442, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 62: 445, 66: 447, 126: 621},
		// 385
		{201, 12: 201, 14: 201},
		{2: 440, 11: 439, 123: 620, 438, 127: 623},
		{12: 202, 14: 202},
		{2: 207, 10: 207},
		{2: 210},
		// 390
		{2: 440, 11: 439, 123: 620, 438, 127: 619, 144: 618, 627},
		{14: 628},
		{11: 629},
		{2: 209},
		{631},
		// 395
		{13: 211, 58: 211, 211, 211, 211, 64: 211, 107: 211, 211, 211, 211},
		{633},
		{13: 212, 58: 212, 212, 212, 212, 64: 212, 107: 212, 212, 212, 212},
		{162: 635},
		{10: 637, 148: 636},
		// 400
		{13: 217, 58: 217, 217, 217, 217, 64: 217, 107: 217, 217, 217, 217},
		{2: 440, 9: 638, 11: 439, 123: 620, 438, 127: 640, 155: 639},
		{646},
		{2: 440, 9: 642, 11: 439, 123: 620, 438, 127: 643},
		{641},
		// 405
		{2: 214, 9: 214, 11: 214},
		{645},
		{644},
		{2: 213, 9: 213, 11: 213},
		{215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 13: 215, 15: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 58: 215, 215, 215, 215, 64: 215, 86: 215, 215, 215, 215, 215, 215, 215, 215, 215, 107: 215, 215, 215, 215},
		// 410
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 13: 216, 15: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 58: 216, 216, 216, 216, 64: 216, 86: 216, 216, 216, 216, 216, 216, 216, 216, 216, 107: 216, 216, 216, 216},
		{3: 443, 6: 444, 11: 446, 13: 442, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 62: 445, 66: 447, 126: 648},
		{649, 63: 650},
		{13: 219, 58: 219, 219, 219, 219, 64: 219, 107: 219, 219, 219, 219},
		{1: 300, 291, 301, 303, 302, 274, 298, 297, 11: 343, 13: 277, 15: 261, 262, 264, 265, 267, 268, 269, 266, 263, 271, 272, 273, 270, 283, 279, 280, 281, 290, 289, 278, 284, 304, 282, 285, 287, 288, 286, 62: 296, 66: 275, 68: 293, 292, 295, 294, 305, 299, 95: 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 316, 452, 142: 651},
		// 415
		{652},
		{13: 218, 58: 218, 218, 218, 218, 64: 218, 107: 218, 218, 218, 218},
		{654, 10: 221, 151: 655},
		{222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 13: 222, 15: 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 58: 222, 222, 222, 222, 64: 222, 86: 222, 222, 222, 222, 222, 222, 222, 222, 222, 107: 222, 222, 222, 222},
		{10: 637, 148: 656},
		// 420
		{220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13: 220, 15: 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 58: 220, 220, 220, 220, 64: 220, 86: 220, 220, 220, 220, 220, 220, 220, 220, 220, 107: 220, 220, 220, 220},
		{10: 224, 150: 658},
		{10: 260, 111: 659},
		{223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 13: 223, 15: 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 58: 223, 223, 223, 223, 64: 223, 86: 223, 223, 223, 223, 223, 223, 223, 223, 223, 107: 223, 223, 223, 223},
		{661},
		// 425
		{225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 13: 225, 15: 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 58: 225, 225, 225, 225, 64: 225, 86: 225, 225, 225, 225, 225, 225, 225, 225, 225, 107: 225, 225, 225, 225},
		{13: 234, 58: 234, 234, 234, 234, 64: 234, 107: 234, 234, 234, 234},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 183

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 10:
		{
			actions.PRGRM.PrintProgram()
		}
	case 11:
		{
			yyVAL.string = actions.Selector(yyS[yypt-1].tok, actions.SELECT_TYP_PKG)
		}
	case 12:
		{
			yyVAL.string = actions.Selector(yyS[yypt-0].tok, actions.SELECT_TYP_FUNC)
		}
	case 13:
		{
			if len(yyS[yypt-0].expressions) > 0 {
				if pkg, err := actions.PRGRM.GetCurrentPackage(); err == nil {
					if fn, err := actions.PRGRM.GetFunction(yyS[yypt-1].string, pkg.Name); err == nil {
						for _, expr := range yyS[yypt-0].expressions {
							fn.AddExpression(expr)
						}
						actions.FunctionDeclaration(fn, nil, nil, nil)
					} else {
						panic(err)
					}
				} else {
					panic(err)
				}
			}

			// if $<bool>4 {

			// 	if _, err := actions.PRGRM.SelectFunction($<string>3); err == nil {
			// 	}
			// }
		}
	case 14:
		{
			yyVAL.string = actions.Selector(yyS[yypt-1].tok, actions.SELECT_TYP_STRCT)
		}
	case 15:
		{
			yyVAL.string = actions.Selector(yyS[yypt-0].tok, actions.SELECT_TYP_STRCT)
		}
	case 16:
		{
			if len(yyS[yypt-0].arguments) > 0 {
				if pkg, err := actions.PRGRM.GetCurrentPackage(); err == nil {
					if strct, err := actions.PRGRM.GetStruct(yyS[yypt-1].string, pkg.Name); err == nil {
						for _, fld := range yyS[yypt-0].arguments {
							strct.AddField(fld)
						}
						// actions.FunctionDeclaration(fn, nil, nil, nil)
					} else {
						panic(err)
					}
				} else {
					panic(err)
				}
			}
			/* if $<bool>4 { */
			/* 	if _, err := actions.PRGRM.SelectStruct($<string>3); err == nil { */
			/* 		//fmt.Println(fmt.Sprintf("== Changed to struct '%s' ==", strct.Name)) */
			/* 	} */
			/* } */
		}
	case 17:
		{
			actions.DeclareGlobal(yyS[yypt-2].argument, yyS[yypt-1].argument, nil, false)
		}
	case 18:
		{
			actions.DeclareGlobal(yyS[yypt-4].argument, yyS[yypt-3].argument, yyS[yypt-1].expressions, true)
		}
	case 19:
		{
			actions.DeclareStruct(yyS[yypt-2].tok, yyS[yypt-0].arguments)
		}
	case 20:
		{
			yyVAL.arguments = nil
		}
	case 21:
		{
			yyVAL.arguments = yyS[yypt-2].arguments
		}
	case 22:
		{
			yyVAL.arguments = []*cxcore.CXArgument{yyS[yypt-1].argument}
		}
	case 23:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-1].argument)
		}
	case 24:
		{
			actions.DeclarePackage(yyS[yypt-1].tok)
		}
	case 25:
		{
			// DeclareImport($2)
		}
	case 26:
		{
			yylval.line = 0
			yyVAL.function = actions.FunctionHeader(yyS[yypt-0].tok, nil, false)
			actions.InFn = true
		}
	case 27:
		{
			yyVAL.function = actions.FunctionHeader(yyS[yypt-0].tok, yyS[yypt-2].arguments, true)
			actions.InFn = true
		}
	case 28:
		{
			yyVAL.arguments = nil
		}
	case 29:
		{
			yyVAL.arguments = yyS[yypt-1].arguments
		}
	case 30:
		{
			actions.FunctionDeclaration(yyS[yypt-2].function, yyS[yypt-1].arguments, nil, yyS[yypt-0].expressions)
			actions.InFn = false
		}
	case 31:
		{
			actions.FunctionDeclaration(yyS[yypt-3].function, yyS[yypt-2].arguments, yyS[yypt-1].arguments, yyS[yypt-0].expressions)
			actions.InFn = false
		}
	case 33:
		{
			yyVAL.arguments = []*cxcore.CXArgument{yyS[yypt-0].argument}
		}
	case 34:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-0].argument)
		}
	case 35:
		{
			yyS[yypt-0].argument.Name = yyS[yypt-1].argument.Name
			yyS[yypt-0].argument.Package = yyS[yypt-1].argument.Package
			yyS[yypt-0].argument.IsLocalDeclaration = true
			yyVAL.argument = yyS[yypt-0].argument
		}
	case 37:
		{
			if pkg, err := actions.PRGRM.GetCurrentPackage(); err == nil {
				arg := cxcore.MakeArgument("", actions.CurrentFile, actions.LineNo)
				arg.AddType(cxcore.TypeNames[cxcore.TYPE_UNDEFINED])
				arg.Name = yyS[yypt-0].tok
				arg.Package = pkg
				yyVAL.argument = arg
			} else {
				panic(err)
			}
		}
	case 38:
		{
			yyVAL.argument = yyS[yypt-1].argument
		}
	case 39:
		{
			arg := actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, actions.CurrentFile, actions.LineNo)
			yyVAL.arguments = []*cxcore.CXArgument{arg}
		}
	case 40:
		{
			arg := actions.DeclarationSpecifiersBasic(yyS[yypt-0].i)
			yyVAL.arguments = []*cxcore.CXArgument{arg}
		}
	case 41:
		{
			arg := actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, actions.CurrentFile, actions.LineNo)
			yyVAL.arguments = append(yyS[yypt-2].arguments, arg)
		}
	case 42:
		{
			arg := actions.DeclarationSpecifiersBasic(yyS[yypt-0].i)
			yyVAL.arguments = append(yyS[yypt-2].arguments, arg)
		}
	case 43:
		{

			yyVAL.arguments = yyS[yypt-1].arguments

		}
	case 44:
		{
			yyVAL.arguments = nil
		}
	case 45:
		{
			arg := cxcore.MakeArgument("", actions.CurrentFile, actions.LineNo).AddType("func")
			arg.Inputs = yyS[yypt-1].arguments
			arg.Outputs = yyS[yypt-0].arguments
			yyVAL.argument = actions.DeclarationSpecifiers(arg, []int{0}, cxcore.DECL_FUNC)
		}
	case 46:
		{
			yyVAL.argument = actions.DeclarationSpecifiers(yyS[yypt-0].argument, []int{0}, cxcore.DECL_POINTER)
		}
	case 47:
		{
			yyVAL.argument = actions.DeclarationSpecifiers(yyS[yypt-0].argument, []int{0}, cxcore.DECL_SLICE)
		}
	case 48:
		{
			yyVAL.argument = actions.DeclarationSpecifiersBasic(yyS[yypt-0].i)
		}
	case 49:
		{
			yyVAL.argument = actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, actions.CurrentFile, actions.LineNo)
		}
	case 50:
		{
			basic := actions.DeclarationSpecifiersBasic(yyS[yypt-0].i)
			yyVAL.argument = actions.DeclarationSpecifiers(basic, yyS[yypt-1].ints, cxcore.DECL_ARRAY)
		}
	case 51:
		{
			strct := actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, actions.CurrentFile, actions.LineNo)
			yyVAL.argument = actions.DeclarationSpecifiers(strct, yyS[yypt-1].ints, cxcore.DECL_ARRAY)
		}
	case 52:
		{
			yyVAL.argument = actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, yyS[yypt-2].tok, true, actions.CurrentFile, actions.LineNo)
		}
	case 53:
		{
			yyVAL.argument = actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, cxcore.TypeNames[yyS[yypt-2].i], true, actions.CurrentFile, actions.LineNo)
		}
	case 54:
		{
			yyVAL.i = cxcore.TYPE_AFF
		}
	case 55:
		{
			yyVAL.i = cxcore.TYPE_BOOL
		}
	case 56:
		{
			yyVAL.i = cxcore.TYPE_STR
		}
	case 57:
		{
			yyVAL.i = cxcore.TYPE_F32
		}
	case 58:
		{
			yyVAL.i = cxcore.TYPE_F64
		}
	case 59:
		{
			yyVAL.i = cxcore.TYPE_I8
		}
	case 60:
		{
			yyVAL.i = cxcore.TYPE_I16
		}
	case 61:
		{
			yyVAL.i = cxcore.TYPE_I32
		}
	case 62:
		{
			yyVAL.i = cxcore.TYPE_I64
		}
	case 63:
		{
			yyVAL.i = cxcore.TYPE_UI8
		}
	case 64:
		{
			yyVAL.i = cxcore.TYPE_UI16
		}
	case 65:
		{
			yyVAL.i = cxcore.TYPE_UI32
		}
	case 66:
		{
			yyVAL.i = cxcore.TYPE_UI64
		}
	case 67:
		{
			yyVAL.expressions = nil
		}
	case 68:
		{
			if yyS[yypt-0].expressions[0].IsStructLiteral {
				yyVAL.expressions = actions.StructLiteralAssignment([]*cxcore.CXExpression{actions.StructLiteralFields(yyS[yypt-2].tok)}, yyS[yypt-0].expressions)
			} else {
				yyVAL.expressions = actions.Assignment([]*cxcore.CXExpression{actions.StructLiteralFields(yyS[yypt-2].tok)}, "=", yyS[yypt-0].expressions)
			}
		}
	case 69:
		{
			if yyS[yypt-0].expressions[0].IsStructLiteral {
				yyVAL.expressions = append(yyS[yypt-4].expressions, actions.StructLiteralAssignment([]*cxcore.CXExpression{actions.StructLiteralFields(yyS[yypt-2].tok)}, yyS[yypt-0].expressions)...)
			} else {
				yyVAL.expressions = append(yyS[yypt-4].expressions, actions.Assignment([]*cxcore.CXExpression{actions.StructLiteralFields(yyS[yypt-2].tok)}, "=", yyS[yypt-0].expressions)...)
			}
		}
	case 70:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 71:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 72:
		{
			yyVAL.ints = []int{int(yyS[yypt-1].i32)}
		}
	case 73:
		{
			yyVAL.ints = append(yyS[yypt-3].ints, int(yyS[yypt-1].i32))
		}
	case 74:
		{
			yyVAL.ints = []int{0}
		}
	case 75:
		{
			yyVAL.ints = append(yyS[yypt-2].ints, 0)
		}
	case 76:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 77:
		{
			yyVAL.expressions = nil
		}
	case 78:
		{
			yyVAL.expressions = actions.ArrayLiteralExpression(yyS[yypt-4].ints, yyS[yypt-3].i, yyS[yypt-1].expressions)
		}
	case 79:
		{
			yyVAL.expressions = nil
		}
	case 80:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 81:
		{

			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 82:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 83:
		{
			yyVAL.expressions = nil
		}
	case 84:
		{
			yyVAL.expressions = actions.SliceLiteralExpression(yyS[yypt-3].i, yyS[yypt-1].expressions)
		}
	case 85:
		{
			yyVAL.expressions = nil
		}
	case 86:
		{
			for _, expr := range yyS[yypt-0].expressions {
				if expr.Outputs[0].Name == yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Inputs[0].Name {
					expr.Outputs[0].Lengths = append(expr.Outputs[0].Lengths, 0)
					expr.Outputs[0].DeclarationSpecifiers = append(expr.Outputs[0].DeclarationSpecifiers, cxcore.DECL_SLICE)
				}
			}

			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 87:
		{
			yyVAL.string = yyS[yypt-0].tok
		}
	case 88:
		{
			yyVAL.string = strconv.Itoa(int(yyS[yypt-0].i32))
		}
	case 89:
		{
			yyVAL.string = cxcore.TypeNames[yyS[yypt-2].i] + "." + yyS[yypt-0].tok
		}
	case 90:
		{
			res := append([]string{yyS[yypt-3].string}, yyS[yypt-1].tok)
			res = append(res, yyS[yypt-5].tok)
			yyVAL.stringA = res
		}
	case 91:
		{
			yyVAL.stringA = append([]string{yyS[yypt-3].tok}, yyS[yypt-1].string)
		}
	case 92:
		{
			yyVAL.stringA = append(yyS[yypt-1].stringA, yyS[yypt-3].tok)
		}
	case 93:
		{
			res := append(yyS[yypt-3].stringA, yyS[yypt-1].stringA...)
			yyVAL.stringA = append(res, yyS[yypt-5].tok)
		}
	case 94:
		{
			yyVAL.stringA = yyS[yypt-1].stringA
		}
	case 95:
		{
			yyS[yypt-2].stringA = append(yyS[yypt-2].stringA, yyS[yypt-1].stringA...)
			yyVAL.stringA = yyS[yypt-2].stringA
		}
	case 96:
		{
			yyVAL.expressions = actions.SliceLiteralExpression(cxcore.TYPE_AFF, nil)
		}
	case 97:
		{
			var exprs []*cxcore.CXExpression
			for _, str := range yyS[yypt-0].stringA {
				expr := actions.WritePrimary(cxcore.TYPE_AFF, encoder.Serialize(str), false)
				expr[len(expr)-1].IsArrayLiteral = true
				exprs = append(exprs, expr...)
			}

			yyVAL.expressions = actions.SliceLiteralExpression(cxcore.TYPE_AFF, exprs)
		}
	case 98:
		{
			yyVAL.i32 = yyS[yypt-0].i32
		}
	case 99:
		{
			yyVAL.i32 = -yyS[yypt-0].i32
		}
	case 100:
		{
			yyVAL.expressions = actions.PrimaryIdentifier(yyS[yypt-0].tok)
		}
	case 101:
		{
			yyVAL.expressions = nil
		}
	case 102:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 103:
		{
			yyVAL.expressions = actions.WritePrimary(cxcore.TYPE_STR, encoder.Serialize(yyS[yypt-0].tok), false)
		}
	case 104:
		{
			exprs := actions.WritePrimary(cxcore.TYPE_BOOL, encoder.Serialize(yyS[yypt-0].bool), false)
			yyVAL.expressions = exprs
		}
	case 105:
		{
			yyVAL.expressions = actions.WritePrimary(cxcore.TYPE_I8, encoder.Serialize(yyS[yypt-0].i8), false)
		}
	case 106:
		{
			yyVAL.expressions = actions.WritePrimary(cxcore.TYPE_I16, encoder.Serialize(yyS[yypt-0].i16), false)
		}
	case 107:
		{
			yyVAL.expressions = actions.WritePrimary(cxcore.TYPE_I32, encoder.Serialize(yyS[yypt-0].i32), false)
		}
	case 108:
		{
			yyVAL.expressions = actions.WritePrimary(cxcore.TYPE_I64, encoder.Serialize(yyS[yypt-0].i64), false)
		}
	case 109:
		{
			yyVAL.expressions = actions.WritePrimary(cxcore.TYPE_UI8, encoder.Serialize(yyS[yypt-0].ui8), false)
		}
	case 110:
		{
			yyVAL.expressions = actions.WritePrimary(cxcore.TYPE_UI16, encoder.Serialize(yyS[yypt-0].ui16), false)
		}
	case 111:
		{
			yyVAL.expressions = actions.WritePrimary(cxcore.TYPE_UI32, encoder.Serialize(yyS[yypt-0].ui32), false)
		}
	case 112:
		{
			yyVAL.expressions = actions.WritePrimary(cxcore.TYPE_UI64, encoder.Serialize(yyS[yypt-0].ui64), false)
		}
	case 113:
		{
			yyVAL.expressions = actions.WritePrimary(cxcore.TYPE_F32, encoder.Serialize(yyS[yypt-0].f32), false)
		}
	case 114:
		{
			yyVAL.expressions = actions.WritePrimary(cxcore.TYPE_F64, encoder.Serialize(yyS[yypt-0].f64), false)
		}
	case 115:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 116:
		{
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 117:
		{
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 118:
		{
			yyVAL.tok = cxcore.TypeNames[yyS[yypt-0].i]
		}
	case 121:
		{
			yyVAL.expressions = actions.PostfixExpressionArray(yyS[yypt-3].expressions, yyS[yypt-1].expressions)
		}
	case 122:
		{
			yyVAL.expressions = actions.PostfixExpressionNative(int(yyS[yypt-2].i), yyS[yypt-0].tok)
		}
	case 123:
		{
			yyVAL.expressions = actions.PostfixExpressionEmptyFunCall(yyS[yypt-2].expressions)
		}
	case 124:
		{
			yyVAL.expressions = actions.PostfixExpressionFunCall(yyS[yypt-3].expressions, yyS[yypt-1].expressions)
		}
	case 125:
		{
			yyVAL.expressions = actions.PostfixExpressionIncDec(yyS[yypt-1].expressions, true)
		}
	case 126:
		{
			yyVAL.expressions = actions.PostfixExpressionIncDec(yyS[yypt-1].expressions, false)
		}
	case 127:
		{
			yyVAL.expressions = actions.PostfixExpressionField(yyS[yypt-2].expressions, yyS[yypt-0].tok)
		}
	case 129:
		{
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 131:
		{
			// TODO
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 132:
		{
			// TODO
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 133:
		{
			yyVAL.expressions = actions.UnaryExpression(yyS[yypt-1].tok, yyS[yypt-0].expressions)
		}
	case 140:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_MUL)
		}
	case 141:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_DIV)
		}
	case 142:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_MOD)
		}
	case 144:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_ADD)
		}
	case 145:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_SUB)
		}
	case 147:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_BITSHL)
		}
	case 148:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_BITSHR)
		}
	case 149:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_BITCLEAR)
		}
	case 151:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_EQUAL)
		}
	case 152:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_UNEQUAL)
		}
	case 153:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_LT)
		}
	case 154:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_GT)
		}
	case 155:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_LTEQ)
		}
	case 156:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_GTEQ)
		}
	case 158:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_BITAND)
		}
	case 160:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_BITXOR)
		}
	case 162:
		{
			yyVAL.expressions = actions.ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.OP_BITOR)
		}
	case 164:
		{
			yyVAL.expressions = actions.UndefinedTypeOperation(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.Natives[cxcore.OP_BOOL_AND])
		}
	case 166:
		{
			yyVAL.expressions = actions.UndefinedTypeOperation(yyS[yypt-2].expressions, yyS[yypt-0].expressions, cxcore.Natives[cxcore.OP_BOOL_OR])
		}
	case 170:
		{
			yyVAL.expressions = actions.PrimaryStructLiteral(yyS[yypt-3].tok, yyS[yypt-1].expressions)
		}
	case 171:
		{
			yyVAL.expressions = actions.UnaryExpression(yyS[yypt-4].tok, actions.PrimaryStructLiteral(yyS[yypt-3].tok, yyS[yypt-1].expressions))
		}
	case 172:
		{
			yyVAL.expressions = actions.PrimaryStructLiteralExternal(yyS[yypt-5].expressions[0].Outputs[0].Name, yyS[yypt-3].tok, yyS[yypt-1].expressions)
		}
	case 174:
		{
			if yyS[yypt-0].expressions == nil {
				yyVAL.expressions = nil
			}
			if yyS[yypt-0].expressions != nil {
				if yyS[yypt-0].expressions[0].IsArrayLiteral {
					if yyS[yypt-1].tok != "=" && yyS[yypt-1].tok != ":=" {
						panic("")
					}
					if yyS[yypt-1].tok == ":=" {
						for _, from := range yyS[yypt-0].expressions {
							from.Outputs[0].IsShortDeclaration = true
							from.Outputs[0].PreviouslyDeclared = true
						}
					}
					yyVAL.expressions = actions.ArrayLiteralAssignment(yyS[yypt-2].expressions, yyS[yypt-0].expressions)
				} else if yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsStructLiteral {
					if yyS[yypt-1].tok != "=" && yyS[yypt-1].tok != ":=" {
						panic("")
					}
					if yyS[yypt-1].tok == ":=" {
						for _, from := range yyS[yypt-0].expressions {
							from.Outputs[0].IsShortDeclaration = true
							from.Outputs[0].PreviouslyDeclared = true
						}
					}
					yyVAL.expressions = actions.StructLiteralAssignment(yyS[yypt-2].expressions, yyS[yypt-0].expressions)
				} else {
					yyVAL.expressions = actions.Assignment(yyS[yypt-2].expressions, yyS[yypt-1].tok, yyS[yypt-0].expressions)
				}
			}
		}
	case 188:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Outputs = append(yyS[yypt-2].expressions[len(yyS[yypt-2].expressions)-1].Outputs, yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Outputs...)
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 190:
		{
			yyVAL.expressions = actions.DeclareLocal(yyS[yypt-2].argument, yyS[yypt-1].argument, nil, false)
		}
	case 191:
		{
			yyVAL.expressions = actions.DeclareLocal(yyS[yypt-4].argument, yyS[yypt-3].argument, yyS[yypt-1].expressions, true)
		}
	case 199:
		{
			yyVAL.expressions = nil
		}
	case 201:
		{
			// it has to be the first expression so all the nested expressions are executed
			// instead of only executing the last one
			// UPDATE: I need to label all expressions. `goto` will jump to first occurrance anyway, so no problem
			// I need this behavior for affordances
			for _, expr := range yyS[yypt-0].expressions {
				expr.Label = yyS[yypt-2].tok
			}

			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 202:
		{
			yyVAL.expressions = nil
		}
	case 203:
		{
			yyVAL.expressions = nil
		}
	case 204:
		{
			yyVAL.expressions = nil
		}
	case 205:
		{
			yyVAL.expressions = yyS[yypt-2].expressions
		}
	case 207:
		{
			yyVAL.expressions = append(yyS[yypt-1].expressions, yyS[yypt-0].expressions...)
		}
	case 209:
		{
			yyVAL.expressions = nil
		}
	case 210:
		{
			yyVAL.expressions = nil
		}
	case 211:
		{
			if len(yyS[yypt-1].expressions) > 0 && yyS[yypt-1].expressions[len(yyS[yypt-1].expressions)-1].Operator == nil && !yyS[yypt-1].expressions[len(yyS[yypt-1].expressions)-1].IsMethodCall {
				outs := yyS[yypt-1].expressions[len(yyS[yypt-1].expressions)-1].Outputs
				if len(outs) > 0 {
					println(cxcore.CompilationError(outs[0].FileName, outs[0].FileLine), "invalid expression")
				} else {
					println(cxcore.CompilationError(actions.CurrentFile, actions.LineNo), "invalid expression")
				}
				yyVAL.expressions = nil
			} else {
				yyVAL.expressions = yyS[yypt-1].expressions
			}
			// $$ = $1
		}
	case 212:
		{
			yyVAL.expressions = actions.SelectionStatement(yyS[yypt-6].expressions, yyS[yypt-4].expressions, yyS[yypt-2].SelectStatements, yyS[yypt-1].expressions, actions.SEL_ELSEIFELSE)
		}
	case 213:
		{
			yyVAL.expressions = actions.SelectionExpressions(yyS[yypt-5].expressions, yyS[yypt-3].expressions, yyS[yypt-1].expressions)
		}
	case 214:
		{
			yyVAL.expressions = actions.SelectionExpressions(yyS[yypt-4].expressions, nil, yyS[yypt-1].expressions)
		}
	case 215:
		{
			yyVAL.expressions = actions.SelectionStatement(yyS[yypt-5].expressions, yyS[yypt-3].expressions, yyS[yypt-1].SelectStatements, nil, actions.SEL_ELSEIF)
		}
	case 216:
		{
			//
			yyVAL.expressions = actions.SelectionStatement(yyS[yypt-4].expressions, nil, yyS[yypt-1].SelectStatements, nil, actions.SEL_ELSEIF)
		}
	case 217:
		{
			//
			yyVAL.expressions = actions.SelectionStatement(yyS[yypt-5].expressions, nil, yyS[yypt-2].SelectStatements, yyS[yypt-1].expressions, actions.SEL_ELSEIFELSE)
		}
	case 218:
		{
			yyVAL.expressions = actions.SelectionExpressions(yyS[yypt-1].expressions, yyS[yypt-0].expressions, nil)
		}
	case 219:
		{
			yyVAL.expressions = nil
		}
	case 220:
		{
			yyVAL.SelectStatement = actions.SelectStatement{
				Condition: yyS[yypt-3].expressions,
				Then:      yyS[yypt-1].expressions,
			}
		}
	case 221:
		{
			yyVAL.SelectStatement = actions.SelectStatement{
				Condition: yyS[yypt-2].expressions,
				Then:      nil,
			}
		}
	case 222:
		{
			yyVAL.SelectStatements = []actions.SelectStatement{yyS[yypt-0].SelectStatement}
		}
	case 223:
		{
			yyVAL.SelectStatements = append(yyS[yypt-1].SelectStatements, yyS[yypt-0].SelectStatement)
		}
	case 224:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 225:
		{
			yyVAL.expressions = nil
		}
	case 226:
		{
			yyVAL.expressions = actions.IterationExpressions(nil, yyS[yypt-1].expressions, nil, yyS[yypt-0].expressions)
		}
	case 227:
		{
			yyVAL.expressions = actions.IterationExpressions(yyS[yypt-2].expressions, yyS[yypt-1].expressions, nil, yyS[yypt-0].expressions)
		}
	case 228:
		{
			yyVAL.expressions = actions.IterationExpressions(yyS[yypt-3].expressions, yyS[yypt-2].expressions, yyS[yypt-1].expressions, yyS[yypt-0].expressions)
		}
	case 229:
		{
			retExprs := actions.ReturnExpressions{Expressions: actions.AssociateReturnExpressions(0, yyS[yypt-0].expressions)}
			retExprs.Size++
			yyVAL.ReturnExpressions = retExprs
		}
	case 230:
		{
			yyS[yypt-2].ReturnExpressions.Expressions = append(yyS[yypt-2].ReturnExpressions.Expressions, actions.AssociateReturnExpressions(yyS[yypt-2].ReturnExpressions.Size, yyS[yypt-0].expressions)...)
			yyS[yypt-2].ReturnExpressions.Size++
			yyVAL.ReturnExpressions = yyS[yypt-2].ReturnExpressions
		}
	case 231:
		{
			if pkg, err := actions.PRGRM.GetCurrentPackage(); err == nil {
				expr := cxcore.MakeExpression(cxcore.Natives[cxcore.OP_JMP], actions.CurrentFile, actions.LineNo)
				expr.Package = pkg
				expr.Label = yyS[yypt-1].tok

				arg := cxcore.MakeArgument("", actions.CurrentFile, actions.LineNo).AddType("bool")
				arg.Package = pkg

				expr.AddInput(arg)

				yyVAL.expressions = []*cxcore.CXExpression{expr}
			} else {
				panic(err)
			}
		}
	case 232:
		{
			yyVAL.expressions = actions.ContinueExpressions()
		}
	case 233:
		{
			yyVAL.expressions = actions.BreakExpressions()
		}
	case 234:
		{
			yyVAL.expressions = actions.AddJmpToReturnExpressions(actions.ReturnExpressions{})
		}
	case 235:
		{
			yyVAL.expressions = actions.AddJmpToReturnExpressions(yyS[yypt-1].ReturnExpressions)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
