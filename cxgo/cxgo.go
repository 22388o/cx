// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	// "fmt"
	. "github.com/skycoin/cx/cx"
	"github.com/skycoin/skycoin/src/cipher/encoder"
	// "github.com/skycoin/cx/src/interpreted"
)

// var prgrm = MakeProgram(CALLSTACK_SIZE, STACK_SIZE, INIT_HEAP_SIZE)
var dataOffset int

var lineNo int = 0
var webMode bool
var baseOutput bool
var replMode bool
var helpMode bool
var interpretMode bool
var compileMode bool
var replTargetFn string = ""
var replTargetStrct string = ""
var replTargetMod string = ""

var inREPL bool = false

var sysInitExprs []*CXExpression

// var cxt = interpreted.MakeProgram()
//var cxt = cx0.CXT

var dStack bool = false
var inFn bool = false

//var dProgram bool = false
var tag string = ""
var asmNL = "\n"
var fileName string

type yySymType struct {
	yys     int
	i       int
	byt     byte
	i32     int32
	i64     int64
	f32     float32
	f64     float64
	tok     string
	bool    bool
	string  string
	stringA []string

	line int

	argument  *CXArgument
	arguments []*CXArgument

	expression  *CXExpression
	expressions []*CXExpression

	selectStatement  selectStatement
	selectStatements []selectStatement

	arrayArguments [][]*CXExpression

	function *CXFunction
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault       = 57490
	yyEofCode       = 57344
	ADDR            = 57489
	ADD_ASSIGN      = 57434
	ADD_OP          = 57394
	AFF             = 57485
	AFFVAR          = 57401
	AND             = 57392
	AND_ASSIGN      = 57435
	AND_OP          = 57432
	ASSIGN          = 57374
	BASICTYPE       = 57466
	BITANDEQ        = 57420
	BITCLEAR_OP     = 57411
	BITOREQ         = 57422
	BITOR_OP        = 57410
	BITXOREQ        = 57421
	BITXOR_OP       = 57409
	BOOL            = 57444
	BOOLEAN_LITERAL = 57347
	BREAK           = 57463
	BYTE            = 57445
	BYTE_LITERAL    = 57346
	CASE            = 57460
	CASSIGN         = 57375
	CLAUSES         = 57476
	COLON           = 57384
	COMMA           = 57362
	COMMENT         = 57364
	CONST           = 57459
	CONTINUE        = 57464
	DEC_OP          = 57423
	DEF             = 57471
	DEFAULT         = 57461
	DIVEQ           = 57415
	DIV_ASSIGN      = 57439
	DIV_OP          = 57397
	DOUBLE_LITERAL  = 57351
	DPROGRAM        = 57483
	DSTACK          = 57482
	DSTATE          = 57484
	ELSE            = 57368
	ENUM            = 57458
	EQUAL           = 57383
	EQUALWORD       = 57386
	EQ_OP           = 57430
	EXP             = 57407
	EXPEQ           = 57417
	EXPR            = 57472
	F32             = 57446
	F64             = 57447
	FIELD           = 57473
	FLOAT_LITERAL   = 57350
	FOR             = 57369
	FUNC            = 57352
	GE_OP           = 57428
	GOTO            = 57378
	GTEQ_OP         = 57381
	GTHANEQ         = 57389
	GTHANWORD       = 57387
	GT_OP           = 57379
	I16             = 57449
	I32             = 57450
	I64             = 57451
	I8              = 57448
	IDENTIFIER      = 57360
	IF              = 57367
	IMPORT          = 57376
	INC_OP          = 57424
	INFER           = 57487
	INPUT           = 57474
	INT_LITERAL     = 57348
	LBRACE          = 57356
	LBRACK          = 57358
	LEFTSHIFT       = 57405
	LEFTSHIFTEQ     = 57418
	LEFT_ASSIGN     = 57436
	LEFT_OP         = 57426
	LE_OP           = 57429
	LONG_LITERAL    = 57349
	LPAREN          = 57354
	LTEQ_OP         = 57382
	LTHANEQ         = 57390
	LTHANWORD       = 57388
	LT_OP           = 57380
	MINUSEQ         = 57413
	MINUSMINUS      = 57403
	MOD_ASSIGN      = 57437
	MOD_OP          = 57398
	MULTEQ          = 57414
	MUL_ASSIGN      = 57438
	MUL_OP          = 57396
	NEG_OP          = 57400
	NEW             = 57385
	NEWLINE         = 57373
	NE_OP           = 57431
	NOT             = 57408
	OBJECT          = 57477
	OBJECTS         = 57478
	OP              = 57353
	OR              = 57393
	OR_ASSIGN       = 57440
	OR_OP           = 57433
	OUTPUT          = 57475
	PACKAGE         = 57366
	PERIOD          = 57363
	PLUSEQ          = 57412
	PLUSPLUS        = 57402
	PSTEP           = 57480
	PTR_OP          = 57425
	RBRACE          = 57357
	RBRACK          = 57359
	REF_OP          = 57399
	REM             = 57470
	REMAINDER       = 57404
	REMAINDEREQ     = 57416
	RETURN          = 57377
	RIGHTSHIFT      = 57406
	RIGHTSHIFTEQ    = 57419
	RIGHT_ASSIGN    = 57441
	RIGHT_OP        = 57427
	RPAREN          = 57355
	SEMICOLON       = 57372
	SFUNC           = 57469
	SPACKAGE        = 57467
	SSTRUCT         = 57468
	STEP            = 57479
	STR             = 57452
	STRING_LITERAL  = 57365
	STRUCT          = 57371
	SUB_ASSIGN      = 57442
	SUB_OP          = 57395
	SWITCH          = 57462
	TAG             = 57486
	TSTEP           = 57481
	TYPE            = 57465
	TYPSTRUCT       = 57370
	UI16            = 57454
	UI32            = 57455
	UI64            = 57456
	UI8             = 57453
	UNEQUAL         = 57391
	UNION           = 57457
	VALUE           = 57488
	VAR             = 57361
	XOR_ASSIGN      = 57443
	yyErrCode       = 57345

	yyMaxDepth = 200
	yyTabOfs   = -181
)

var (
	yyPrec = map[int]int{
		IDENTIFIER: 0,
		LBRACE:     0,
	}

	yyXLAT = map[int]int{
		57399: 0,   // REF_OP (164x)
		57396: 1,   // MUL_OP (158x)
		57354: 2,   // LPAREN (156x)
		57394: 3,   // ADD_OP (152x)
		57395: 4,   // SUB_OP (152x)
		57358: 5,   // LBRACK (149x)
		57372: 6,   // SEMICOLON (148x)
		57423: 7,   // DEC_OP (138x)
		57424: 8,   // INC_OP (138x)
		57357: 9,   // RBRACE (131x)
		57356: 10,  // LBRACE (130x)
		57360: 11,  // IDENTIFIER (122x)
		57362: 12,  // COMMA (120x)
		57355: 13,  // RPAREN (108x)
		57444: 14,  // BOOL (104x)
		57445: 15,  // BYTE (104x)
		57446: 16,  // F32 (104x)
		57447: 17,  // F64 (104x)
		57449: 18,  // I16 (104x)
		57450: 19,  // I32 (104x)
		57451: 20,  // I64 (104x)
		57448: 21,  // I8 (104x)
		57452: 22,  // STR (104x)
		57454: 23,  // UI16 (104x)
		57455: 24,  // UI32 (104x)
		57456: 25,  // UI64 (104x)
		57453: 26,  // UI8 (104x)
		57348: 27,  // INT_LITERAL (95x)
		57365: 28,  // STRING_LITERAL (93x)
		57347: 29,  // BOOLEAN_LITERAL (92x)
		57346: 30,  // BYTE_LITERAL (92x)
		57351: 31,  // DOUBLE_LITERAL (92x)
		57350: 32,  // FLOAT_LITERAL (92x)
		57349: 33,  // LONG_LITERAL (92x)
		57400: 34,  // NEG_OP (92x)
		57359: 35,  // RBRACK (90x)
		57384: 36,  // COLON (87x)
		63:    37,  // '?' (79x)
		57433: 38,  // OR_OP (79x)
		57432: 39,  // AND_OP (78x)
		57410: 40,  // BITOR_OP (76x)
		57409: 41,  // BITXOR_OP (74x)
		57430: 42,  // EQ_OP (70x)
		57431: 43,  // NE_OP (70x)
		57379: 44,  // GT_OP (68x)
		57381: 45,  // GTEQ_OP (68x)
		57380: 46,  // LT_OP (68x)
		57382: 47,  // LTEQ_OP (68x)
		57426: 48,  // LEFT_OP (65x)
		57427: 49,  // RIGHT_OP (65x)
		57550: 50,  // type_specifier (63x)
		57374: 51,  // ASSIGN (59x)
		57397: 52,  // DIV_OP (57x)
		57398: 53,  // MOD_OP (57x)
		57495: 54,  // array_literal_expression (55x)
		57543: 55,  // slice_literal_expression (55x)
		57538: 56,  // postfix_expression (54x)
		57539: 57,  // primary_expression (54x)
		57551: 58,  // unary_expression (54x)
		57552: 59,  // unary_operator (54x)
		57434: 60,  // ADD_ASSIGN (50x)
		57435: 61,  // AND_ASSIGN (50x)
		57439: 62,  // DIV_ASSIGN (50x)
		57436: 63,  // LEFT_ASSIGN (50x)
		57437: 64,  // MOD_ASSIGN (50x)
		57438: 65,  // MUL_ASSIGN (50x)
		57440: 66,  // OR_ASSIGN (50x)
		57441: 67,  // RIGHT_ASSIGN (50x)
		57442: 68,  // SUB_ASSIGN (50x)
		57443: 69,  // XOR_ASSIGN (50x)
		57532: 70,  // multiplicative_expression (48x)
		57363: 71,  // PERIOD (48x)
		57361: 72,  // VAR (48x)
		57491: 73,  // additive_expression (46x)
		57542: 74,  // shift_expression (44x)
		57540: 75,  // relational_expression (40x)
		57514: 76,  // equality_expression (38x)
		57493: 77,  // and_expression (37x)
		57515: 78,  // exclusive_or_expression (36x)
		57525: 79,  // inclusive_or_expression (35x)
		57530: 80,  // logical_and_expression (34x)
		57502: 81,  // conditional_expression (33x)
		57531: 82,  // logical_or_expression (33x)
		57367: 83,  // IF (32x)
		57369: 84,  // FOR (31x)
		57462: 85,  // SWITCH (31x)
		57497: 86,  // assignment_expression (30x)
		57352: 87,  // FUNC (20x)
		57376: 88,  // IMPORT (20x)
		57366: 89,  // PACKAGE (20x)
		57465: 90,  // TYPE (20x)
		57344: 91,  // $end (19x)
		57516: 92,  // expression (18x)
		57501: 93,  // compound_statement (15x)
		57517: 94,  // expression_statement (11x)
		57527: 95,  // iteration_statement (9x)
		57541: 96,  // selection_statement (9x)
		57545: 97,  // statement (9x)
		57499: 98,  // block_item (8x)
		57504: 99,  // declaration (8x)
		57506: 100, // declarator (8x)
		57510: 101, // direct_declarator (8x)
		57505: 102, // declaration_specifiers (6x)
		57534: 103, // package_identifier (6x)
		57368: 104, // ELSE (5x)
		57535: 105, // parameter_declaration (5x)
		57500: 106, // block_item_list (4x)
		57496: 107, // array_literal_expression_list (2x)
		57503: 108, // constant_expression (2x)
		57511: 109, // else_statement (2x)
		57512: 110, // elseif (2x)
		57518: 111, // external_declaration (2x)
		57520: 112, // function_declaration (2x)
		57521: 113, // function_header (2x)
		57522: 114, // function_parameters (2x)
		57523: 115, // global_declaration (2x)
		57524: 116, // import_declaration (2x)
		57526: 117, // initializer (2x)
		57533: 118, // package_declaration (2x)
		57536: 119, // parameter_list (2x)
		57537: 120, // parameter_type_list (2x)
		57544: 121, // slice_literal_expression_list (2x)
		57546: 122, // struct_declaration (2x)
		57492: 123, // after_period (1x)
		57494: 124, // argument_expression_list (1x)
		57498: 125, // assignment_operator (1x)
		57513: 126, // elseif_list (1x)
		57519: 127, // fields (1x)
		57371: 128, // STRUCT (1x)
		57547: 129, // struct_fields (1x)
		57548: 130, // struct_literal_fields (1x)
		57549: 131, // translation_unit (1x)
		57490: 132, // $default (0x)
		57489: 133, // ADDR (0x)
		57485: 134, // AFF (0x)
		57401: 135, // AFFVAR (0x)
		57392: 136, // AND (0x)
		57466: 137, // BASICTYPE (0x)
		57420: 138, // BITANDEQ (0x)
		57411: 139, // BITCLEAR_OP (0x)
		57422: 140, // BITOREQ (0x)
		57421: 141, // BITXOREQ (0x)
		57463: 142, // BREAK (0x)
		57460: 143, // CASE (0x)
		57375: 144, // CASSIGN (0x)
		57476: 145, // CLAUSES (0x)
		57364: 146, // COMMENT (0x)
		57459: 147, // CONST (0x)
		57464: 148, // CONTINUE (0x)
		57471: 149, // DEF (0x)
		57461: 150, // DEFAULT (0x)
		57507: 151, // designation (0x)
		57508: 152, // designator (0x)
		57509: 153, // designator_list (0x)
		57415: 154, // DIVEQ (0x)
		57483: 155, // DPROGRAM (0x)
		57482: 156, // DSTACK (0x)
		57484: 157, // DSTATE (0x)
		57458: 158, // ENUM (0x)
		57383: 159, // EQUAL (0x)
		57386: 160, // EQUALWORD (0x)
		57345: 161, // error (0x)
		57407: 162, // EXP (0x)
		57417: 163, // EXPEQ (0x)
		57472: 164, // EXPR (0x)
		57473: 165, // FIELD (0x)
		57428: 166, // GE_OP (0x)
		57378: 167, // GOTO (0x)
		57389: 168, // GTHANEQ (0x)
		57387: 169, // GTHANWORD (0x)
		57487: 170, // INFER (0x)
		57474: 171, // INPUT (0x)
		57528: 172, // jump_statement (0x)
		57529: 173, // labeled_statement (0x)
		57429: 174, // LE_OP (0x)
		57405: 175, // LEFTSHIFT (0x)
		57418: 176, // LEFTSHIFTEQ (0x)
		57390: 177, // LTHANEQ (0x)
		57388: 178, // LTHANWORD (0x)
		57413: 179, // MINUSEQ (0x)
		57403: 180, // MINUSMINUS (0x)
		57414: 181, // MULTEQ (0x)
		57385: 182, // NEW (0x)
		57373: 183, // NEWLINE (0x)
		57408: 184, // NOT (0x)
		57477: 185, // OBJECT (0x)
		57478: 186, // OBJECTS (0x)
		57353: 187, // OP (0x)
		57393: 188, // OR (0x)
		57475: 189, // OUTPUT (0x)
		57412: 190, // PLUSEQ (0x)
		57402: 191, // PLUSPLUS (0x)
		57480: 192, // PSTEP (0x)
		57425: 193, // PTR_OP (0x)
		57470: 194, // REM (0x)
		57404: 195, // REMAINDER (0x)
		57416: 196, // REMAINDEREQ (0x)
		57377: 197, // RETURN (0x)
		57406: 198, // RIGHTSHIFT (0x)
		57419: 199, // RIGHTSHIFTEQ (0x)
		57469: 200, // SFUNC (0x)
		57467: 201, // SPACKAGE (0x)
		57468: 202, // SSTRUCT (0x)
		57479: 203, // STEP (0x)
		57486: 204, // TAG (0x)
		57481: 205, // TSTEP (0x)
		57370: 206, // TYPSTRUCT (0x)
		57391: 207, // UNEQUAL (0x)
		57457: 208, // UNION (0x)
		57488: 209, // VALUE (0x)
	}

	yySymNames = []string{
		"REF_OP",
		"MUL_OP",
		"LPAREN",
		"ADD_OP",
		"SUB_OP",
		"LBRACK",
		"SEMICOLON",
		"DEC_OP",
		"INC_OP",
		"RBRACE",
		"LBRACE",
		"IDENTIFIER",
		"COMMA",
		"RPAREN",
		"BOOL",
		"BYTE",
		"F32",
		"F64",
		"I16",
		"I32",
		"I64",
		"I8",
		"STR",
		"UI16",
		"UI32",
		"UI64",
		"UI8",
		"INT_LITERAL",
		"STRING_LITERAL",
		"BOOLEAN_LITERAL",
		"BYTE_LITERAL",
		"DOUBLE_LITERAL",
		"FLOAT_LITERAL",
		"LONG_LITERAL",
		"NEG_OP",
		"RBRACK",
		"COLON",
		"'?'",
		"OR_OP",
		"AND_OP",
		"BITOR_OP",
		"BITXOR_OP",
		"EQ_OP",
		"NE_OP",
		"GT_OP",
		"GTEQ_OP",
		"LT_OP",
		"LTEQ_OP",
		"LEFT_OP",
		"RIGHT_OP",
		"type_specifier",
		"ASSIGN",
		"DIV_OP",
		"MOD_OP",
		"array_literal_expression",
		"slice_literal_expression",
		"postfix_expression",
		"primary_expression",
		"unary_expression",
		"unary_operator",
		"ADD_ASSIGN",
		"AND_ASSIGN",
		"DIV_ASSIGN",
		"LEFT_ASSIGN",
		"MOD_ASSIGN",
		"MUL_ASSIGN",
		"OR_ASSIGN",
		"RIGHT_ASSIGN",
		"SUB_ASSIGN",
		"XOR_ASSIGN",
		"multiplicative_expression",
		"PERIOD",
		"VAR",
		"additive_expression",
		"shift_expression",
		"relational_expression",
		"equality_expression",
		"and_expression",
		"exclusive_or_expression",
		"inclusive_or_expression",
		"logical_and_expression",
		"conditional_expression",
		"logical_or_expression",
		"IF",
		"FOR",
		"SWITCH",
		"assignment_expression",
		"FUNC",
		"IMPORT",
		"PACKAGE",
		"TYPE",
		"$end",
		"expression",
		"compound_statement",
		"expression_statement",
		"iteration_statement",
		"selection_statement",
		"statement",
		"block_item",
		"declaration",
		"declarator",
		"direct_declarator",
		"declaration_specifiers",
		"package_identifier",
		"ELSE",
		"parameter_declaration",
		"block_item_list",
		"array_literal_expression_list",
		"constant_expression",
		"else_statement",
		"elseif",
		"external_declaration",
		"function_declaration",
		"function_header",
		"function_parameters",
		"global_declaration",
		"import_declaration",
		"initializer",
		"package_declaration",
		"parameter_list",
		"parameter_type_list",
		"slice_literal_expression_list",
		"struct_declaration",
		"after_period",
		"argument_expression_list",
		"assignment_operator",
		"elseif_list",
		"fields",
		"STRUCT",
		"struct_fields",
		"struct_literal_fields",
		"translation_unit",
		"$default",
		"ADDR",
		"AFF",
		"AFFVAR",
		"AND",
		"BASICTYPE",
		"BITANDEQ",
		"BITCLEAR_OP",
		"BITOREQ",
		"BITXOREQ",
		"BREAK",
		"CASE",
		"CASSIGN",
		"CLAUSES",
		"COMMENT",
		"CONST",
		"CONTINUE",
		"DEF",
		"DEFAULT",
		"designation",
		"designator",
		"designator_list",
		"DIVEQ",
		"DPROGRAM",
		"DSTACK",
		"DSTATE",
		"ENUM",
		"EQUAL",
		"EQUALWORD",
		"error",
		"EXP",
		"EXPEQ",
		"EXPR",
		"FIELD",
		"GE_OP",
		"GOTO",
		"GTHANEQ",
		"GTHANWORD",
		"INFER",
		"INPUT",
		"jump_statement",
		"labeled_statement",
		"LE_OP",
		"LEFTSHIFT",
		"LEFTSHIFTEQ",
		"LTHANEQ",
		"LTHANWORD",
		"MINUSEQ",
		"MINUSMINUS",
		"MULTEQ",
		"NEW",
		"NEWLINE",
		"NOT",
		"OBJECT",
		"OBJECTS",
		"OP",
		"OR",
		"OUTPUT",
		"PLUSEQ",
		"PLUSPLUS",
		"PSTEP",
		"PTR_OP",
		"REM",
		"REMAINDER",
		"REMAINDEREQ",
		"RETURN",
		"RIGHTSHIFT",
		"RIGHTSHIFTEQ",
		"SFUNC",
		"SPACKAGE",
		"SSTRUCT",
		"STEP",
		"TAG",
		"TSTEP",
		"TYPSTRUCT",
		"UNEQUAL",
		"UNION",
		"VALUE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {131, 1},
		2:   {131, 2},
		3:   {111, 1},
		4:   {111, 1},
		5:   {111, 1},
		6:   {111, 1},
		7:   {111, 1},
		8:   {115, 4},
		9:   {115, 6},
		10:  {122, 4},
		11:  {129, 3},
		12:  {129, 4},
		13:  {127, 2},
		14:  {127, 3},
		15:  {118, 3},
		16:  {116, 3},
		17:  {113, 2},
		18:  {113, 5},
		19:  {114, 2},
		20:  {114, 3},
		21:  {112, 3},
		22:  {112, 4},
		23:  {120, 1},
		24:  {119, 1},
		25:  {119, 3},
		26:  {105, 2},
		27:  {100, 1},
		28:  {101, 1},
		29:  {101, 3},
		30:  {102, 2},
		31:  {102, 4},
		32:  {102, 3},
		33:  {102, 1},
		34:  {102, 1},
		35:  {102, 1},
		36:  {50, 1},
		37:  {50, 1},
		38:  {50, 1},
		39:  {50, 1},
		40:  {50, 1},
		41:  {50, 1},
		42:  {50, 1},
		43:  {50, 1},
		44:  {50, 1},
		45:  {50, 1},
		46:  {50, 1},
		47:  {50, 1},
		48:  {50, 1},
		49:  {130, 0},
		50:  {130, 3},
		51:  {130, 5},
		52:  {107, 1},
		53:  {107, 3},
		54:  {54, 7},
		55:  {54, 6},
		56:  {54, 7},
		57:  {54, 6},
		58:  {54, 4},
		59:  {121, 1},
		60:  {121, 3},
		61:  {55, 6},
		62:  {55, 5},
		63:  {55, 6},
		64:  {55, 5},
		65:  {55, 3},
		66:  {103, 3},
		67:  {57, 1},
		68:  {57, 4},
		69:  {57, 1},
		70:  {57, 1},
		71:  {57, 1},
		72:  {57, 1},
		73:  {57, 1},
		74:  {57, 1},
		75:  {57, 1},
		76:  {57, 3},
		77:  {57, 1},
		78:  {57, 1},
		79:  {123, 1},
		80:  {123, 1},
		81:  {56, 1},
		82:  {56, 4},
		83:  {56, 3},
		84:  {56, 3},
		85:  {56, 4},
		86:  {56, 2},
		87:  {56, 2},
		88:  {56, 3},
		89:  {124, 1},
		90:  {124, 3},
		91:  {58, 1},
		92:  {58, 2},
		93:  {58, 2},
		94:  {58, 2},
		95:  {59, 1},
		96:  {59, 1},
		97:  {59, 1},
		98:  {59, 1},
		99:  {59, 1},
		100: {70, 1},
		101: {70, 3},
		102: {70, 3},
		103: {70, 3},
		104: {73, 1},
		105: {73, 3},
		106: {73, 3},
		107: {74, 1},
		108: {74, 3},
		109: {74, 3},
		110: {75, 1},
		111: {75, 3},
		112: {75, 3},
		113: {75, 3},
		114: {75, 3},
		115: {76, 1},
		116: {76, 3},
		117: {76, 3},
		118: {77, 1},
		119: {77, 3},
		120: {78, 1},
		121: {78, 3},
		122: {79, 1},
		123: {79, 3},
		124: {80, 1},
		125: {80, 3},
		126: {82, 1},
		127: {82, 3},
		128: {81, 1},
		129: {81, 5},
		130: {86, 1},
		131: {86, 3},
		132: {125, 1},
		133: {125, 1},
		134: {125, 1},
		135: {125, 1},
		136: {125, 1},
		137: {125, 1},
		138: {125, 1},
		139: {125, 1},
		140: {125, 1},
		141: {125, 1},
		142: {125, 1},
		143: {92, 1},
		144: {92, 3},
		145: {108, 1},
		146: {99, 4},
		147: {99, 6},
		148: {117, 1},
		149: {151, 2},
		150: {153, 1},
		151: {153, 2},
		152: {152, 3},
		153: {152, 2},
		154: {97, 1},
		155: {97, 1},
		156: {97, 1},
		157: {97, 1},
		158: {173, 3},
		159: {173, 4},
		160: {173, 3},
		161: {93, 3},
		162: {93, 4},
		163: {106, 1},
		164: {106, 2},
		165: {98, 1},
		166: {98, 1},
		167: {94, 1},
		168: {94, 2},
		169: {96, 8},
		170: {96, 7},
		171: {96, 7},
		172: {96, 3},
		173: {96, 5},
		174: {110, 6},
		175: {126, 1},
		176: {126, 2},
		177: {109, 4},
		178: {95, 3},
		179: {95, 4},
		180: {95, 5},
		181: {172, 3},
		182: {172, 2},
		183: {172, 2},
		184: {172, 2},
		185: {172, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [308][]uint16{
		// 0
		{72: 189, 87: 193, 192, 191, 190, 111: 183, 186, 194, 115: 185, 187, 118: 184, 122: 188, 131: 182},
		{72: 189, 87: 193, 192, 191, 190, 181, 111: 488, 186, 194, 115: 185, 187, 118: 184, 122: 188},
		{72: 180, 87: 180, 180, 180, 180, 180},
		{72: 178, 87: 178, 178, 178, 178, 178},
		{72: 177, 87: 177, 177, 177, 177, 177},
		// 5
		{72: 176, 87: 176, 176, 176, 176, 176},
		{72: 175, 87: 175, 175, 175, 175, 175},
		{72: 174, 87: 174, 174, 174, 174, 174},
		{2: 306, 11: 305, 100: 482, 304},
		{11: 469},
		// 10
		{11: 467},
		{28: 465},
		{2: 461, 11: 460},
		{2: 195, 114: 196},
		{2: 306, 11: 305, 13: 451, 100: 455, 304, 105: 454, 119: 453, 452},
		// 15
		{2: 195, 10: 199, 93: 197, 114: 198},
		{72: 160, 87: 160, 160, 160, 160, 160},
		{10: 199, 93: 450},
		{231, 232, 222, 233, 234, 213, 260, 229, 228, 255, 199, 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 72: 250, 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 261, 263, 262, 248, 92: 249, 251, 252, 254, 253, 259, 257, 258, 106: 256},
		{145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 12: 145, 145, 35: 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 51: 145, 145, 145, 60: 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 71: 145},
		// 20
		{144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 12: 144, 144, 35: 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 51: 144, 144, 144, 60: 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 71: 144},
		{143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 12: 143, 143, 35: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 51: 143, 143, 143, 60: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 71: 143},
		{142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 12: 142, 142, 35: 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 51: 142, 142, 142, 60: 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 71: 142},
		{141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 12: 141, 141, 35: 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 51: 141, 141, 141, 60: 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 71: 141},
		{140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 12: 140, 140, 35: 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 51: 140, 140, 140, 60: 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 71: 140},
		// 25
		{139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 12: 139, 139, 35: 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 51: 139, 139, 139, 60: 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 71: 139},
		{138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 12: 138, 138, 35: 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 51: 138, 138, 138, 60: 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 71: 138},
		{137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 12: 137, 137, 35: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 51: 137, 137, 137, 60: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 71: 137},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 12: 136, 136, 35: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 51: 136, 136, 136, 60: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 71: 136},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 12: 135, 135, 35: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 51: 135, 135, 135, 60: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 71: 135},
		// 30
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 12: 134, 134, 35: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 51: 134, 134, 134, 60: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 71: 134},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 12: 133, 133, 35: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 51: 133, 133, 133, 60: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 71: 133},
		{27: 417, 35: 418},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 406, 12: 114, 114, 35: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 51: 114, 114, 114, 60: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 71: 114},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12: 112, 112, 35: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 51: 112, 112, 112, 60: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 71: 112},
		// 35
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 12: 111, 111, 35: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 51: 111, 111, 111, 60: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 71: 111},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 12: 110, 110, 35: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 51: 110, 110, 110, 60: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 71: 110},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 12: 109, 109, 35: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 51: 109, 109, 109, 60: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 71: 109},
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 12: 108, 108, 35: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 51: 108, 108, 108, 60: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 71: 108},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 12: 107, 107, 35: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 51: 107, 107, 107, 60: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 71: 107},
		// 40
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 12: 106, 106, 35: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 51: 106, 106, 106, 60: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 71: 106},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 248, 92: 404},
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 12: 104, 104, 35: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 51: 104, 104, 104, 60: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 71: 104},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 12: 103, 103, 35: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 51: 103, 103, 103, 60: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 71: 103},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 12: 100, 100, 35: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 51: 100, 100, 100, 60: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 71: 100},
		// 45
		{90, 90, 391, 90, 90, 390, 90, 393, 392, 90, 90, 12: 90, 90, 35: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 51: 90, 90, 90, 60: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 71: 394},
		{71: 386},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 385, 230},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 384, 230},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 383, 230},
		// 50
		{86, 86, 86, 86, 86, 86, 7: 86, 86, 11: 86, 14: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{85, 85, 85, 85, 85, 85, 7: 85, 85, 11: 85, 14: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{84, 84, 84, 84, 84, 84, 7: 84, 84, 11: 84, 14: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		{83, 83, 83, 83, 83, 83, 7: 83, 83, 11: 83, 14: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{82, 82, 82, 82, 82, 82, 7: 82, 82, 11: 82, 14: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		// 55
		{81, 81, 3: 81, 81, 6: 81, 9: 81, 81, 12: 81, 81, 35: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 51: 371, 81, 81, 60: 375, 379, 373, 377, 374, 372, 381, 378, 376, 380, 125: 370},
		{77, 358, 3: 77, 77, 6: 77, 9: 77, 77, 12: 77, 77, 35: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 52: 359, 360},
		{74, 3: 355, 356, 6: 74, 9: 74, 74, 12: 74, 74, 35: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{71, 6: 71, 9: 71, 71, 12: 71, 71, 35: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 352, 353},
		{66, 6: 66, 9: 66, 66, 12: 66, 66, 35: 66, 66, 66, 66, 66, 66, 66, 66, 66, 348, 350, 347, 349},
		// 60
		{63, 6: 63, 9: 63, 63, 12: 63, 63, 35: 63, 63, 63, 63, 63, 63, 63, 344, 345},
		{342, 6: 61, 9: 61, 61, 12: 61, 61, 35: 61, 61, 61, 61, 61, 61, 61},
		{6: 59, 9: 59, 59, 12: 59, 59, 35: 59, 59, 59, 59, 59, 59, 340},
		{6: 57, 9: 57, 57, 12: 57, 57, 35: 57, 57, 57, 57, 57, 338},
		{6: 55, 9: 55, 55, 12: 55, 55, 35: 55, 55, 55, 55, 336},
		// 65
		{6: 53, 9: 53, 53, 12: 53, 53, 35: 53, 53, 330, 329},
		{6: 51, 9: 51, 51, 12: 51, 51, 35: 51, 51},
		{6: 38, 10: 38, 12: 38, 38, 35: 38, 38},
		{6: 272, 12: 269},
		{2: 306, 11: 305, 100: 307, 304},
		// 70
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 14: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 72: 27, 83: 27, 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 14: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 72: 26, 83: 26, 26, 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 14: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 72: 25, 83: 25, 25, 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 14: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 72: 24, 83: 24, 24, 24},
		{6: 303},
		// 75
		{231, 232, 222, 233, 234, 213, 260, 229, 228, 302, 199, 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 72: 250, 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 261, 263, 262, 248, 92: 249, 251, 252, 254, 253, 259, 283, 258},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 72: 18, 83: 18, 18, 18},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 72: 16, 83: 16, 16, 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 72: 15, 83: 15, 15, 15},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 72: 14, 83: 14, 14, 14},
		// 80
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 248, 92: 278},
		{2: 274},
		{231, 232, 222, 233, 234, 213, 260, 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 248, 92: 264, 94: 265},
		{6: 272, 10: 199, 12: 269, 93: 273},
		{231, 232, 222, 233, 234, 213, 260, 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 248, 92: 249, 94: 266},
		// 85
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 10: 199, 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 248, 92: 267, 268},
		{10: 199, 12: 269, 93: 270},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 14: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 72: 2, 83: 2, 2, 2},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 271},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 72: 1, 83: 1, 1, 1},
		// 90
		{6: 37, 10: 37, 12: 37, 37, 35: 37, 37},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 72: 13, 83: 13, 13, 13},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 72: 3, 83: 3, 3, 3},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 248, 92: 275},
		{12: 269, 276},
		// 95
		{231, 232, 222, 233, 234, 213, 260, 229, 228, 10: 199, 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 261, 263, 262, 248, 92: 249, 251, 252, 254, 253, 277},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 14: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 72: 8, 83: 8, 8, 8},
		{10: 279, 12: 269, 93: 280},
		{231, 232, 222, 233, 234, 213, 260, 229, 228, 255, 199, 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 72: 250, 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 261, 263, 262, 248, 92: 249, 251, 252, 254, 253, 259, 257, 258, 106: 281},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 14: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 72: 9, 83: 9, 9, 9},
		// 100
		{231, 232, 222, 233, 234, 213, 260, 229, 228, 282, 199, 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 72: 250, 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 261, 263, 262, 248, 92: 249, 251, 252, 254, 253, 259, 283, 258},
		{6: 284, 104: 287, 109: 286, 288, 126: 285},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 14: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 72: 17, 83: 17, 17, 17},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 72: 19, 83: 19, 19, 19, 87: 19, 19, 19, 19, 19},
		{6: 299, 104: 287, 109: 298, 300},
		// 105
		{6: 297},
		{10: 290, 83: 289},
		{6: 6, 104: 6},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 248, 92: 293},
		{231, 232, 222, 233, 234, 213, 260, 229, 228, 10: 199, 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 72: 250, 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 261, 263, 262, 248, 92: 249, 251, 252, 254, 253, 259, 257, 258, 106: 291},
		// 110
		{231, 232, 222, 233, 234, 213, 260, 229, 228, 292, 199, 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 72: 250, 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 261, 263, 262, 248, 92: 249, 251, 252, 254, 253, 259, 283, 258},
		{6: 4},
		{10: 294, 12: 269},
		{231, 232, 222, 233, 234, 213, 260, 229, 228, 10: 199, 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 72: 250, 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 261, 263, 262, 248, 92: 249, 251, 252, 254, 253, 259, 257, 258, 106: 295},
		{231, 232, 222, 233, 234, 213, 260, 229, 228, 296, 199, 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 72: 250, 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 261, 263, 262, 248, 92: 249, 251, 252, 254, 253, 259, 283, 258},
		// 115
		{6: 7, 104: 7},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 14: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 72: 11, 83: 11, 11, 11},
		{6: 301},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 72: 10, 83: 10, 10, 10},
		{6: 5, 104: 5},
		// 120
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 72: 12, 83: 12, 12, 12},
		{6: 284},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 72: 20, 83: 20, 20, 20, 87: 20, 20, 20, 20, 20},
		{1: 154, 5: 154, 11: 154, 13: 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154},
		{1: 153, 5: 153, 11: 153, 13: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153},
		// 125
		{2: 306, 11: 305, 100: 327, 304},
		{1: 308, 5: 309, 11: 311, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 50: 310, 102: 313, 312},
		{1: 308, 5: 309, 11: 311, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 50: 310, 102: 326, 312},
		{27: 321, 35: 322},
		{6: 148, 12: 148, 148, 51: 148},
		// 130
		{6: 147, 12: 147, 147, 51: 147, 71: 319},
		{6: 146, 12: 146, 146, 51: 146},
		{6: 314, 51: 315},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 14: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 72: 35, 83: 35, 35, 35},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 317, 117: 316},
		// 135
		{6: 318},
		{6: 33},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 14: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 72: 34, 83: 34, 34, 34},
		{11: 320},
		{6: 115, 12: 115, 115, 51: 115},
		// 140
		{35: 324},
		{1: 308, 5: 309, 11: 311, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 50: 310, 102: 323, 312},
		{6: 149, 12: 149, 149, 51: 149},
		{1: 308, 5: 309, 11: 311, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 50: 310, 102: 325, 312},
		{6: 150, 12: 150, 150, 51: 150},
		// 145
		{6: 151, 12: 151, 151, 51: 151},
		{13: 328},
		{1: 152, 5: 152, 11: 152, 13: 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 335},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 248, 92: 331},
		// 150
		{12: 269, 36: 332},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 334, 246},
		{81, 81, 3: 81, 81, 6: 81, 9: 81, 81, 12: 81, 81, 35: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 52: 81, 81},
		{6: 52, 9: 52, 52, 12: 52, 52, 35: 52, 52},
		{6: 54, 9: 54, 54, 12: 54, 54, 35: 54, 54, 54, 54, 336},
		// 155
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 337},
		{6: 56, 9: 56, 56, 12: 56, 56, 35: 56, 56, 56, 56, 56, 338},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 238, 239, 240, 241, 242, 339},
		{6: 58, 9: 58, 58, 12: 58, 58, 35: 58, 58, 58, 58, 58, 58, 340},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 238, 239, 240, 241, 341},
		// 160
		{342, 6: 60, 9: 60, 60, 12: 60, 60, 35: 60, 60, 60, 60, 60, 60, 60},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 238, 239, 240, 343},
		{62, 6: 62, 9: 62, 62, 12: 62, 62, 35: 62, 62, 62, 62, 62, 62, 62, 344, 345},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 238, 239, 369},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 238, 239, 346},
		// 165
		{64, 6: 64, 9: 64, 64, 12: 64, 64, 35: 64, 64, 64, 64, 64, 64, 64, 64, 64, 348, 350, 347, 349},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 238, 368},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 238, 367},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 238, 366},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 238, 351},
		// 170
		{67, 6: 67, 9: 67, 67, 12: 67, 67, 35: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 352, 353},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 365},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 354},
		{72, 3: 355, 356, 6: 72, 9: 72, 72, 12: 72, 72, 35: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 364},
		// 175
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 357},
		{75, 358, 3: 75, 75, 6: 75, 9: 75, 75, 12: 75, 75, 35: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 52: 359, 360},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 363, 230},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 362, 230},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 361, 230},
		// 180
		{78, 78, 3: 78, 78, 6: 78, 9: 78, 78, 12: 78, 78, 35: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 52: 78, 78},
		{79, 79, 3: 79, 79, 6: 79, 9: 79, 79, 12: 79, 79, 35: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 52: 79, 79},
		{80, 80, 3: 80, 80, 6: 80, 9: 80, 80, 12: 80, 80, 35: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 52: 80, 80},
		{76, 358, 3: 76, 76, 6: 76, 9: 76, 76, 12: 76, 76, 35: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 52: 359, 360},
		{73, 3: 355, 356, 6: 73, 9: 73, 73, 12: 73, 73, 35: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		// 185
		{68, 6: 68, 9: 68, 68, 12: 68, 68, 35: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 352, 353},
		{69, 6: 69, 9: 69, 69, 12: 69, 69, 35: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 352, 353},
		{70, 6: 70, 9: 70, 70, 12: 70, 70, 35: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 352, 353},
		{65, 6: 65, 9: 65, 65, 12: 65, 65, 35: 65, 65, 65, 65, 65, 65, 65, 65, 65, 348, 350, 347, 349},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 382},
		// 190
		{49, 49, 49, 49, 49, 49, 7: 49, 49, 11: 49, 14: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{48, 48, 48, 48, 48, 48, 7: 48, 48, 11: 48, 14: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{47, 47, 47, 47, 47, 47, 7: 47, 47, 11: 47, 14: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{46, 46, 46, 46, 46, 46, 7: 46, 46, 11: 46, 14: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{45, 45, 45, 45, 45, 45, 7: 45, 45, 11: 45, 14: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		// 195
		{44, 44, 44, 44, 44, 44, 7: 44, 44, 11: 44, 14: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{43, 43, 43, 43, 43, 43, 7: 43, 43, 11: 43, 14: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{42, 42, 42, 42, 42, 42, 7: 42, 42, 11: 42, 14: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 41, 7: 41, 41, 11: 41, 14: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 7: 40, 40, 11: 40, 14: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		// 200
		{39, 39, 39, 39, 39, 39, 7: 39, 39, 11: 39, 14: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{6: 50, 9: 50, 50, 12: 50, 50, 35: 50, 50},
		{87, 87, 3: 87, 87, 6: 87, 9: 87, 87, 12: 87, 87, 35: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 51: 87, 87, 87, 60: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{88, 88, 3: 88, 88, 6: 88, 9: 88, 88, 12: 88, 88, 35: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 51: 88, 88, 88, 60: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{89, 89, 3: 89, 89, 6: 89, 9: 89, 89, 12: 89, 89, 35: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 51: 89, 89, 89, 60: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		// 205
		{11: 388, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 50: 387, 123: 389},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 12: 102, 102, 35: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 51: 102, 102, 102, 60: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 71: 102},
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 12: 101, 101, 35: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 51: 101, 101, 101, 60: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 71: 101},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 12: 98, 98, 35: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 51: 98, 98, 98, 60: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 71: 98},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 248, 92: 402},
		// 210
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 13: 396, 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 398, 124: 397},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 12: 95, 95, 35: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 51: 95, 95, 95, 60: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 71: 95},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 12: 94, 94, 35: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 51: 94, 94, 94, 60: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 71: 94},
		{11: 395},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 12: 93, 93, 35: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 51: 93, 93, 93, 60: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 71: 93},
		// 215
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 12: 97, 97, 35: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 51: 97, 97, 97, 60: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 71: 97},
		{12: 400, 399},
		{12: 92, 92},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 12: 96, 96, 35: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 51: 96, 96, 96, 60: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 71: 96},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 401},
		// 220
		{12: 91, 91},
		{12: 269, 35: 403},
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 12: 99, 99, 35: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 51: 99, 99, 99, 60: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 71: 99},
		{12: 269, 405},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 12: 105, 105, 35: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 51: 105, 105, 105, 60: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 71: 105},
		// 225
		{9: 132, 11: 407, 132, 130: 408},
		{36: 415},
		{9: 410, 12: 409},
		{11: 411},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12: 113, 113, 35: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 51: 113, 113, 113, 60: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 71: 113},
		// 230
		{36: 412},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 414, 246, 108: 413},
		{9: 130, 12: 130},
		{9: 36, 12: 36},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 333, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 414, 246, 108: 416},
		// 235
		{9: 131, 12: 131},
		{35: 434},
		{5: 419, 11: 420, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 50: 421, 55: 422},
		{35: 418},
		{10: 430},
		// 240
		{10: 423},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 12: 116, 116, 35: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 51: 116, 116, 116, 60: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 71: 116},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 426, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 424, 121: 425},
		{9: 122, 12: 122},
		{9: 428, 12: 427},
		// 245
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 12: 117, 117, 35: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 51: 117, 117, 117, 60: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 71: 117},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 429},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 12: 118, 118, 35: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 51: 118, 118, 118, 60: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 71: 118},
		{9: 121, 12: 121},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 432, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 424, 121: 431},
		// 250
		{9: 433, 12: 427},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 12: 119, 119, 35: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 51: 119, 119, 119, 60: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 71: 119},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 12: 120, 120, 35: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 51: 120, 120, 120, 60: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 71: 120},
		{5: 435, 11: 436, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 50: 437, 54: 438},
		{27: 417},
		// 255
		{10: 446},
		{10: 439},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 12: 123, 123, 35: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 51: 123, 123, 123, 60: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 71: 123},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 442, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 440, 107: 441},
		{9: 129, 12: 129},
		// 260
		{9: 444, 12: 443},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 12: 124, 124, 35: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 51: 124, 124, 124, 60: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 71: 124},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 445},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 12: 125, 125, 35: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 51: 125, 125, 125, 60: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 71: 125},
		{9: 128, 12: 128},
		// 265
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 448, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 440, 107: 447},
		{9: 449, 12: 443},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 12: 126, 126, 35: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 51: 126, 126, 126, 60: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 71: 126},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 12: 127, 127, 35: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 51: 127, 127, 127, 60: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 71: 127},
		{72: 159, 87: 159, 159, 159, 159, 159},
		// 270
		{2: 162, 10: 162},
		{13: 459},
		{12: 457, 158},
		{12: 157, 157},
		{1: 308, 5: 309, 11: 311, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 50: 310, 102: 456, 312},
		// 275
		{6: 155, 12: 155, 155},
		{2: 306, 11: 305, 100: 455, 304, 105: 458},
		{12: 156, 156},
		{2: 161, 10: 161},
		{2: 164},
		// 280
		{2: 306, 11: 305, 100: 455, 304, 105: 454, 119: 453, 462},
		{13: 463},
		{11: 464},
		{2: 163},
		{6: 466},
		// 285
		{72: 165, 87: 165, 165, 165, 165, 165},
		{6: 468},
		{72: 166, 87: 166, 166, 166, 166, 166},
		{128: 470},
		{10: 472, 129: 471},
		// 290
		{72: 171, 87: 171, 171, 171, 171, 171},
		{2: 306, 9: 473, 11: 305, 100: 455, 304, 105: 475, 127: 474},
		{6: 481},
		{2: 306, 9: 477, 11: 305, 100: 455, 304, 105: 478},
		{6: 476},
		// 295
		{2: 168, 9: 168, 11: 168},
		{6: 480},
		{6: 479},
		{2: 167, 9: 167, 11: 167},
		{72: 169, 87: 169, 169, 169, 169, 169},
		// 300
		{72: 170, 87: 170, 170, 170, 170, 170},
		{1: 308, 5: 309, 11: 311, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 50: 310, 102: 483, 312},
		{6: 484, 51: 485},
		{72: 173, 87: 173, 173, 173, 173, 173},
		{231, 232, 222, 233, 234, 213, 7: 229, 228, 11: 214, 14: 200, 201, 203, 204, 206, 207, 208, 205, 202, 210, 211, 212, 209, 218, 215, 216, 217, 220, 219, 221, 235, 50: 227, 54: 223, 224, 226, 225, 236, 230, 70: 237, 73: 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 86: 317, 117: 486},
		// 305
		{6: 487},
		{72: 172, 87: 172, 172, 172, 172, 172},
		{72: 179, 87: 179, 179, 179, 179, 179},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 161

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 8:
		{
			DeclareGlobal(yyS[yypt-2].argument, yyS[yypt-1].argument, nil, false)
		}
	case 9:
		{
			DeclareGlobal(yyS[yypt-4].argument, yyS[yypt-4].argument, yyS[yypt-1].expressions, true)
		}
	case 10:
		{
			DeclareStruct(yyS[yypt-2].tok, yyS[yypt-0].arguments)
		}
	case 11:
		{
			yyVAL.arguments = nil
		}
	case 12:
		{
			yyVAL.arguments = yyS[yypt-2].arguments
		}
	case 13:
		{
			yyVAL.arguments = []*CXArgument{yyS[yypt-1].argument}
		}
	case 14:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-1].argument)
		}
	case 15:
		{
			DeclarePackage(yyS[yypt-1].tok)
		}
	case 16:
		{
			DeclareImport(yyS[yypt-1].tok)
		}
	case 17:
		{
			yyVAL.function = FunctionHeader(yyS[yypt-0].tok, nil, false)
			inFn = true
		}
	case 18:
		{
			yyVAL.function = FunctionHeader(yyS[yypt-0].tok, yyS[yypt-2].arguments, true)
			inFn = true
		}
	case 19:
		{
			yyVAL.arguments = nil
		}
	case 20:
		{
			yyVAL.arguments = yyS[yypt-1].arguments
		}
	case 21:
		{
			FunctionDeclaration(yyS[yypt-2].function, yyS[yypt-1].arguments, nil, yyS[yypt-0].expressions)
			inFn = false
		}
	case 22:
		{
			FunctionDeclaration(yyS[yypt-3].function, yyS[yypt-2].arguments, yyS[yypt-1].arguments, yyS[yypt-0].expressions)
			inFn = false
		}
	case 24:
		{
			yyVAL.arguments = []*CXArgument{yyS[yypt-0].argument}
		}
	case 25:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-0].argument)
		}
	case 26:
		{
			yyS[yypt-0].argument.Name = yyS[yypt-1].argument.Name
			yyS[yypt-0].argument.Package = yyS[yypt-1].argument.Package
			yyVAL.argument = yyS[yypt-0].argument
		}
	case 28:
		{
			if pkg, err := prgrm.GetCurrentPackage(); err == nil {
				arg := MakeArgument("")
				arg.AddType(TypeNames[TYPE_UNDEFINED])
				arg.Name = yyS[yypt-0].tok
				arg.Package = pkg
				yyVAL.argument = arg
			} else {
				panic(err)
			}
		}
	case 29:
		{
			yyVAL.argument = yyS[yypt-1].argument
		}
	case 30:
		{
			yyVAL.argument = DeclarationSpecifiers(yyS[yypt-0].argument, 0, DECL_POINTER)
		}
	case 31:
		{
			yyVAL.argument = DeclarationSpecifiers(yyS[yypt-0].argument, int(yyS[yypt-2].i32), DECL_ARRAY)
		}
	case 32:
		{
			yyVAL.argument = DeclarationSpecifiers(yyS[yypt-0].argument, 0, DECL_SLICE)
		}
	case 33:
		{
			yyVAL.argument = DeclarationSpecifiersBasic(yyS[yypt-0].i)
		}
	case 34:
		{
			yyVAL.argument = DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false)
		}
	case 35:
		{
			yyVAL.argument = DeclarationSpecifiersStruct(yyS[yypt-0].stringA[1], yyS[yypt-0].stringA[0], true)
		}
	case 36:
		{
			yyVAL.i = TYPE_BOOL
		}
	case 37:
		{
			yyVAL.i = TYPE_BYTE
		}
	case 38:
		{
			yyVAL.i = TYPE_STR
		}
	case 39:
		{
			yyVAL.i = TYPE_F32
		}
	case 40:
		{
			yyVAL.i = TYPE_F64
		}
	case 41:
		{
			yyVAL.i = TYPE_I8
		}
	case 42:
		{
			yyVAL.i = TYPE_I16
		}
	case 43:
		{
			yyVAL.i = TYPE_I32
		}
	case 44:
		{
			yyVAL.i = TYPE_I64
		}
	case 45:
		{
			yyVAL.i = TYPE_UI8
		}
	case 46:
		{
			yyVAL.i = TYPE_UI16
		}
	case 47:
		{
			yyVAL.i = TYPE_UI32
		}
	case 48:
		{
			yyVAL.i = TYPE_UI64
		}
	case 49:
		{
			yyVAL.expressions = nil
		}
	case 50:
		{
			yyVAL.expressions = Assignment([]*CXExpression{StructLiteralFields(yyS[yypt-2].tok)}, yyS[yypt-0].expressions)
		}
	case 51:
		{
			yyVAL.expressions = append(yyS[yypt-4].expressions, Assignment([]*CXExpression{StructLiteralFields(yyS[yypt-2].tok)}, yyS[yypt-0].expressions)...)
		}
	case 52:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 53:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 54:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 55:
		{
			yyVAL.expressions = nil
		}
	case 56:
		{
			yyVAL.expressions = ArrayLiteralExpression(int(yyS[yypt-5].i32), yyS[yypt-3].i, yyS[yypt-1].expressions)
		}
	case 57:
		{
			yyVAL.expressions = nil
		}
	case 58:
		{
			for _, expr := range yyS[yypt-0].expressions {
				if expr.Outputs[0].Name == yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Inputs[0].Name {
					expr.Outputs[0].Lengths = append([]int{int(yyS[yypt-2].i32)}, expr.Outputs[0].Lengths[:len(expr.Outputs[0].Lengths)-1]...)
					expr.Outputs[0].TotalSize = expr.Outputs[0].Size * TotalLength(expr.Outputs[0].Lengths)
				}
			}

			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 59:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 60:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 61:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 62:
		{
			yyVAL.expressions = nil
		}
	case 63:
		{
			if interpretMode {
				yyVAL.expressions = BasicArrayLiteralDeclaration(TypeNames[yyS[yypt-3].i], yyS[yypt-1].expressions, yyS[yypt-0].line+1, false)
			} else {
				yyVAL.expressions = ArrayLiteralExpression(int(SLICE_SIZE), yyS[yypt-3].i, yyS[yypt-1].expressions)
			}
		}
	case 64:
		{
			yyVAL.expressions = nil
		}
	case 65:
		{
			if interpretMode {

			} else {

			}

			for _, expr := range yyS[yypt-0].expressions {
				if expr.Outputs[0].Name == yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Inputs[0].Name {
					expr.Outputs[0].Lengths = append([]int{int(SLICE_SIZE)}, expr.Outputs[0].Lengths[:len(expr.Outputs[0].Lengths)-1]...)
					expr.Outputs[0].TotalSize = expr.Outputs[0].Size * TotalLength(expr.Outputs[0].Lengths)
				}
			}

			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 66:
		{
			yyVAL.stringA = []string{yyS[yypt-2].tok, yyS[yypt-1].tok}
		}
	case 67:
		{
			yyVAL.expressions = PrimaryIdentifier(yyS[yypt-0].tok)
		}
	case 68:
		{
			yyVAL.expressions = PrimaryStructLiteral(yyS[yypt-3].tok, yyS[yypt-1].expressions)
		}
	case 69:
		{
			yyVAL.expressions = WritePrimary(TYPE_STR, encoder.Serialize(yyS[yypt-0].tok))
		}
	case 70:
		{
			exprs := WritePrimary(TYPE_BOOL, encoder.Serialize(yyS[yypt-0].bool))
			yyVAL.expressions = exprs
		}
	case 71:
		{
			yyVAL.expressions = WritePrimary(TYPE_BYTE, encoder.Serialize(yyS[yypt-0].byt))
		}
	case 72:
		{
			yyVAL.expressions = WritePrimary(TYPE_I32, encoder.Serialize(yyS[yypt-0].i32))
		}
	case 73:
		{
			yyVAL.expressions = WritePrimary(TYPE_F32, encoder.Serialize(yyS[yypt-0].f32))
		}
	case 74:
		{
			yyVAL.expressions = WritePrimary(TYPE_F64, encoder.Serialize(yyS[yypt-0].f64))
		}
	case 75:
		{
			yyVAL.expressions = WritePrimary(TYPE_I64, encoder.Serialize(yyS[yypt-0].i64))
		}
	case 76:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 77:
		{
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 78:
		{
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 79:
		{
			yyVAL.tok = TypeNames[yyS[yypt-0].i]
		}
	case 82:
		{
			yyVAL.expressions = PostfixExpressionArray(yyS[yypt-3].expressions, yyS[yypt-1].expressions)
		}
	case 83:
		{
			yyVAL.expressions = PostfixExpressionNative(int(yyS[yypt-2].i), yyS[yypt-0].tok)
		}
	case 84:
		{
			yyVAL.expressions = PostfixExpressionEmptyFunCall(yyS[yypt-2].expressions)
		}
	case 85:
		{
			yyVAL.expressions = PostfixExpressionFunCall(yyS[yypt-3].expressions, yyS[yypt-1].expressions)
		}
	case 86:
		{
			yyVAL.expressions = PostfixExpressionIncDec(yyS[yypt-1].expressions, true)
		}
	case 87:
		{
			yyVAL.expressions = PostfixExpressionIncDec(yyS[yypt-1].expressions, false)
		}
	case 88:
		{
			PostfixExpressionField(yyS[yypt-2].expressions, yyS[yypt-0].tok)
		}
	case 90:
		{
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 92:
		{
			// TODO
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 93:
		{
			// TODO
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 94:
		{
			yyVAL.expressions = UnaryExpression(yyS[yypt-1].tok, yyS[yypt-0].expressions)
		}
	case 101:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_MUL)
		}
	case 102:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_DIV)
		}
	case 103:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_MOD)
		}
	case 105:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_ADD)
		}
	case 106:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_SUB)
		}
	case 108:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITSHL)
		}
	case 109:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITSHR)
		}
	case 111:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_LT)
		}
	case 112:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_GT)
		}
	case 113:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_LTEQ)
		}
	case 114:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_GTEQ)
		}
	case 116:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_EQUAL)
		}
	case 117:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_UNEQUAL)
		}
	case 119:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITAND)
		}
	case 121:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITXOR)
		}
	case 123:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITOR)
		}
	case 125:
		{
			yyVAL.expressions = ArithmeticOperation(yyS[yypt-2].expressions, yyS[yypt-0].expressions, Natives[OP_BOOL_AND])
		}
	case 127:
		{
			yyVAL.expressions = ArithmeticOperation(yyS[yypt-2].expressions, yyS[yypt-0].expressions, Natives[OP_BOOL_OR])
		}
	case 131:
		{
			if yyS[yypt-0].expressions[0].IsArrayLiteral {
				yyVAL.expressions = ArrayLiteralAssignment(yyS[yypt-2].expressions, yyS[yypt-0].expressions)
			} else if yyS[yypt-0].expressions[0].IsStructLiteral {
				yyVAL.expressions = StructLiteralAssignment(yyS[yypt-2].expressions, yyS[yypt-0].expressions)
			} else {
				yyVAL.expressions = Assignment(yyS[yypt-2].expressions, yyS[yypt-0].expressions)
			}
		}
	case 144:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Outputs = append(yyS[yypt-2].expressions[len(yyS[yypt-2].expressions)-1].Outputs, yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Outputs...)
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 146:
		{
			yyVAL.expressions = DeclareLocal(yyS[yypt-2].argument, yyS[yypt-1].argument, nil, false)
		}
	case 147:
		{
			yyVAL.expressions = DeclareLocal(yyS[yypt-4].argument, yyS[yypt-3].argument, yyS[yypt-1].expressions, true)
		}
	case 149:
		{
			yyVAL.expressions = nil
		}
	case 150:
		{
			yyVAL.expressions = nil
		}
	case 151:
		{
			yyVAL.expressions = nil
		}
	case 152:
		{
			yyVAL.expressions = nil
		}
	case 153:
		{
			yyVAL.expressions = nil
		}
	case 158:
		{
			yyVAL.expressions = nil
		}
	case 159:
		{
			yyVAL.expressions = nil
		}
	case 160:
		{
			yyVAL.expressions = nil
		}
	case 161:
		{
			yyVAL.expressions = nil
		}
	case 162:
		{
			yyVAL.expressions = yyS[yypt-2].expressions
		}
	case 164:
		{
			yyVAL.expressions = append(yyS[yypt-1].expressions, yyS[yypt-0].expressions...)
		}
	case 167:
		{
			yyVAL.expressions = nil
		}
	case 168:
		{
			if yyS[yypt-1].expressions[len(yyS[yypt-1].expressions)-1].Operator == nil {
				yyVAL.expressions = nil
			} else {
				yyVAL.expressions = yyS[yypt-1].expressions
			}
		}
	case 169:
		{
			yyVAL.expressions = SelectionStatement(yyS[yypt-6].expressions, yyS[yypt-4].expressions, yyS[yypt-2].selectStatements, yyS[yypt-1].expressions, SEL_ELSEIFELSE)
		}
	case 170:
		{
			yyVAL.expressions = SelectionExpressions(yyS[yypt-5].expressions, yyS[yypt-3].expressions, yyS[yypt-1].expressions)
		}
	case 171:
		{
			yyVAL.expressions = SelectionStatement(yyS[yypt-5].expressions, yyS[yypt-3].expressions, yyS[yypt-1].selectStatements, nil, SEL_ELSEIF)
		}
	case 172:
		{
			yyVAL.expressions = SelectionExpressions(yyS[yypt-1].expressions, yyS[yypt-0].expressions, nil)
		}
	case 173:
		{
			yyVAL.expressions = nil
		}
	case 174:
		{
			yyVAL.selectStatement = selectStatement{
				Condition: yyS[yypt-3].expressions,
				Then:      yyS[yypt-1].expressions,
			}
		}
	case 175:
		{
			yyVAL.selectStatements = []selectStatement{yyS[yypt-0].selectStatement}
		}
	case 176:
		{
			yyVAL.selectStatements = append(yyS[yypt-1].selectStatements, yyS[yypt-0].selectStatement)
		}
	case 177:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 178:
		{
			yyVAL.expressions = IterationExpressions(nil, yyS[yypt-1].expressions, nil, yyS[yypt-0].expressions)
		}
	case 179:
		{
			yyVAL.expressions = IterationExpressions(yyS[yypt-2].expressions, yyS[yypt-1].expressions, nil, yyS[yypt-0].expressions)
		}
	case 180:
		{
			yyVAL.expressions = IterationExpressions(yyS[yypt-3].expressions, yyS[yypt-2].expressions, yyS[yypt-1].expressions, yyS[yypt-0].expressions)
		}
	case 181:
		{
			yyVAL.expressions = nil
		}
	case 182:
		{
			yyVAL.expressions = nil
		}
	case 183:
		{
			yyVAL.expressions = nil
		}
	case 184:
		{
			yyVAL.expressions = nil
		}
	case 185:
		{
			yyVAL.expressions = nil
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
