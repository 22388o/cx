// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	. "github.com/skycoin/cx/cx"
	"github.com/skycoin/skycoin/src/cipher/encoder"
	// "github.com/skycoin/cx/src/interpreted"
)

// var prgrm = MakeProgram(CALLSTACK_SIZE, STACK_SIZE, INIT_HEAP_SIZE)
var dataOffset int

var lineNo int = 0
var webMode bool
var baseOutput bool
var replMode bool
var helpMode bool
var interpretMode bool
var compileMode bool
var replTargetFn string = ""
var replTargetStrct string = ""
var replTargetMod string = ""

var inREPL bool = false

var sysInitExprs []*CXExpression

// var cxt = interpreted.MakeProgram()
//var cxt = cx0.CXT

var dStack bool = false
var inFn bool = false

//var dProgram bool = false
var tag string = ""
var asmNL = "\n"
var fileName string

type yySymType struct {
	yys     int
	i       int
	byt     byte
	i32     int32
	i64     int64
	f32     float32
	f64     float64
	tok     string
	bool    bool
	string  string
	stringA []string

	line int

	argument  *CXArgument
	arguments []*CXArgument

	expression  *CXExpression
	expressions []*CXExpression

	selectStatement  selectStatement
	selectStatements []selectStatement

	arrayArguments [][]*CXExpression

	function *CXFunction
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault       = 57490
	yyEofCode       = 57344
	ADDR            = 57489
	ADD_ASSIGN      = 57434
	ADD_OP          = 57394
	AFF             = 57485
	AFFVAR          = 57401
	AND             = 57392
	AND_ASSIGN      = 57435
	AND_OP          = 57432
	ASSIGN          = 57374
	BASICTYPE       = 57466
	BITANDEQ        = 57420
	BITCLEAR_OP     = 57411
	BITOREQ         = 57422
	BITOR_OP        = 57410
	BITXOREQ        = 57421
	BITXOR_OP       = 57409
	BOOL            = 57444
	BOOLEAN_LITERAL = 57347
	BREAK           = 57463
	BYTE            = 57445
	BYTE_LITERAL    = 57346
	CASE            = 57460
	CASSIGN         = 57375
	CLAUSES         = 57476
	COLON           = 57384
	COMMA           = 57362
	COMMENT         = 57364
	CONST           = 57459
	CONTINUE        = 57464
	DEC_OP          = 57423
	DEF             = 57471
	DEFAULT         = 57461
	DIVEQ           = 57415
	DIV_ASSIGN      = 57439
	DIV_OP          = 57397
	DOUBLE_LITERAL  = 57351
	DPROGRAM        = 57483
	DSTACK          = 57482
	DSTATE          = 57484
	ELSE            = 57368
	ENUM            = 57458
	EQUAL           = 57383
	EQUALWORD       = 57386
	EQ_OP           = 57430
	EXP             = 57407
	EXPEQ           = 57417
	EXPR            = 57472
	F32             = 57446
	F64             = 57447
	FIELD           = 57473
	FLOAT_LITERAL   = 57350
	FOR             = 57369
	FUNC            = 57352
	GE_OP           = 57428
	GOTO            = 57378
	GTEQ_OP         = 57381
	GTHANEQ         = 57389
	GTHANWORD       = 57387
	GT_OP           = 57379
	I16             = 57449
	I32             = 57450
	I64             = 57451
	I8              = 57448
	IDENTIFIER      = 57360
	IF              = 57367
	IMPORT          = 57376
	INC_OP          = 57424
	INFER           = 57487
	INPUT           = 57474
	INT_LITERAL     = 57348
	LBRACE          = 57356
	LBRACK          = 57358
	LEFTSHIFT       = 57405
	LEFTSHIFTEQ     = 57418
	LEFT_ASSIGN     = 57436
	LEFT_OP         = 57426
	LE_OP           = 57429
	LONG_LITERAL    = 57349
	LPAREN          = 57354
	LTEQ_OP         = 57382
	LTHANEQ         = 57390
	LTHANWORD       = 57388
	LT_OP           = 57380
	MINUSEQ         = 57413
	MINUSMINUS      = 57403
	MOD_ASSIGN      = 57437
	MOD_OP          = 57398
	MULTEQ          = 57414
	MUL_ASSIGN      = 57438
	MUL_OP          = 57396
	NEG_OP          = 57400
	NEW             = 57385
	NEWLINE         = 57373
	NE_OP           = 57431
	NOT             = 57408
	OBJECT          = 57477
	OBJECTS         = 57478
	OP              = 57353
	OR              = 57393
	OR_ASSIGN       = 57440
	OR_OP           = 57433
	OUTPUT          = 57475
	PACKAGE         = 57366
	PERIOD          = 57363
	PLUSEQ          = 57412
	PLUSPLUS        = 57402
	PSTEP           = 57480
	PTR_OP          = 57425
	RBRACE          = 57357
	RBRACK          = 57359
	REF_OP          = 57399
	REM             = 57470
	REMAINDER       = 57404
	REMAINDEREQ     = 57416
	RETURN          = 57377
	RIGHTSHIFT      = 57406
	RIGHTSHIFTEQ    = 57419
	RIGHT_ASSIGN    = 57441
	RIGHT_OP        = 57427
	RPAREN          = 57355
	SEMICOLON       = 57372
	SFUNC           = 57469
	SPACKAGE        = 57467
	SSTRUCT         = 57468
	STEP            = 57479
	STR             = 57452
	STRING_LITERAL  = 57365
	STRUCT          = 57371
	SUB_ASSIGN      = 57442
	SUB_OP          = 57395
	SWITCH          = 57462
	TAG             = 57486
	TSTEP           = 57481
	TYPE            = 57465
	TYPSTRUCT       = 57370
	UI16            = 57454
	UI32            = 57455
	UI64            = 57456
	UI8             = 57453
	UNEQUAL         = 57391
	UNION           = 57457
	VALUE           = 57488
	VAR             = 57361
	XOR_ASSIGN      = 57443
	yyErrCode       = 57345

	yyMaxDepth = 200
	yyTabOfs   = -172
)

var (
	yyPrec = map[int]int{
		IDENTIFIER: 0,
		LBRACE:     0,
	}

	yyXLAT = map[int]int{
		57399: 0,   // REF_OP (155x)
		57396: 1,   // MUL_OP (149x)
		57354: 2,   // LPAREN (147x)
		57394: 3,   // ADD_OP (143x)
		57395: 4,   // SUB_OP (143x)
		57372: 5,   // SEMICOLON (141x)
		57358: 6,   // LBRACK (139x)
		57423: 7,   // DEC_OP (129x)
		57424: 8,   // INC_OP (129x)
		57356: 9,   // LBRACE (122x)
		57357: 10,  // RBRACE (119x)
		57360: 11,  // IDENTIFIER (118x)
		57362: 12,  // COMMA (109x)
		57355: 13,  // RPAREN (101x)
		57444: 14,  // BOOL (100x)
		57445: 15,  // BYTE (100x)
		57446: 16,  // F32 (100x)
		57447: 17,  // F64 (100x)
		57449: 18,  // I16 (100x)
		57450: 19,  // I32 (100x)
		57451: 20,  // I64 (100x)
		57448: 21,  // I8 (100x)
		57452: 22,  // STR (100x)
		57454: 23,  // UI16 (100x)
		57455: 24,  // UI32 (100x)
		57456: 25,  // UI64 (100x)
		57453: 26,  // UI8 (100x)
		57348: 27,  // INT_LITERAL (91x)
		57365: 28,  // STRING_LITERAL (90x)
		57347: 29,  // BOOLEAN_LITERAL (89x)
		57346: 30,  // BYTE_LITERAL (89x)
		57351: 31,  // DOUBLE_LITERAL (89x)
		57350: 32,  // FLOAT_LITERAL (89x)
		57349: 33,  // LONG_LITERAL (89x)
		57400: 34,  // NEG_OP (89x)
		57359: 35,  // RBRACK (82x)
		57384: 36,  // COLON (81x)
		63:    37,  // '?' (73x)
		57433: 38,  // OR_OP (73x)
		57432: 39,  // AND_OP (72x)
		57410: 40,  // BITOR_OP (70x)
		57409: 41,  // BITXOR_OP (68x)
		57430: 42,  // EQ_OP (64x)
		57431: 43,  // NE_OP (64x)
		57379: 44,  // GT_OP (62x)
		57381: 45,  // GTEQ_OP (62x)
		57380: 46,  // LT_OP (62x)
		57382: 47,  // LTEQ_OP (62x)
		57426: 48,  // LEFT_OP (59x)
		57427: 49,  // RIGHT_OP (59x)
		57547: 50,  // type_specifier (59x)
		57495: 51,  // array_literal_expression (52x)
		57374: 52,  // ASSIGN (52x)
		57397: 53,  // DIV_OP (51x)
		57398: 54,  // MOD_OP (51x)
		57537: 55,  // postfix_expression (51x)
		57538: 56,  // primary_expression (51x)
		57548: 57,  // unary_expression (51x)
		57549: 58,  // unary_operator (51x)
		57361: 59,  // VAR (48x)
		57532: 60,  // multiplicative_expression (45x)
		57434: 61,  // ADD_ASSIGN (44x)
		57435: 62,  // AND_ASSIGN (44x)
		57439: 63,  // DIV_ASSIGN (44x)
		57436: 64,  // LEFT_ASSIGN (44x)
		57437: 65,  // MOD_ASSIGN (44x)
		57438: 66,  // MUL_ASSIGN (44x)
		57440: 67,  // OR_ASSIGN (44x)
		57441: 68,  // RIGHT_ASSIGN (44x)
		57442: 69,  // SUB_ASSIGN (44x)
		57443: 70,  // XOR_ASSIGN (44x)
		57491: 71,  // additive_expression (43x)
		57363: 72,  // PERIOD (42x)
		57541: 73,  // shift_expression (41x)
		57539: 74,  // relational_expression (37x)
		57514: 75,  // equality_expression (35x)
		57493: 76,  // and_expression (34x)
		57515: 77,  // exclusive_or_expression (33x)
		57367: 78,  // IF (32x)
		57525: 79,  // inclusive_or_expression (32x)
		57369: 80,  // FOR (31x)
		57530: 81,  // logical_and_expression (31x)
		57462: 82,  // SWITCH (31x)
		57502: 83,  // conditional_expression (30x)
		57531: 84,  // logical_or_expression (30x)
		57497: 85,  // assignment_expression (27x)
		57352: 86,  // FUNC (20x)
		57376: 87,  // IMPORT (20x)
		57366: 88,  // PACKAGE (20x)
		57465: 89,  // TYPE (20x)
		57344: 90,  // $end (19x)
		57516: 91,  // expression (18x)
		57501: 92,  // compound_statement (15x)
		57517: 93,  // expression_statement (11x)
		57527: 94,  // iteration_statement (9x)
		57540: 95,  // selection_statement (9x)
		57542: 96,  // statement (9x)
		57499: 97,  // block_item (8x)
		57504: 98,  // declaration (8x)
		57506: 99,  // declarator (8x)
		57510: 100, // direct_declarator (8x)
		57505: 101, // declaration_specifiers (6x)
		57368: 102, // ELSE (5x)
		57534: 103, // parameter_declaration (5x)
		57500: 104, // block_item_list (4x)
		57496: 105, // array_literal_expression_list (2x)
		57503: 106, // constant_expression (2x)
		57511: 107, // else_statement (2x)
		57512: 108, // elseif (2x)
		57518: 109, // external_declaration (2x)
		57520: 110, // function_declaration (2x)
		57521: 111, // function_header (2x)
		57522: 112, // function_parameters (2x)
		57523: 113, // global_declaration (2x)
		57524: 114, // import_declaration (2x)
		57526: 115, // initializer (2x)
		57533: 116, // package_declaration (2x)
		57535: 117, // parameter_list (2x)
		57536: 118, // parameter_type_list (2x)
		57543: 119, // struct_declaration (2x)
		57492: 120, // after_period (1x)
		57494: 121, // argument_expression_list (1x)
		57498: 122, // assignment_operator (1x)
		57513: 123, // elseif_list (1x)
		57519: 124, // fields (1x)
		57371: 125, // STRUCT (1x)
		57544: 126, // struct_fields (1x)
		57545: 127, // struct_literal_fields (1x)
		57546: 128, // translation_unit (1x)
		57490: 129, // $default (0x)
		57489: 130, // ADDR (0x)
		57485: 131, // AFF (0x)
		57401: 132, // AFFVAR (0x)
		57392: 133, // AND (0x)
		57466: 134, // BASICTYPE (0x)
		57420: 135, // BITANDEQ (0x)
		57411: 136, // BITCLEAR_OP (0x)
		57422: 137, // BITOREQ (0x)
		57421: 138, // BITXOREQ (0x)
		57463: 139, // BREAK (0x)
		57460: 140, // CASE (0x)
		57375: 141, // CASSIGN (0x)
		57476: 142, // CLAUSES (0x)
		57364: 143, // COMMENT (0x)
		57459: 144, // CONST (0x)
		57464: 145, // CONTINUE (0x)
		57471: 146, // DEF (0x)
		57461: 147, // DEFAULT (0x)
		57507: 148, // designation (0x)
		57508: 149, // designator (0x)
		57509: 150, // designator_list (0x)
		57415: 151, // DIVEQ (0x)
		57483: 152, // DPROGRAM (0x)
		57482: 153, // DSTACK (0x)
		57484: 154, // DSTATE (0x)
		57458: 155, // ENUM (0x)
		57383: 156, // EQUAL (0x)
		57386: 157, // EQUALWORD (0x)
		57345: 158, // error (0x)
		57407: 159, // EXP (0x)
		57417: 160, // EXPEQ (0x)
		57472: 161, // EXPR (0x)
		57473: 162, // FIELD (0x)
		57428: 163, // GE_OP (0x)
		57378: 164, // GOTO (0x)
		57389: 165, // GTHANEQ (0x)
		57387: 166, // GTHANWORD (0x)
		57487: 167, // INFER (0x)
		57474: 168, // INPUT (0x)
		57528: 169, // jump_statement (0x)
		57529: 170, // labeled_statement (0x)
		57429: 171, // LE_OP (0x)
		57405: 172, // LEFTSHIFT (0x)
		57418: 173, // LEFTSHIFTEQ (0x)
		57390: 174, // LTHANEQ (0x)
		57388: 175, // LTHANWORD (0x)
		57413: 176, // MINUSEQ (0x)
		57403: 177, // MINUSMINUS (0x)
		57414: 178, // MULTEQ (0x)
		57385: 179, // NEW (0x)
		57373: 180, // NEWLINE (0x)
		57408: 181, // NOT (0x)
		57477: 182, // OBJECT (0x)
		57478: 183, // OBJECTS (0x)
		57353: 184, // OP (0x)
		57393: 185, // OR (0x)
		57475: 186, // OUTPUT (0x)
		57412: 187, // PLUSEQ (0x)
		57402: 188, // PLUSPLUS (0x)
		57480: 189, // PSTEP (0x)
		57425: 190, // PTR_OP (0x)
		57470: 191, // REM (0x)
		57404: 192, // REMAINDER (0x)
		57416: 193, // REMAINDEREQ (0x)
		57377: 194, // RETURN (0x)
		57406: 195, // RIGHTSHIFT (0x)
		57419: 196, // RIGHTSHIFTEQ (0x)
		57469: 197, // SFUNC (0x)
		57467: 198, // SPACKAGE (0x)
		57468: 199, // SSTRUCT (0x)
		57479: 200, // STEP (0x)
		57486: 201, // TAG (0x)
		57481: 202, // TSTEP (0x)
		57370: 203, // TYPSTRUCT (0x)
		57391: 204, // UNEQUAL (0x)
		57457: 205, // UNION (0x)
		57488: 206, // VALUE (0x)
	}

	yySymNames = []string{
		"REF_OP",
		"MUL_OP",
		"LPAREN",
		"ADD_OP",
		"SUB_OP",
		"SEMICOLON",
		"LBRACK",
		"DEC_OP",
		"INC_OP",
		"LBRACE",
		"RBRACE",
		"IDENTIFIER",
		"COMMA",
		"RPAREN",
		"BOOL",
		"BYTE",
		"F32",
		"F64",
		"I16",
		"I32",
		"I64",
		"I8",
		"STR",
		"UI16",
		"UI32",
		"UI64",
		"UI8",
		"INT_LITERAL",
		"STRING_LITERAL",
		"BOOLEAN_LITERAL",
		"BYTE_LITERAL",
		"DOUBLE_LITERAL",
		"FLOAT_LITERAL",
		"LONG_LITERAL",
		"NEG_OP",
		"RBRACK",
		"COLON",
		"'?'",
		"OR_OP",
		"AND_OP",
		"BITOR_OP",
		"BITXOR_OP",
		"EQ_OP",
		"NE_OP",
		"GT_OP",
		"GTEQ_OP",
		"LT_OP",
		"LTEQ_OP",
		"LEFT_OP",
		"RIGHT_OP",
		"type_specifier",
		"array_literal_expression",
		"ASSIGN",
		"DIV_OP",
		"MOD_OP",
		"postfix_expression",
		"primary_expression",
		"unary_expression",
		"unary_operator",
		"VAR",
		"multiplicative_expression",
		"ADD_ASSIGN",
		"AND_ASSIGN",
		"DIV_ASSIGN",
		"LEFT_ASSIGN",
		"MOD_ASSIGN",
		"MUL_ASSIGN",
		"OR_ASSIGN",
		"RIGHT_ASSIGN",
		"SUB_ASSIGN",
		"XOR_ASSIGN",
		"additive_expression",
		"PERIOD",
		"shift_expression",
		"relational_expression",
		"equality_expression",
		"and_expression",
		"exclusive_or_expression",
		"IF",
		"inclusive_or_expression",
		"FOR",
		"logical_and_expression",
		"SWITCH",
		"conditional_expression",
		"logical_or_expression",
		"assignment_expression",
		"FUNC",
		"IMPORT",
		"PACKAGE",
		"TYPE",
		"$end",
		"expression",
		"compound_statement",
		"expression_statement",
		"iteration_statement",
		"selection_statement",
		"statement",
		"block_item",
		"declaration",
		"declarator",
		"direct_declarator",
		"declaration_specifiers",
		"ELSE",
		"parameter_declaration",
		"block_item_list",
		"array_literal_expression_list",
		"constant_expression",
		"else_statement",
		"elseif",
		"external_declaration",
		"function_declaration",
		"function_header",
		"function_parameters",
		"global_declaration",
		"import_declaration",
		"initializer",
		"package_declaration",
		"parameter_list",
		"parameter_type_list",
		"struct_declaration",
		"after_period",
		"argument_expression_list",
		"assignment_operator",
		"elseif_list",
		"fields",
		"STRUCT",
		"struct_fields",
		"struct_literal_fields",
		"translation_unit",
		"$default",
		"ADDR",
		"AFF",
		"AFFVAR",
		"AND",
		"BASICTYPE",
		"BITANDEQ",
		"BITCLEAR_OP",
		"BITOREQ",
		"BITXOREQ",
		"BREAK",
		"CASE",
		"CASSIGN",
		"CLAUSES",
		"COMMENT",
		"CONST",
		"CONTINUE",
		"DEF",
		"DEFAULT",
		"designation",
		"designator",
		"designator_list",
		"DIVEQ",
		"DPROGRAM",
		"DSTACK",
		"DSTATE",
		"ENUM",
		"EQUAL",
		"EQUALWORD",
		"error",
		"EXP",
		"EXPEQ",
		"EXPR",
		"FIELD",
		"GE_OP",
		"GOTO",
		"GTHANEQ",
		"GTHANWORD",
		"INFER",
		"INPUT",
		"jump_statement",
		"labeled_statement",
		"LE_OP",
		"LEFTSHIFT",
		"LEFTSHIFTEQ",
		"LTHANEQ",
		"LTHANWORD",
		"MINUSEQ",
		"MINUSMINUS",
		"MULTEQ",
		"NEW",
		"NEWLINE",
		"NOT",
		"OBJECT",
		"OBJECTS",
		"OP",
		"OR",
		"OUTPUT",
		"PLUSEQ",
		"PLUSPLUS",
		"PSTEP",
		"PTR_OP",
		"REM",
		"REMAINDER",
		"REMAINDEREQ",
		"RETURN",
		"RIGHTSHIFT",
		"RIGHTSHIFTEQ",
		"SFUNC",
		"SPACKAGE",
		"SSTRUCT",
		"STEP",
		"TAG",
		"TSTEP",
		"TYPSTRUCT",
		"UNEQUAL",
		"UNION",
		"VALUE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {128, 1},
		2:   {128, 2},
		3:   {109, 1},
		4:   {109, 1},
		5:   {109, 1},
		6:   {109, 1},
		7:   {109, 1},
		8:   {113, 4},
		9:   {113, 6},
		10:  {119, 4},
		11:  {126, 3},
		12:  {126, 4},
		13:  {124, 2},
		14:  {124, 3},
		15:  {116, 3},
		16:  {114, 3},
		17:  {111, 2},
		18:  {111, 5},
		19:  {112, 2},
		20:  {112, 3},
		21:  {110, 3},
		22:  {110, 4},
		23:  {118, 1},
		24:  {117, 1},
		25:  {117, 3},
		26:  {103, 2},
		27:  {99, 1},
		28:  {100, 1},
		29:  {100, 3},
		30:  {101, 2},
		31:  {101, 4},
		32:  {101, 3},
		33:  {101, 1},
		34:  {101, 1},
		35:  {101, 3},
		36:  {50, 1},
		37:  {50, 1},
		38:  {50, 1},
		39:  {50, 1},
		40:  {50, 1},
		41:  {50, 1},
		42:  {50, 1},
		43:  {50, 1},
		44:  {50, 1},
		45:  {50, 1},
		46:  {50, 1},
		47:  {50, 1},
		48:  {50, 1},
		49:  {127, 0},
		50:  {127, 3},
		51:  {127, 5},
		52:  {105, 1},
		53:  {105, 3},
		54:  {51, 7},
		55:  {51, 6},
		56:  {51, 7},
		57:  {51, 6},
		58:  {51, 4},
		59:  {56, 1},
		60:  {56, 4},
		61:  {56, 1},
		62:  {56, 1},
		63:  {56, 1},
		64:  {56, 1},
		65:  {56, 1},
		66:  {56, 1},
		67:  {56, 1},
		68:  {56, 3},
		69:  {56, 1},
		70:  {120, 1},
		71:  {120, 1},
		72:  {55, 1},
		73:  {55, 4},
		74:  {55, 3},
		75:  {55, 3},
		76:  {55, 4},
		77:  {55, 2},
		78:  {55, 2},
		79:  {55, 3},
		80:  {121, 1},
		81:  {121, 3},
		82:  {57, 1},
		83:  {57, 2},
		84:  {57, 2},
		85:  {57, 2},
		86:  {58, 1},
		87:  {58, 1},
		88:  {58, 1},
		89:  {58, 1},
		90:  {58, 1},
		91:  {60, 1},
		92:  {60, 3},
		93:  {60, 3},
		94:  {60, 3},
		95:  {71, 1},
		96:  {71, 3},
		97:  {71, 3},
		98:  {73, 1},
		99:  {73, 3},
		100: {73, 3},
		101: {74, 1},
		102: {74, 3},
		103: {74, 3},
		104: {74, 3},
		105: {74, 3},
		106: {75, 1},
		107: {75, 3},
		108: {75, 3},
		109: {76, 1},
		110: {76, 3},
		111: {77, 1},
		112: {77, 3},
		113: {79, 1},
		114: {79, 3},
		115: {81, 1},
		116: {81, 3},
		117: {84, 1},
		118: {84, 3},
		119: {83, 1},
		120: {83, 5},
		121: {85, 1},
		122: {85, 3},
		123: {122, 1},
		124: {122, 1},
		125: {122, 1},
		126: {122, 1},
		127: {122, 1},
		128: {122, 1},
		129: {122, 1},
		130: {122, 1},
		131: {122, 1},
		132: {122, 1},
		133: {122, 1},
		134: {91, 1},
		135: {91, 3},
		136: {106, 1},
		137: {98, 4},
		138: {98, 6},
		139: {115, 1},
		140: {148, 2},
		141: {150, 1},
		142: {150, 2},
		143: {149, 3},
		144: {149, 2},
		145: {96, 1},
		146: {96, 1},
		147: {96, 1},
		148: {96, 1},
		149: {170, 3},
		150: {170, 4},
		151: {170, 3},
		152: {92, 3},
		153: {92, 4},
		154: {104, 1},
		155: {104, 2},
		156: {97, 1},
		157: {97, 1},
		158: {93, 1},
		159: {93, 2},
		160: {95, 8},
		161: {95, 7},
		162: {95, 7},
		163: {95, 3},
		164: {95, 5},
		165: {108, 6},
		166: {123, 1},
		167: {123, 2},
		168: {107, 4},
		169: {94, 3},
		170: {94, 4},
		171: {94, 5},
		172: {169, 3},
		173: {169, 2},
		174: {169, 2},
		175: {169, 2},
		176: {169, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [289][]uint16{
		// 0
		{59: 180, 86: 184, 183, 182, 181, 109: 174, 177, 185, 113: 176, 178, 116: 175, 119: 179, 128: 173},
		{59: 180, 86: 184, 183, 182, 181, 172, 109: 460, 177, 185, 113: 176, 178, 116: 175, 119: 179},
		{59: 171, 86: 171, 171, 171, 171, 171},
		{59: 169, 86: 169, 169, 169, 169, 169},
		{59: 168, 86: 168, 168, 168, 168, 168},
		// 5
		{59: 167, 86: 167, 167, 167, 167, 167},
		{59: 166, 86: 166, 166, 166, 166, 166},
		{59: 165, 86: 165, 165, 165, 165, 165},
		{2: 296, 11: 295, 99: 454, 294},
		{11: 441},
		// 10
		{11: 439},
		{28: 437},
		{2: 433, 11: 432},
		{2: 186, 112: 187},
		{2: 296, 11: 295, 13: 423, 99: 427, 294, 103: 426, 117: 425, 424},
		// 15
		{2: 186, 9: 190, 92: 188, 112: 189},
		{59: 151, 86: 151, 151, 151, 151, 151},
		{9: 190, 92: 422},
		{221, 222, 213, 223, 224, 250, 204, 219, 218, 190, 245, 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 240, 227, 71: 228, 73: 229, 230, 231, 232, 233, 251, 234, 253, 235, 252, 237, 236, 238, 91: 239, 241, 242, 244, 243, 249, 247, 248, 104: 246},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 12: 136, 136, 35: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 52: 136, 136, 136, 61: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 72: 136},
		// 20
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 12: 135, 135, 35: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 52: 135, 135, 135, 61: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 72: 135},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 12: 134, 134, 35: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 52: 134, 134, 134, 61: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 72: 134},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 12: 133, 133, 35: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 52: 133, 133, 133, 61: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 72: 133},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 12: 132, 132, 35: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 52: 132, 132, 132, 61: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 72: 132},
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 12: 131, 131, 35: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 52: 131, 131, 131, 61: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 72: 131},
		// 25
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 12: 130, 130, 35: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 52: 130, 130, 130, 61: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 72: 130},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 12: 129, 129, 35: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 52: 129, 129, 129, 61: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 72: 129},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 12: 128, 128, 35: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 52: 128, 128, 128, 61: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 72: 128},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 12: 127, 127, 35: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 52: 127, 127, 127, 61: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 72: 127},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 12: 126, 126, 35: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 52: 126, 126, 126, 61: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 72: 126},
		// 30
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 12: 125, 125, 35: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 52: 125, 125, 125, 61: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 72: 125},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 12: 124, 124, 35: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 52: 124, 124, 124, 61: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 72: 124},
		{27: 406},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 395, 113, 12: 113, 113, 35: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 52: 113, 113, 113, 61: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 72: 113},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 12: 111, 111, 35: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 52: 111, 111, 111, 61: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 72: 111},
		// 35
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 12: 110, 110, 35: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 52: 110, 110, 110, 61: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 72: 110},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 12: 109, 109, 35: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 52: 109, 109, 109, 61: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 72: 109},
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 12: 108, 108, 35: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 52: 108, 108, 108, 61: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 72: 108},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 12: 107, 107, 35: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 52: 107, 107, 107, 61: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 72: 107},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 12: 106, 106, 35: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 52: 106, 106, 106, 61: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 72: 106},
		// 40
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 12: 105, 105, 35: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 52: 105, 105, 105, 61: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 72: 105},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 238, 91: 393},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 12: 103, 103, 35: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 52: 103, 103, 103, 61: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 72: 103},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 12: 100, 100, 35: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 52: 100, 100, 100, 61: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 72: 100},
		{90, 90, 380, 90, 90, 90, 379, 382, 381, 90, 90, 12: 90, 90, 35: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 52: 90, 90, 90, 61: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 72: 383},
		// 45
		{72: 375},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 374, 220},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 373, 220},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 372, 220},
		{86, 86, 86, 86, 86, 6: 86, 86, 86, 11: 86, 14: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		// 50
		{85, 85, 85, 85, 85, 6: 85, 85, 85, 11: 85, 14: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{84, 84, 84, 84, 84, 6: 84, 84, 84, 11: 84, 14: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		{83, 83, 83, 83, 83, 6: 83, 83, 83, 11: 83, 14: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{82, 82, 82, 82, 82, 6: 82, 82, 82, 11: 82, 14: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		{81, 81, 3: 81, 81, 81, 9: 81, 81, 12: 81, 81, 35: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 52: 360, 81, 81, 61: 364, 368, 362, 366, 363, 361, 370, 367, 365, 369, 122: 359},
		// 55
		{77, 347, 3: 77, 77, 77, 9: 77, 77, 12: 77, 77, 35: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 53: 348, 349},
		{74, 3: 344, 345, 74, 9: 74, 74, 12: 74, 74, 35: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{71, 5: 71, 9: 71, 71, 12: 71, 71, 35: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 341, 342},
		{66, 5: 66, 9: 66, 66, 12: 66, 66, 35: 66, 66, 66, 66, 66, 66, 66, 66, 66, 337, 339, 336, 338},
		{63, 5: 63, 9: 63, 63, 12: 63, 63, 35: 63, 63, 63, 63, 63, 63, 63, 333, 334},
		// 60
		{331, 5: 61, 9: 61, 61, 12: 61, 61, 35: 61, 61, 61, 61, 61, 61, 61},
		{5: 59, 9: 59, 59, 12: 59, 59, 35: 59, 59, 59, 59, 59, 59, 329},
		{5: 57, 9: 57, 57, 12: 57, 57, 35: 57, 57, 57, 57, 57, 327},
		{5: 55, 9: 55, 55, 12: 55, 55, 35: 55, 55, 55, 55, 325},
		{5: 53, 9: 53, 53, 12: 53, 53, 35: 53, 53, 319, 318},
		// 65
		{5: 51, 9: 51, 51, 12: 51, 51, 35: 51, 51},
		{5: 38, 9: 38, 12: 38, 38, 35: 38, 38},
		{5: 262, 12: 259},
		{2: 296, 11: 295, 99: 297, 294},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 14: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 59: 27, 78: 27, 80: 27, 82: 27},
		// 70
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 14: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 59: 26, 78: 26, 80: 26, 82: 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 14: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 59: 25, 78: 25, 80: 25, 82: 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 14: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 59: 24, 78: 24, 80: 24, 82: 24},
		{5: 293},
		{221, 222, 213, 223, 224, 250, 204, 219, 218, 190, 292, 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 240, 227, 71: 228, 73: 229, 230, 231, 232, 233, 251, 234, 253, 235, 252, 237, 236, 238, 91: 239, 241, 242, 244, 243, 249, 273, 248},
		// 75
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 59: 18, 78: 18, 80: 18, 82: 18},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 59: 16, 78: 16, 80: 16, 82: 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 59: 15, 78: 15, 80: 15, 82: 15},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 59: 14, 78: 14, 80: 14, 82: 14},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 238, 91: 268},
		// 80
		{2: 264},
		{221, 222, 213, 223, 224, 250, 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 238, 91: 254, 93: 255},
		{5: 262, 9: 190, 12: 259, 92: 263},
		{221, 222, 213, 223, 224, 250, 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 238, 91: 239, 93: 256},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 190, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 238, 91: 257, 258},
		// 85
		{9: 190, 12: 259, 92: 260},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 14: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 59: 2, 78: 2, 80: 2, 82: 2},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 261},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 59: 1, 78: 1, 80: 1, 82: 1},
		{5: 37, 9: 37, 12: 37, 37, 35: 37, 37},
		// 90
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 59: 13, 78: 13, 80: 13, 82: 13},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 59: 3, 78: 3, 80: 3, 82: 3},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 238, 91: 265},
		{12: 259, 266},
		{221, 222, 213, 223, 224, 250, 204, 219, 218, 190, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 251, 234, 253, 235, 252, 237, 236, 238, 91: 239, 241, 242, 244, 243, 267},
		// 95
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 14: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 59: 8, 78: 8, 80: 8, 82: 8},
		{9: 269, 12: 259, 92: 270},
		{221, 222, 213, 223, 224, 250, 204, 219, 218, 190, 245, 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 240, 227, 71: 228, 73: 229, 230, 231, 232, 233, 251, 234, 253, 235, 252, 237, 236, 238, 91: 239, 241, 242, 244, 243, 249, 247, 248, 104: 271},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 14: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 59: 9, 78: 9, 80: 9, 82: 9},
		{221, 222, 213, 223, 224, 250, 204, 219, 218, 190, 272, 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 240, 227, 71: 228, 73: 229, 230, 231, 232, 233, 251, 234, 253, 235, 252, 237, 236, 238, 91: 239, 241, 242, 244, 243, 249, 273, 248},
		// 100
		{5: 274, 102: 277, 107: 276, 278, 123: 275},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 14: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 59: 17, 78: 17, 80: 17, 82: 17},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 59: 19, 78: 19, 80: 19, 82: 19, 86: 19, 19, 19, 19, 19},
		{5: 289, 102: 277, 107: 288, 290},
		{5: 287},
		// 105
		{9: 280, 78: 279},
		{5: 6, 102: 6},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 238, 91: 283},
		{221, 222, 213, 223, 224, 250, 204, 219, 218, 190, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 240, 227, 71: 228, 73: 229, 230, 231, 232, 233, 251, 234, 253, 235, 252, 237, 236, 238, 91: 239, 241, 242, 244, 243, 249, 247, 248, 104: 281},
		{221, 222, 213, 223, 224, 250, 204, 219, 218, 190, 282, 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 240, 227, 71: 228, 73: 229, 230, 231, 232, 233, 251, 234, 253, 235, 252, 237, 236, 238, 91: 239, 241, 242, 244, 243, 249, 273, 248},
		// 110
		{5: 4},
		{9: 284, 12: 259},
		{221, 222, 213, 223, 224, 250, 204, 219, 218, 190, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 240, 227, 71: 228, 73: 229, 230, 231, 232, 233, 251, 234, 253, 235, 252, 237, 236, 238, 91: 239, 241, 242, 244, 243, 249, 247, 248, 104: 285},
		{221, 222, 213, 223, 224, 250, 204, 219, 218, 190, 286, 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 240, 227, 71: 228, 73: 229, 230, 231, 232, 233, 251, 234, 253, 235, 252, 237, 236, 238, 91: 239, 241, 242, 244, 243, 249, 273, 248},
		{5: 7, 102: 7},
		// 115
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 14: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 59: 11, 78: 11, 80: 11, 82: 11},
		{5: 291},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 59: 10, 78: 10, 80: 10, 82: 10},
		{5: 5, 102: 5},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 59: 12, 78: 12, 80: 12, 82: 12},
		// 120
		{5: 274},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59: 20, 78: 20, 80: 20, 82: 20, 86: 20, 20, 20, 20, 20},
		{1: 145, 6: 145, 11: 145, 13: 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145},
		{1: 144, 6: 144, 11: 144, 13: 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144},
		{2: 296, 11: 295, 99: 316, 294},
		// 125
		{1: 298, 6: 299, 11: 301, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 50: 300, 101: 302},
		{1: 298, 6: 299, 11: 301, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 50: 300, 101: 315},
		{27: 310, 35: 311},
		{5: 139, 12: 139, 139, 52: 139},
		{5: 138, 12: 138, 138, 52: 138, 72: 308},
		// 130
		{5: 303, 52: 304},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 14: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 59: 35, 78: 35, 80: 35, 82: 35},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 306, 115: 305},
		{5: 307},
		{5: 33},
		// 135
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 14: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 59: 34, 78: 34, 80: 34, 82: 34},
		{11: 309},
		{5: 137, 12: 137, 137, 52: 137},
		{35: 313},
		{1: 298, 6: 299, 11: 301, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 50: 300, 101: 312},
		// 140
		{5: 140, 12: 140, 140, 52: 140},
		{1: 298, 6: 299, 11: 301, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 50: 300, 101: 314},
		{5: 141, 12: 141, 141, 52: 141},
		{5: 142, 12: 142, 142, 52: 142},
		{13: 317},
		// 145
		{1: 143, 6: 143, 11: 143, 13: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 324},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 238, 91: 320},
		{12: 259, 36: 321},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 323, 236},
		// 150
		{81, 81, 3: 81, 81, 81, 9: 81, 81, 12: 81, 81, 35: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 53: 81, 81},
		{5: 52, 9: 52, 52, 12: 52, 52, 35: 52, 52},
		{5: 54, 9: 54, 54, 12: 54, 54, 35: 54, 54, 54, 54, 325},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 326},
		{5: 56, 9: 56, 56, 12: 56, 56, 35: 56, 56, 56, 56, 56, 327},
		// 155
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 328},
		{5: 58, 9: 58, 58, 12: 58, 58, 35: 58, 58, 58, 58, 58, 58, 329},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 228, 73: 229, 230, 231, 330},
		{331, 5: 60, 9: 60, 60, 12: 60, 60, 35: 60, 60, 60, 60, 60, 60, 60},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 228, 73: 229, 230, 332},
		// 160
		{62, 5: 62, 9: 62, 62, 12: 62, 62, 35: 62, 62, 62, 62, 62, 62, 62, 333, 334},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 228, 73: 229, 358},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 228, 73: 229, 335},
		{64, 5: 64, 9: 64, 64, 12: 64, 64, 35: 64, 64, 64, 64, 64, 64, 64, 64, 64, 337, 339, 336, 338},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 228, 73: 357},
		// 165
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 228, 73: 356},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 228, 73: 355},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 228, 73: 340},
		{67, 5: 67, 9: 67, 67, 12: 67, 67, 35: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 341, 342},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 354},
		// 170
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 343},
		{72, 3: 344, 345, 72, 9: 72, 72, 12: 72, 72, 35: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 353},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 346},
		{75, 347, 3: 75, 75, 75, 9: 75, 75, 12: 75, 75, 35: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 53: 348, 349},
		// 175
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 352, 220},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 351, 220},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 350, 220},
		{78, 78, 3: 78, 78, 78, 9: 78, 78, 12: 78, 78, 35: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 53: 78, 78},
		{79, 79, 3: 79, 79, 79, 9: 79, 79, 12: 79, 79, 35: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 53: 79, 79},
		// 180
		{80, 80, 3: 80, 80, 80, 9: 80, 80, 12: 80, 80, 35: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 53: 80, 80},
		{76, 347, 3: 76, 76, 76, 9: 76, 76, 12: 76, 76, 35: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 53: 348, 349},
		{73, 3: 344, 345, 73, 9: 73, 73, 12: 73, 73, 35: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		{68, 5: 68, 9: 68, 68, 12: 68, 68, 35: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 341, 342},
		{69, 5: 69, 9: 69, 69, 12: 69, 69, 35: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 341, 342},
		// 185
		{70, 5: 70, 9: 70, 70, 12: 70, 70, 35: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 341, 342},
		{65, 5: 65, 9: 65, 65, 12: 65, 65, 35: 65, 65, 65, 65, 65, 65, 65, 65, 65, 337, 339, 336, 338},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 371},
		{49, 49, 49, 49, 49, 6: 49, 49, 49, 11: 49, 14: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{48, 48, 48, 48, 48, 6: 48, 48, 48, 11: 48, 14: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		// 190
		{47, 47, 47, 47, 47, 6: 47, 47, 47, 11: 47, 14: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{46, 46, 46, 46, 46, 6: 46, 46, 46, 11: 46, 14: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{45, 45, 45, 45, 45, 6: 45, 45, 45, 11: 45, 14: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{44, 44, 44, 44, 44, 6: 44, 44, 44, 11: 44, 14: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{43, 43, 43, 43, 43, 6: 43, 43, 43, 11: 43, 14: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		// 195
		{42, 42, 42, 42, 42, 6: 42, 42, 42, 11: 42, 14: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 6: 41, 41, 41, 11: 41, 14: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 6: 40, 40, 40, 11: 40, 14: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 6: 39, 39, 39, 11: 39, 14: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{5: 50, 9: 50, 50, 12: 50, 50, 35: 50, 50},
		// 200
		{87, 87, 3: 87, 87, 87, 9: 87, 87, 12: 87, 87, 35: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 52: 87, 87, 87, 61: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{88, 88, 3: 88, 88, 88, 9: 88, 88, 12: 88, 88, 35: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 52: 88, 88, 88, 61: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{89, 89, 3: 89, 89, 89, 9: 89, 89, 12: 89, 89, 35: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 52: 89, 89, 89, 61: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{11: 377, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 50: 376, 120: 378},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 12: 102, 102, 35: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 52: 102, 102, 102, 61: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 72: 102},
		// 205
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 12: 101, 101, 35: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 52: 101, 101, 101, 61: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 72: 101},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 12: 98, 98, 35: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 52: 98, 98, 98, 61: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 72: 98},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 238, 91: 391},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 13: 385, 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 387, 121: 386},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 12: 95, 95, 35: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 52: 95, 95, 95, 61: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 72: 95},
		// 210
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 12: 94, 94, 35: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 52: 94, 94, 94, 61: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 72: 94},
		{11: 384},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 12: 93, 93, 35: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 52: 93, 93, 93, 61: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 72: 93},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 12: 97, 97, 35: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 52: 97, 97, 97, 61: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 72: 97},
		{12: 389, 388},
		// 215
		{12: 92, 92},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 12: 96, 96, 35: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 52: 96, 96, 96, 61: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 72: 96},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 390},
		{12: 91, 91},
		{12: 259, 35: 392},
		// 220
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 12: 99, 99, 35: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 52: 99, 99, 99, 61: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 72: 99},
		{12: 259, 394},
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 12: 104, 104, 35: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 52: 104, 104, 104, 61: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 72: 104},
		{10: 123, 396, 123, 127: 397},
		{36: 404},
		// 225
		{10: 399, 12: 398},
		{11: 400},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12: 112, 112, 35: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 52: 112, 112, 112, 61: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 72: 112},
		{36: 401},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 403, 236, 106: 402},
		// 230
		{10: 121, 12: 121},
		{10: 36, 12: 36},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 322, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 403, 236, 106: 405},
		{10: 122, 12: 122},
		{35: 407},
		// 235
		{6: 204, 11: 408, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 50: 409, 410},
		{9: 418},
		{9: 411},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 12: 114, 114, 35: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 52: 114, 114, 114, 61: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 72: 114},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 10: 414, 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 412, 105: 413},
		// 240
		{10: 120, 12: 120},
		{10: 416, 12: 415},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 12: 115, 115, 35: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 52: 115, 115, 115, 61: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 72: 115},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 417},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 12: 116, 116, 35: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 52: 116, 116, 116, 61: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 72: 116},
		// 245
		{10: 119, 12: 119},
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 10: 420, 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 412, 105: 419},
		{10: 421, 12: 415},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 12: 117, 117, 35: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 52: 117, 117, 117, 61: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 72: 117},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 12: 118, 118, 35: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 52: 118, 118, 118, 61: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 72: 118},
		// 250
		{59: 150, 86: 150, 150, 150, 150, 150},
		{2: 153, 9: 153},
		{13: 431},
		{12: 429, 149},
		{12: 148, 148},
		// 255
		{1: 298, 6: 299, 11: 301, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 50: 300, 101: 428},
		{5: 146, 12: 146, 146},
		{2: 296, 11: 295, 99: 427, 294, 103: 430},
		{12: 147, 147},
		{2: 152, 9: 152},
		// 260
		{2: 155},
		{2: 296, 11: 295, 99: 427, 294, 103: 426, 117: 425, 434},
		{13: 435},
		{11: 436},
		{2: 154},
		// 265
		{5: 438},
		{59: 156, 86: 156, 156, 156, 156, 156},
		{5: 440},
		{59: 157, 86: 157, 157, 157, 157, 157},
		{125: 442},
		// 270
		{9: 444, 126: 443},
		{59: 162, 86: 162, 162, 162, 162, 162},
		{2: 296, 10: 445, 295, 99: 427, 294, 103: 447, 124: 446},
		{5: 453},
		{2: 296, 10: 449, 295, 99: 427, 294, 103: 450},
		// 275
		{5: 448},
		{2: 159, 10: 159, 159},
		{5: 452},
		{5: 451},
		{2: 158, 10: 158, 158},
		// 280
		{59: 160, 86: 160, 160, 160, 160, 160},
		{59: 161, 86: 161, 161, 161, 161, 161},
		{1: 298, 6: 299, 11: 301, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 50: 300, 101: 455},
		{5: 456, 52: 457},
		{59: 164, 86: 164, 164, 164, 164, 164},
		// 285
		{221, 222, 213, 223, 224, 6: 204, 219, 218, 11: 205, 14: 191, 192, 194, 195, 197, 198, 199, 196, 193, 201, 202, 203, 200, 209, 206, 207, 208, 211, 210, 212, 225, 50: 217, 214, 55: 216, 215, 226, 220, 60: 227, 71: 228, 73: 229, 230, 231, 232, 233, 79: 234, 81: 235, 83: 237, 236, 306, 115: 458},
		{5: 459},
		{59: 163, 86: 163, 163, 163, 163, 163},
		{59: 170, 86: 170, 170, 170, 170, 170},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 158

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 8:
		{
			DeclareGlobal(yyS[yypt-2].argument, yyS[yypt-1].argument, nil, false)
		}
	case 9:
		{
			DeclareGlobal(yyS[yypt-4].argument, yyS[yypt-4].argument, yyS[yypt-1].expressions, true)
		}
	case 10:
		{
			DeclareStruct(yyS[yypt-2].tok, yyS[yypt-0].arguments)
		}
	case 11:
		{
			yyVAL.arguments = nil
		}
	case 12:
		{
			yyVAL.arguments = yyS[yypt-2].arguments
		}
	case 13:
		{
			yyVAL.arguments = []*CXArgument{yyS[yypt-1].argument}
		}
	case 14:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-1].argument)
		}
	case 15:
		{
			DeclarePackage(yyS[yypt-1].tok)
		}
	case 16:
		{
			DeclareImport(yyS[yypt-1].tok)
		}
	case 17:
		{
			yyVAL.function = FunctionHeader(yyS[yypt-0].tok, nil, false)
		}
	case 18:
		{
			yyVAL.function = FunctionHeader(yyS[yypt-0].tok, yyS[yypt-2].arguments, true)
		}
	case 19:
		{
			yyVAL.arguments = nil
		}
	case 20:
		{
			yyVAL.arguments = yyS[yypt-1].arguments
		}
	case 21:
		{
			FunctionDeclaration(yyS[yypt-2].function, yyS[yypt-1].arguments, nil, yyS[yypt-0].expressions)
		}
	case 22:
		{
			FunctionDeclaration(yyS[yypt-3].function, yyS[yypt-2].arguments, yyS[yypt-1].arguments, yyS[yypt-0].expressions)
		}
	case 24:
		{
			yyVAL.arguments = []*CXArgument{yyS[yypt-0].argument}
		}
	case 25:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-0].argument)
		}
	case 26:
		{
			yyS[yypt-0].argument.Name = yyS[yypt-1].argument.Name
			yyS[yypt-0].argument.Package = yyS[yypt-1].argument.Package
			yyVAL.argument = yyS[yypt-0].argument
		}
	case 28:
		{
			if pkg, err := prgrm.GetCurrentPackage(); err == nil {
				arg := MakeArgument("")
				arg.AddType(TypeNames[TYPE_UNDEFINED])
				arg.Name = yyS[yypt-0].tok
				arg.Package = pkg
				yyVAL.argument = arg
			} else {
				panic(err)
			}
		}
	case 29:
		{
			yyVAL.argument = yyS[yypt-1].argument
		}
	case 30:
		{
			yyVAL.argument = DeclarationSpecifiers(yyS[yypt-0].argument, 0, DECL_POINTER)
		}
	case 31:
		{
			yyVAL.argument = DeclarationSpecifiers(yyS[yypt-0].argument, int(yyS[yypt-2].i32), DECL_ARRAY)
		}
	case 32:
		{
			yyVAL.argument = DeclarationSpecifiers(yyS[yypt-0].argument, 0, DECL_SLICE)
		}
	case 33:
		{
			yyVAL.argument = DeclarationSpecifiersBasic(yyS[yypt-0].i)
		}
	case 34:
		{
			yyVAL.argument = DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false)
		}
	case 35:
		{
			yyVAL.argument = DeclarationSpecifiersStruct(yyS[yypt-0].tok, yyS[yypt-2].tok, true)
		}
	case 36:
		{
			yyVAL.i = TYPE_BOOL
		}
	case 37:
		{
			yyVAL.i = TYPE_BYTE
		}
	case 38:
		{
			yyVAL.i = TYPE_STR
		}
	case 39:
		{
			yyVAL.i = TYPE_F32
		}
	case 40:
		{
			yyVAL.i = TYPE_F64
		}
	case 41:
		{
			yyVAL.i = TYPE_I8
		}
	case 42:
		{
			yyVAL.i = TYPE_I16
		}
	case 43:
		{
			yyVAL.i = TYPE_I32
		}
	case 44:
		{
			yyVAL.i = TYPE_I64
		}
	case 45:
		{
			yyVAL.i = TYPE_UI8
		}
	case 46:
		{
			yyVAL.i = TYPE_UI16
		}
	case 47:
		{
			yyVAL.i = TYPE_UI32
		}
	case 48:
		{
			yyVAL.i = TYPE_UI64
		}
	case 49:
		{
			yyVAL.expressions = nil
		}
	case 50:
		{
			yyVAL.expressions = Assignment([]*CXExpression{StructLiteralFields(yyS[yypt-2].tok)}, yyS[yypt-0].expressions)
		}
	case 51:
		{
			yyVAL.expressions = append(yyS[yypt-4].expressions, Assignment([]*CXExpression{StructLiteralFields(yyS[yypt-2].tok)}, yyS[yypt-0].expressions)...)
		}
	case 52:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 53:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsArrayLiteral = true
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 54:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 55:
		{
			yyVAL.expressions = nil
		}
	case 56:
		{
			yyVAL.expressions = ArrayLiteralExpression(int(yyS[yypt-5].i32), yyS[yypt-3].i, yyS[yypt-1].expressions)
		}
	case 57:
		{
			yyVAL.expressions = nil
		}
	case 58:
		{
			for _, expr := range yyS[yypt-0].expressions {
				if expr.Outputs[0].Name == yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Inputs[0].Name {
					expr.Outputs[0].Lengths = append([]int{int(yyS[yypt-2].i32)}, expr.Outputs[0].Lengths[:len(expr.Outputs[0].Lengths)-1]...)
					expr.Outputs[0].TotalSize = expr.Outputs[0].Size * TotalLength(expr.Outputs[0].Lengths)
				}
			}

			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 59:
		{
			yyVAL.expressions = PrimaryIdentifier(yyS[yypt-0].tok)
		}
	case 60:
		{
			yyVAL.expressions = PrimaryStructLiteral(yyS[yypt-3].tok, yyS[yypt-1].expressions)
		}
	case 61:
		{
			yyVAL.expressions = WritePrimary(TYPE_STR, encoder.Serialize(yyS[yypt-0].tok))
		}
	case 62:
		{
			yyVAL.expressions = WritePrimary(TYPE_BOOL, encoder.Serialize(yyS[yypt-0].bool))
		}
	case 63:
		{
			yyVAL.expressions = WritePrimary(TYPE_BYTE, encoder.Serialize(yyS[yypt-0].byt))
		}
	case 64:
		{
			yyVAL.expressions = WritePrimary(TYPE_I32, encoder.Serialize(yyS[yypt-0].i32))
		}
	case 65:
		{
			yyVAL.expressions = WritePrimary(TYPE_F32, encoder.Serialize(yyS[yypt-0].f32))
		}
	case 66:
		{
			yyVAL.expressions = WritePrimary(TYPE_F64, encoder.Serialize(yyS[yypt-0].f64))
		}
	case 67:
		{
			yyVAL.expressions = WritePrimary(TYPE_I64, encoder.Serialize(yyS[yypt-0].i64))
		}
	case 68:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 69:
		{
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 70:
		{
			yyVAL.tok = TypeNames[yyS[yypt-0].i]
		}
	case 73:
		{
			yyVAL.expressions = PostfixExpressionArray(yyS[yypt-3].expressions, yyS[yypt-1].expressions)
		}
	case 74:
		{
			yyVAL.expressions = PostfixExpressionNative(int(yyS[yypt-2].i), yyS[yypt-0].tok)
		}
	case 75:
		{
			yyVAL.expressions = PostfixExpressionEmptyFunCall(yyS[yypt-2].expressions)
		}
	case 76:
		{
			yyVAL.expressions = PostfixExpressionFunCall(yyS[yypt-3].expressions, yyS[yypt-1].expressions)
		}
	case 77:
		{
			yyVAL.expressions = PostfixExpressionIncDec(yyS[yypt-1].expressions, true)
		}
	case 78:
		{
			yyVAL.expressions = PostfixExpressionIncDec(yyS[yypt-1].expressions, false)
		}
	case 79:
		{
			PostfixExpressionField(yyS[yypt-2].expressions, yyS[yypt-0].tok)
		}
	case 81:
		{
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 83:
		{
			// TODO
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 84:
		{
			// TODO
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 85:
		{
			yyVAL.expressions = UnaryExpression(yyS[yypt-1].tok, yyS[yypt-0].expressions)
		}
	case 92:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_MUL)
		}
	case 93:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_DIV)
		}
	case 94:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_MOD)
		}
	case 96:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_ADD)
		}
	case 97:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_SUB)
		}
	case 99:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITSHL)
		}
	case 100:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITSHR)
		}
	case 102:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_LT)
		}
	case 103:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_GT)
		}
	case 104:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_LTEQ)
		}
	case 105:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_GTEQ)
		}
	case 107:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_EQUAL)
		}
	case 108:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_UNEQUAL)
		}
	case 110:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITAND)
		}
	case 112:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITXOR)
		}
	case 114:
		{
			yyVAL.expressions = ShorthandExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, OP_BITOR)
		}
	case 116:
		{
			yyVAL.expressions = ArithmeticOperation(yyS[yypt-2].expressions, yyS[yypt-0].expressions, Natives[OP_BOOL_AND])
		}
	case 118:
		{
			yyVAL.expressions = ArithmeticOperation(yyS[yypt-2].expressions, yyS[yypt-0].expressions, Natives[OP_BOOL_OR])
		}
	case 122:
		{
			if yyS[yypt-0].expressions[0].IsArrayLiteral {
				yyVAL.expressions = ArrayLiteralAssignment(yyS[yypt-2].expressions, yyS[yypt-0].expressions)
			} else if yyS[yypt-0].expressions[0].IsStructLiteral {
				yyVAL.expressions = StructLiteralAssignment(yyS[yypt-2].expressions, yyS[yypt-0].expressions)
			} else {
				yyVAL.expressions = Assignment(yyS[yypt-2].expressions, yyS[yypt-0].expressions)
			}
		}
	case 135:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Outputs = append(yyS[yypt-2].expressions[len(yyS[yypt-2].expressions)-1].Outputs, yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Outputs...)
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 137:
		{
			yyVAL.expressions = DeclareLocal(yyS[yypt-2].argument, yyS[yypt-1].argument, nil, false)
		}
	case 138:
		{
			yyVAL.expressions = DeclareLocal(yyS[yypt-4].argument, yyS[yypt-3].argument, yyS[yypt-1].expressions, true)
		}
	case 140:
		{
			yyVAL.expressions = nil
		}
	case 141:
		{
			yyVAL.expressions = nil
		}
	case 142:
		{
			yyVAL.expressions = nil
		}
	case 143:
		{
			yyVAL.expressions = nil
		}
	case 144:
		{
			yyVAL.expressions = nil
		}
	case 149:
		{
			yyVAL.expressions = nil
		}
	case 150:
		{
			yyVAL.expressions = nil
		}
	case 151:
		{
			yyVAL.expressions = nil
		}
	case 152:
		{
			yyVAL.expressions = nil
		}
	case 153:
		{
			yyVAL.expressions = yyS[yypt-2].expressions
		}
	case 155:
		{
			yyVAL.expressions = append(yyS[yypt-1].expressions, yyS[yypt-0].expressions...)
		}
	case 158:
		{
			yyVAL.expressions = nil
		}
	case 159:
		{
			if yyS[yypt-1].expressions[len(yyS[yypt-1].expressions)-1].Operator == nil {
				yyVAL.expressions = nil
			} else {
				yyVAL.expressions = yyS[yypt-1].expressions
			}
		}
	case 160:
		{
			yyVAL.expressions = SelectionStatement(yyS[yypt-6].expressions, yyS[yypt-4].expressions, yyS[yypt-2].selectStatements, yyS[yypt-1].expressions, SEL_ELSEIFELSE)
		}
	case 161:
		{
			yyVAL.expressions = SelectionExpressions(yyS[yypt-5].expressions, yyS[yypt-3].expressions, yyS[yypt-1].expressions)
		}
	case 162:
		{
			yyVAL.expressions = SelectionStatement(yyS[yypt-5].expressions, yyS[yypt-3].expressions, yyS[yypt-1].selectStatements, nil, SEL_ELSEIF)
		}
	case 163:
		{
			yyVAL.expressions = SelectionExpressions(yyS[yypt-1].expressions, yyS[yypt-0].expressions, nil)
		}
	case 164:
		{
			yyVAL.expressions = nil
		}
	case 165:
		{
			yyVAL.selectStatement = selectStatement{
				Condition: yyS[yypt-3].expressions,
				Then:      yyS[yypt-1].expressions,
			}
		}
	case 166:
		{
			yyVAL.selectStatements = []selectStatement{yyS[yypt-0].selectStatement}
		}
	case 167:
		{
			yyVAL.selectStatements = append(yyS[yypt-1].selectStatements, yyS[yypt-0].selectStatement)
		}
	case 168:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 169:
		{
			yyVAL.expressions = IterationExpressions(nil, yyS[yypt-1].expressions, nil, yyS[yypt-0].expressions)
		}
	case 170:
		{
			yyVAL.expressions = IterationExpressions(yyS[yypt-2].expressions, yyS[yypt-1].expressions, nil, yyS[yypt-0].expressions)
		}
	case 171:
		{
			yyVAL.expressions = IterationExpressions(yyS[yypt-3].expressions, yyS[yypt-2].expressions, yyS[yypt-1].expressions, yyS[yypt-0].expressions)
		}
	case 172:
		{
			yyVAL.expressions = nil
		}
	case 173:
		{
			yyVAL.expressions = nil
		}
	case 174:
		{
			yyVAL.expressions = nil
		}
	case 175:
		{
			yyVAL.expressions = nil
		}
	case 176:
		{
			yyVAL.expressions = nil
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
