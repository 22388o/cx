// Code generated by goyacc - DO NOT EDIT.

package cxgo0

import __yyfmt__ "fmt"

import (
	// "fmt"
	"bytes"
	. "github.com/skycoin/cx/cx"
)

var PRGRM *CXProgram
var DataOffset int

var lineNo int = 0
var replMode bool = false
var inREPL bool = false
var inFn bool = false
var fileName string

func WritePrimary(typ int, byts []byte) []*CXExpression {
	if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
		arg := MakeArgument("")
		arg.AddType(TypeNames[typ])
		arg.MemoryRead = MEM_DATA
		arg.MemoryWrite = MEM_DATA
		arg.Offset = DataOffset
		arg.Package = pkg
		arg.Program = PRGRM
		size := len(byts)
		arg.Size = size
		arg.TotalSize = size
		arg.PointeeSize = size
		DataOffset += size
		PRGRM.Data = append(PRGRM.Data, Data(byts)...)
		expr := MakeExpression(nil)
		expr.Package = pkg
		expr.Outputs = append(expr.Outputs, arg)
		return []*CXExpression{expr}
	} else {
		panic(err)
	}
}

func TotalLength(lengths []int) int {
	var total int = 1
	for _, i := range lengths {
		total *= i
	}
	return total
}

func FunctionDeclaration(fn *CXFunction, inputs []*CXArgument, outputs []*CXArgument, exprs []*CXExpression) {
	// adding inputs, outputs
	for _, inp := range inputs {
		fn.AddInput(inp)
	}
	for _, out := range outputs {
		fn.AddOutput(out)
	}
}

func Parse(code string) int {
	codeBuf := bytes.NewBufferString(code)
	return yyParse(NewLexer(codeBuf))
}

type yySymType struct {
	yys     int
	i       int
	byt     byte
	i32     int32
	i64     int64
	f32     float32
	f64     float64
	tok     string
	bool    bool
	string  string
	stringA []string

	line int

	argument  *CXArgument
	arguments []*CXArgument

	expression  *CXExpression
	expressions []*CXExpression

	function *CXFunction
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault       = 57496
	yyEofCode       = 57344
	ADDR            = 57495
	ADD_ASSIGN      = 57440
	ADD_OP          = 57400
	AFF             = 57491
	AFFVAR          = 57407
	AND             = 57398
	AND_ASSIGN      = 57441
	AND_OP          = 57438
	ASSIGN          = 57380
	BASICTYPE       = 57472
	BITANDEQ        = 57426
	BITCLEAR_OP     = 57417
	BITOREQ         = 57428
	BITOR_OP        = 57416
	BITXOREQ        = 57427
	BITXOR_OP       = 57415
	BOOL            = 57450
	BOOLEAN         = 57348
	BOOLEAN_LITERAL = 57354
	BREAK           = 57469
	BYTE            = 57451
	BYTENUM         = 57346
	BYTE_LITERAL    = 57352
	CASE            = 57466
	CASSIGN         = 57381
	CLAUSES         = 57482
	COLON           = 57390
	COMMA           = 57368
	COMMENT         = 57370
	CONST           = 57465
	CONTINUE        = 57470
	DEC_OP          = 57429
	DEF             = 57477
	DEFAULT         = 57467
	DIVEQ           = 57421
	DIV_ASSIGN      = 57445
	DIV_OP          = 57403
	DOUBLE          = 57351
	DOUBLE_LITERAL  = 57357
	DPROGRAM        = 57489
	DSTACK          = 57488
	DSTATE          = 57490
	ELSE            = 57374
	ENUM            = 57464
	EQUAL           = 57389
	EQUALWORD       = 57392
	EQ_OP           = 57436
	EXP             = 57413
	EXPEQ           = 57423
	EXPR            = 57478
	F32             = 57452
	F64             = 57453
	FIELD           = 57479
	FLOAT           = 57350
	FLOAT_LITERAL   = 57356
	FOR             = 57375
	FUNC            = 57358
	GE_OP           = 57434
	GOTO            = 57384
	GTEQ_OP         = 57387
	GTHANEQ         = 57395
	GTHANWORD       = 57393
	GT_OP           = 57385
	I16             = 57455
	I32             = 57456
	I64             = 57457
	I8              = 57454
	IDENTIFIER      = 57366
	IF              = 57373
	IMPORT          = 57382
	INC_OP          = 57430
	INFER           = 57493
	INPUT           = 57480
	INT             = 57347
	INT_LITERAL     = 57353
	LBRACE          = 57362
	LBRACK          = 57364
	LEFTSHIFT       = 57411
	LEFTSHIFTEQ     = 57424
	LEFT_ASSIGN     = 57442
	LEFT_OP         = 57432
	LE_OP           = 57435
	LONG            = 57349
	LONG_LITERAL    = 57355
	LPAREN          = 57360
	LTEQ_OP         = 57388
	LTHANEQ         = 57396
	LTHANWORD       = 57394
	LT_OP           = 57386
	MINUSEQ         = 57419
	MINUSMINUS      = 57409
	MOD_ASSIGN      = 57443
	MOD_OP          = 57404
	MULTEQ          = 57420
	MUL_ASSIGN      = 57444
	MUL_OP          = 57402
	NEG_OP          = 57406
	NEW             = 57391
	NEWLINE         = 57379
	NE_OP           = 57437
	NOT             = 57414
	OBJECT          = 57483
	OBJECTS         = 57484
	OP              = 57359
	OR              = 57399
	OR_ASSIGN       = 57446
	OR_OP           = 57439
	OUTPUT          = 57481
	PACKAGE         = 57372
	PERIOD          = 57369
	PLUSEQ          = 57418
	PLUSPLUS        = 57408
	PSTEP           = 57486
	PTR_OP          = 57431
	RBRACE          = 57363
	RBRACK          = 57365
	REF_OP          = 57405
	REM             = 57476
	REMAINDER       = 57410
	REMAINDEREQ     = 57422
	RETURN          = 57383
	RIGHTSHIFT      = 57412
	RIGHTSHIFTEQ    = 57425
	RIGHT_ASSIGN    = 57447
	RIGHT_OP        = 57433
	RPAREN          = 57361
	SEMICOLON       = 57378
	SFUNC           = 57475
	SPACKAGE        = 57473
	SSTRUCT         = 57474
	STEP            = 57485
	STR             = 57458
	STRING_LITERAL  = 57371
	STRUCT          = 57377
	SUB_ASSIGN      = 57448
	SUB_OP          = 57401
	SWITCH          = 57468
	TAG             = 57492
	TSTEP           = 57487
	TYPE            = 57471
	TYPSTRUCT       = 57376
	UI16            = 57460
	UI32            = 57461
	UI64            = 57462
	UI8             = 57459
	UNEQUAL         = 57397
	UNION           = 57463
	VALUE           = 57494
	VAR             = 57367
	XOR_ASSIGN      = 57449
	yyErrCode       = 57345

	yyMaxDepth = 200
	yyTabOfs   = -175
)

var (
	yyPrec = map[int]int{
		IDENTIFIER: 0,
		LBRACE:     0,
	}

	yyXLAT = map[int]int{
		57405: 0,   // REF_OP (158x)
		57402: 1,   // MUL_OP (152x)
		57360: 2,   // LPAREN (150x)
		57400: 3,   // ADD_OP (146x)
		57401: 4,   // SUB_OP (146x)
		57378: 5,   // SEMICOLON (144x)
		57364: 6,   // LBRACK (142x)
		57429: 7,   // DEC_OP (132x)
		57430: 8,   // INC_OP (132x)
		57362: 9,   // LBRACE (126x)
		57366: 10,  // IDENTIFIER (121x)
		57363: 11,  // RBRACE (121x)
		57368: 12,  // COMMA (108x)
		57450: 13,  // BOOL (103x)
		57451: 14,  // BYTE (103x)
		57452: 15,  // F32 (103x)
		57453: 16,  // F64 (103x)
		57455: 17,  // I16 (103x)
		57456: 18,  // I32 (103x)
		57457: 19,  // I64 (103x)
		57454: 20,  // I8 (103x)
		57458: 21,  // STR (103x)
		57460: 22,  // UI16 (103x)
		57461: 23,  // UI32 (103x)
		57462: 24,  // UI64 (103x)
		57459: 25,  // UI8 (103x)
		57361: 26,  // RPAREN (101x)
		57353: 27,  // INT_LITERAL (94x)
		57371: 28,  // STRING_LITERAL (93x)
		57354: 29,  // BOOLEAN_LITERAL (92x)
		57352: 30,  // BYTE_LITERAL (92x)
		57357: 31,  // DOUBLE_LITERAL (92x)
		57356: 32,  // FLOAT_LITERAL (92x)
		57355: 33,  // LONG_LITERAL (92x)
		57406: 34,  // NEG_OP (92x)
		57365: 35,  // RBRACK (82x)
		57390: 36,  // COLON (81x)
		63:    37,  // '?' (73x)
		57439: 38,  // OR_OP (73x)
		57438: 39,  // AND_OP (72x)
		57416: 40,  // BITOR_OP (70x)
		57415: 41,  // BITXOR_OP (68x)
		57436: 42,  // EQ_OP (64x)
		57437: 43,  // NE_OP (64x)
		57385: 44,  // GT_OP (62x)
		57387: 45,  // GTEQ_OP (62x)
		57386: 46,  // LT_OP (62x)
		57388: 47,  // LTEQ_OP (62x)
		57552: 48,  // type_specifier (60x)
		57432: 49,  // LEFT_OP (59x)
		57433: 50,  // RIGHT_OP (59x)
		57501: 51,  // array_literal_expression (53x)
		57380: 52,  // ASSIGN (52x)
		57542: 53,  // postfix_expression (52x)
		57543: 54,  // primary_expression (52x)
		57553: 55,  // unary_expression (52x)
		57554: 56,  // unary_operator (52x)
		57403: 57,  // DIV_OP (51x)
		57404: 58,  // MOD_OP (51x)
		57367: 59,  // VAR (51x)
		57537: 60,  // multiplicative_expression (46x)
		57440: 61,  // ADD_ASSIGN (44x)
		57497: 62,  // additive_expression (44x)
		57441: 63,  // AND_ASSIGN (44x)
		57445: 64,  // DIV_ASSIGN (44x)
		57442: 65,  // LEFT_ASSIGN (44x)
		57443: 66,  // MOD_ASSIGN (44x)
		57444: 67,  // MUL_ASSIGN (44x)
		57446: 68,  // OR_ASSIGN (44x)
		57447: 69,  // RIGHT_ASSIGN (44x)
		57448: 70,  // SUB_ASSIGN (44x)
		57449: 71,  // XOR_ASSIGN (44x)
		57369: 72,  // PERIOD (42x)
		57546: 73,  // shift_expression (42x)
		57544: 74,  // relational_expression (38x)
		57519: 75,  // equality_expression (36x)
		57499: 76,  // and_expression (35x)
		57520: 77,  // exclusive_or_expression (34x)
		57373: 78,  // IF (34x)
		57375: 79,  // FOR (33x)
		57531: 80,  // inclusive_or_expression (33x)
		57468: 81,  // SWITCH (33x)
		57535: 82,  // logical_and_expression (32x)
		57507: 83,  // conditional_expression (31x)
		57536: 84,  // logical_or_expression (31x)
		57502: 85,  // assignment_expression (28x)
		57521: 86,  // expression (20x)
		57358: 87,  // FUNC (20x)
		57382: 88,  // IMPORT (20x)
		57372: 89,  // PACKAGE (20x)
		57471: 90,  // TYPE (20x)
		57344: 91,  // $end (19x)
		57506: 92,  // compound_statement (17x)
		57522: 93,  // expression_statement (12x)
		57509: 94,  // declaration (9x)
		57534: 95,  // iteration_statement (9x)
		57545: 96,  // selection_statement (9x)
		57547: 97,  // statement (9x)
		57504: 98,  // block_item (8x)
		57511: 99,  // declarator (8x)
		57515: 100, // direct_declarator (8x)
		57510: 101, // declaration_specifiers (6x)
		57374: 102, // ELSE (5x)
		57539: 103, // parameter_declaration (5x)
		57505: 104, // block_item_list (4x)
		57500: 105, // argument_expression_list (3x)
		57508: 106, // constant_expression (2x)
		57516: 107, // else_statement (2x)
		57517: 108, // elseif (2x)
		57523: 109, // external_declaration (2x)
		57525: 110, // function_declaration (2x)
		57526: 111, // function_header (2x)
		57527: 112, // function_parameters (2x)
		57528: 113, // global_declaration (2x)
		57530: 114, // import_declaration (2x)
		57532: 115, // initializer (2x)
		57538: 116, // package_declaration (2x)
		57540: 117, // parameter_list (2x)
		57541: 118, // parameter_type_list (2x)
		57548: 119, // struct_declaration (2x)
		57498: 120, // after_period (1x)
		57503: 121, // assignment_operator (1x)
		57518: 122, // elseif_list (1x)
		57524: 123, // fields (1x)
		57377: 124, // STRUCT (1x)
		57549: 125, // struct_fields (1x)
		57550: 126, // struct_literal_fields (1x)
		57551: 127, // translation_unit (1x)
		57496: 128, // $default (0x)
		57495: 129, // ADDR (0x)
		57491: 130, // AFF (0x)
		57407: 131, // AFFVAR (0x)
		57398: 132, // AND (0x)
		57472: 133, // BASICTYPE (0x)
		57426: 134, // BITANDEQ (0x)
		57417: 135, // BITCLEAR_OP (0x)
		57428: 136, // BITOREQ (0x)
		57427: 137, // BITXOREQ (0x)
		57348: 138, // BOOLEAN (0x)
		57469: 139, // BREAK (0x)
		57346: 140, // BYTENUM (0x)
		57466: 141, // CASE (0x)
		57381: 142, // CASSIGN (0x)
		57482: 143, // CLAUSES (0x)
		57370: 144, // COMMENT (0x)
		57465: 145, // CONST (0x)
		57470: 146, // CONTINUE (0x)
		57477: 147, // DEF (0x)
		57467: 148, // DEFAULT (0x)
		57512: 149, // designation (0x)
		57513: 150, // designator (0x)
		57514: 151, // designator_list (0x)
		57421: 152, // DIVEQ (0x)
		57351: 153, // DOUBLE (0x)
		57489: 154, // DPROGRAM (0x)
		57488: 155, // DSTACK (0x)
		57490: 156, // DSTATE (0x)
		57464: 157, // ENUM (0x)
		57389: 158, // EQUAL (0x)
		57392: 159, // EQUALWORD (0x)
		57345: 160, // error (0x)
		57413: 161, // EXP (0x)
		57423: 162, // EXPEQ (0x)
		57478: 163, // EXPR (0x)
		57479: 164, // FIELD (0x)
		57350: 165, // FLOAT (0x)
		57434: 166, // GE_OP (0x)
		57384: 167, // GOTO (0x)
		57395: 168, // GTHANEQ (0x)
		57393: 169, // GTHANWORD (0x)
		57529: 170, // identifier_list (0x)
		57493: 171, // INFER (0x)
		57533: 172, // initializer_list (0x)
		57480: 173, // INPUT (0x)
		57347: 174, // INT (0x)
		57435: 175, // LE_OP (0x)
		57411: 176, // LEFTSHIFT (0x)
		57424: 177, // LEFTSHIFTEQ (0x)
		57349: 178, // LONG (0x)
		57396: 179, // LTHANEQ (0x)
		57394: 180, // LTHANWORD (0x)
		57419: 181, // MINUSEQ (0x)
		57409: 182, // MINUSMINUS (0x)
		57420: 183, // MULTEQ (0x)
		57391: 184, // NEW (0x)
		57379: 185, // NEWLINE (0x)
		57414: 186, // NOT (0x)
		57483: 187, // OBJECT (0x)
		57484: 188, // OBJECTS (0x)
		57359: 189, // OP (0x)
		57399: 190, // OR (0x)
		57481: 191, // OUTPUT (0x)
		57418: 192, // PLUSEQ (0x)
		57408: 193, // PLUSPLUS (0x)
		57486: 194, // PSTEP (0x)
		57431: 195, // PTR_OP (0x)
		57476: 196, // REM (0x)
		57410: 197, // REMAINDER (0x)
		57422: 198, // REMAINDEREQ (0x)
		57383: 199, // RETURN (0x)
		57412: 200, // RIGHTSHIFT (0x)
		57425: 201, // RIGHTSHIFTEQ (0x)
		57475: 202, // SFUNC (0x)
		57473: 203, // SPACKAGE (0x)
		57474: 204, // SSTRUCT (0x)
		57485: 205, // STEP (0x)
		57492: 206, // TAG (0x)
		57487: 207, // TSTEP (0x)
		57376: 208, // TYPSTRUCT (0x)
		57397: 209, // UNEQUAL (0x)
		57463: 210, // UNION (0x)
		57494: 211, // VALUE (0x)
	}

	yySymNames = []string{
		"REF_OP",
		"MUL_OP",
		"LPAREN",
		"ADD_OP",
		"SUB_OP",
		"SEMICOLON",
		"LBRACK",
		"DEC_OP",
		"INC_OP",
		"LBRACE",
		"IDENTIFIER",
		"RBRACE",
		"COMMA",
		"BOOL",
		"BYTE",
		"F32",
		"F64",
		"I16",
		"I32",
		"I64",
		"I8",
		"STR",
		"UI16",
		"UI32",
		"UI64",
		"UI8",
		"RPAREN",
		"INT_LITERAL",
		"STRING_LITERAL",
		"BOOLEAN_LITERAL",
		"BYTE_LITERAL",
		"DOUBLE_LITERAL",
		"FLOAT_LITERAL",
		"LONG_LITERAL",
		"NEG_OP",
		"RBRACK",
		"COLON",
		"'?'",
		"OR_OP",
		"AND_OP",
		"BITOR_OP",
		"BITXOR_OP",
		"EQ_OP",
		"NE_OP",
		"GT_OP",
		"GTEQ_OP",
		"LT_OP",
		"LTEQ_OP",
		"type_specifier",
		"LEFT_OP",
		"RIGHT_OP",
		"array_literal_expression",
		"ASSIGN",
		"postfix_expression",
		"primary_expression",
		"unary_expression",
		"unary_operator",
		"DIV_OP",
		"MOD_OP",
		"VAR",
		"multiplicative_expression",
		"ADD_ASSIGN",
		"additive_expression",
		"AND_ASSIGN",
		"DIV_ASSIGN",
		"LEFT_ASSIGN",
		"MOD_ASSIGN",
		"MUL_ASSIGN",
		"OR_ASSIGN",
		"RIGHT_ASSIGN",
		"SUB_ASSIGN",
		"XOR_ASSIGN",
		"PERIOD",
		"shift_expression",
		"relational_expression",
		"equality_expression",
		"and_expression",
		"exclusive_or_expression",
		"IF",
		"FOR",
		"inclusive_or_expression",
		"SWITCH",
		"logical_and_expression",
		"conditional_expression",
		"logical_or_expression",
		"assignment_expression",
		"expression",
		"FUNC",
		"IMPORT",
		"PACKAGE",
		"TYPE",
		"$end",
		"compound_statement",
		"expression_statement",
		"declaration",
		"iteration_statement",
		"selection_statement",
		"statement",
		"block_item",
		"declarator",
		"direct_declarator",
		"declaration_specifiers",
		"ELSE",
		"parameter_declaration",
		"block_item_list",
		"argument_expression_list",
		"constant_expression",
		"else_statement",
		"elseif",
		"external_declaration",
		"function_declaration",
		"function_header",
		"function_parameters",
		"global_declaration",
		"import_declaration",
		"initializer",
		"package_declaration",
		"parameter_list",
		"parameter_type_list",
		"struct_declaration",
		"after_period",
		"assignment_operator",
		"elseif_list",
		"fields",
		"STRUCT",
		"struct_fields",
		"struct_literal_fields",
		"translation_unit",
		"$default",
		"ADDR",
		"AFF",
		"AFFVAR",
		"AND",
		"BASICTYPE",
		"BITANDEQ",
		"BITCLEAR_OP",
		"BITOREQ",
		"BITXOREQ",
		"BOOLEAN",
		"BREAK",
		"BYTENUM",
		"CASE",
		"CASSIGN",
		"CLAUSES",
		"COMMENT",
		"CONST",
		"CONTINUE",
		"DEF",
		"DEFAULT",
		"designation",
		"designator",
		"designator_list",
		"DIVEQ",
		"DOUBLE",
		"DPROGRAM",
		"DSTACK",
		"DSTATE",
		"ENUM",
		"EQUAL",
		"EQUALWORD",
		"error",
		"EXP",
		"EXPEQ",
		"EXPR",
		"FIELD",
		"FLOAT",
		"GE_OP",
		"GOTO",
		"GTHANEQ",
		"GTHANWORD",
		"identifier_list",
		"INFER",
		"initializer_list",
		"INPUT",
		"INT",
		"LE_OP",
		"LEFTSHIFT",
		"LEFTSHIFTEQ",
		"LONG",
		"LTHANEQ",
		"LTHANWORD",
		"MINUSEQ",
		"MINUSMINUS",
		"MULTEQ",
		"NEW",
		"NEWLINE",
		"NOT",
		"OBJECT",
		"OBJECTS",
		"OP",
		"OR",
		"OUTPUT",
		"PLUSEQ",
		"PLUSPLUS",
		"PSTEP",
		"PTR_OP",
		"REM",
		"REMAINDER",
		"REMAINDEREQ",
		"RETURN",
		"RIGHTSHIFT",
		"RIGHTSHIFTEQ",
		"SFUNC",
		"SPACKAGE",
		"SSTRUCT",
		"STEP",
		"TAG",
		"TSTEP",
		"TYPSTRUCT",
		"UNEQUAL",
		"UNION",
		"VALUE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {127, 1},
		2:   {127, 2},
		3:   {109, 1},
		4:   {109, 1},
		5:   {109, 1},
		6:   {109, 1},
		7:   {109, 1},
		8:   {113, 4},
		9:   {113, 6},
		10:  {119, 4},
		11:  {125, 3},
		12:  {125, 4},
		13:  {123, 2},
		14:  {123, 3},
		15:  {116, 3},
		16:  {114, 3},
		17:  {111, 2},
		18:  {111, 5},
		19:  {112, 2},
		20:  {112, 3},
		21:  {110, 3},
		22:  {110, 4},
		23:  {118, 1},
		24:  {117, 1},
		25:  {117, 3},
		26:  {103, 2},
		27:  {170, 1},
		28:  {170, 3},
		29:  {99, 1},
		30:  {100, 1},
		31:  {100, 3},
		32:  {101, 2},
		33:  {101, 3},
		34:  {101, 4},
		35:  {101, 1},
		36:  {101, 1},
		37:  {101, 3},
		38:  {48, 1},
		39:  {48, 1},
		40:  {48, 1},
		41:  {48, 1},
		42:  {48, 1},
		43:  {48, 1},
		44:  {48, 1},
		45:  {48, 1},
		46:  {48, 1},
		47:  {48, 1},
		48:  {48, 1},
		49:  {48, 1},
		50:  {48, 1},
		51:  {126, 0},
		52:  {126, 3},
		53:  {126, 5},
		54:  {51, 7},
		55:  {51, 6},
		56:  {51, 7},
		57:  {51, 6},
		58:  {51, 4},
		59:  {54, 1},
		60:  {54, 1},
		61:  {54, 4},
		62:  {54, 1},
		63:  {54, 1},
		64:  {54, 1},
		65:  {54, 1},
		66:  {54, 1},
		67:  {54, 1},
		68:  {54, 3},
		69:  {54, 1},
		70:  {120, 1},
		71:  {120, 1},
		72:  {53, 1},
		73:  {53, 4},
		74:  {53, 3},
		75:  {53, 3},
		76:  {53, 4},
		77:  {53, 2},
		78:  {53, 2},
		79:  {53, 3},
		80:  {105, 1},
		81:  {105, 3},
		82:  {55, 1},
		83:  {55, 2},
		84:  {55, 2},
		85:  {55, 2},
		86:  {56, 1},
		87:  {56, 1},
		88:  {56, 1},
		89:  {56, 1},
		90:  {56, 1},
		91:  {60, 1},
		92:  {60, 3},
		93:  {60, 3},
		94:  {60, 3},
		95:  {62, 1},
		96:  {62, 3},
		97:  {62, 3},
		98:  {73, 1},
		99:  {73, 3},
		100: {73, 3},
		101: {74, 1},
		102: {74, 3},
		103: {74, 3},
		104: {74, 3},
		105: {74, 3},
		106: {75, 1},
		107: {75, 3},
		108: {75, 3},
		109: {76, 1},
		110: {76, 3},
		111: {77, 1},
		112: {77, 3},
		113: {80, 1},
		114: {80, 3},
		115: {82, 1},
		116: {82, 3},
		117: {84, 1},
		118: {84, 3},
		119: {83, 1},
		120: {83, 5},
		121: {85, 1},
		122: {85, 3},
		123: {121, 1},
		124: {121, 1},
		125: {121, 1},
		126: {121, 1},
		127: {121, 1},
		128: {121, 1},
		129: {121, 1},
		130: {121, 1},
		131: {121, 1},
		132: {121, 1},
		133: {121, 1},
		134: {86, 1},
		135: {86, 3},
		136: {106, 1},
		137: {94, 4},
		138: {94, 6},
		139: {115, 1},
		140: {172, 2},
		141: {172, 1},
		142: {172, 4},
		143: {172, 3},
		144: {149, 2},
		145: {151, 1},
		146: {151, 2},
		147: {150, 3},
		148: {150, 2},
		149: {97, 1},
		150: {97, 1},
		151: {97, 1},
		152: {97, 1},
		153: {92, 3},
		154: {92, 4},
		155: {104, 1},
		156: {104, 2},
		157: {98, 1},
		158: {98, 1},
		159: {93, 1},
		160: {93, 2},
		161: {96, 8},
		162: {96, 7},
		163: {96, 7},
		164: {96, 3},
		165: {96, 5},
		166: {108, 6},
		167: {122, 1},
		168: {122, 2},
		169: {107, 4},
		170: {95, 3},
		171: {95, 4},
		172: {95, 5},
		173: {95, 4},
		174: {95, 5},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [291][]uint16{
		// 0
		{59: 183, 87: 187, 186, 185, 184, 109: 177, 180, 188, 113: 179, 181, 116: 178, 119: 182, 127: 176},
		{59: 183, 87: 187, 186, 185, 184, 175, 109: 465, 180, 188, 113: 179, 181, 116: 178, 119: 182},
		{59: 174, 87: 174, 174, 174, 174, 174},
		{59: 172, 87: 172, 172, 172, 172, 172},
		{59: 171, 87: 171, 171, 171, 171, 171},
		// 5
		{59: 170, 87: 170, 170, 170, 170, 170},
		{59: 169, 87: 169, 169, 169, 169, 169},
		{59: 168, 87: 168, 168, 168, 168, 168},
		{2: 304, 10: 303, 99: 459, 302},
		{10: 446},
		// 10
		{10: 444},
		{28: 442},
		{2: 438, 10: 437},
		{2: 189, 112: 190},
		{2: 304, 10: 303, 26: 428, 99: 432, 302, 103: 431, 117: 430, 429},
		// 15
		{2: 189, 9: 193, 92: 191, 112: 192},
		{59: 154, 87: 154, 154, 154, 154, 154},
		{9: 193, 92: 427},
		{224, 225, 216, 226, 227, 253, 207, 222, 221, 193, 208, 248, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 59: 243, 230, 62: 231, 73: 232, 233, 234, 235, 236, 254, 256, 237, 255, 238, 240, 239, 241, 242, 92: 244, 245, 251, 247, 246, 252, 250, 104: 249},
		{137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 11: 137, 137, 26: 137, 35: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 49: 137, 137, 52: 137, 57: 137, 137, 61: 137, 63: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137},
		// 20
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 11: 136, 136, 26: 136, 35: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 49: 136, 136, 52: 136, 57: 136, 136, 61: 136, 63: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 11: 135, 135, 26: 135, 35: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 49: 135, 135, 52: 135, 57: 135, 135, 61: 135, 63: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 11: 134, 134, 26: 134, 35: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 49: 134, 134, 52: 134, 57: 134, 134, 61: 134, 63: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 11: 133, 133, 26: 133, 35: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 49: 133, 133, 52: 133, 57: 133, 133, 61: 133, 63: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 11: 132, 132, 26: 132, 35: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 49: 132, 132, 52: 132, 57: 132, 132, 61: 132, 63: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132},
		// 25
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 11: 131, 131, 26: 131, 35: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 49: 131, 131, 52: 131, 57: 131, 131, 61: 131, 63: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131},
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 11: 130, 130, 26: 130, 35: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 49: 130, 130, 52: 130, 57: 130, 130, 61: 130, 63: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 11: 129, 129, 26: 129, 35: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 49: 129, 129, 52: 129, 57: 129, 129, 61: 129, 63: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 11: 128, 128, 26: 128, 35: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 49: 128, 128, 52: 128, 57: 128, 128, 61: 128, 63: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 11: 127, 127, 26: 127, 35: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 49: 127, 127, 52: 127, 57: 127, 127, 61: 127, 63: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		// 30
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 11: 126, 126, 26: 126, 35: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 49: 126, 126, 52: 126, 57: 126, 126, 61: 126, 63: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 11: 125, 125, 26: 125, 35: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 49: 125, 125, 52: 125, 57: 125, 125, 61: 125, 63: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		{27: 414},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 403, 11: 116, 116, 26: 116, 35: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 49: 116, 116, 52: 116, 57: 116, 116, 61: 116, 63: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 11: 115, 115, 26: 115, 35: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 49: 115, 115, 52: 115, 57: 115, 115, 61: 115, 63: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		// 35
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 11: 113, 113, 26: 113, 35: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 49: 113, 113, 52: 113, 57: 113, 113, 61: 113, 63: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 11: 112, 112, 26: 112, 35: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 49: 112, 112, 52: 112, 57: 112, 112, 61: 112, 63: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 11: 111, 111, 26: 111, 35: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 49: 111, 111, 52: 111, 57: 111, 111, 61: 111, 63: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 11: 110, 110, 26: 110, 35: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 49: 110, 110, 52: 110, 57: 110, 110, 61: 110, 63: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 11: 109, 109, 26: 109, 35: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 49: 109, 109, 52: 109, 57: 109, 109, 61: 109, 63: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109},
		// 40
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 11: 108, 108, 26: 108, 35: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 49: 108, 108, 52: 108, 57: 108, 108, 61: 108, 63: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 241, 401},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 11: 106, 106, 26: 106, 35: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 49: 106, 106, 52: 106, 57: 106, 106, 61: 106, 63: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 11: 103, 103, 26: 103, 35: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 49: 103, 103, 52: 103, 57: 103, 103, 61: 103, 63: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		{93, 93, 388, 93, 93, 93, 387, 390, 389, 93, 11: 93, 93, 26: 93, 35: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 49: 93, 93, 52: 93, 57: 93, 93, 61: 93, 63: 93, 93, 93, 93, 93, 93, 93, 93, 93, 391},
		// 45
		{72: 383},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 382, 223},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 381, 223},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 380, 223},
		{89, 89, 89, 89, 89, 6: 89, 89, 89, 10: 89, 13: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 27: 89, 89, 89, 89, 89, 89, 89, 89},
		// 50
		{88, 88, 88, 88, 88, 6: 88, 88, 88, 10: 88, 13: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 27: 88, 88, 88, 88, 88, 88, 88, 88},
		{87, 87, 87, 87, 87, 6: 87, 87, 87, 10: 87, 13: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 27: 87, 87, 87, 87, 87, 87, 87, 87},
		{86, 86, 86, 86, 86, 6: 86, 86, 86, 10: 86, 13: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 27: 86, 86, 86, 86, 86, 86, 86, 86},
		{85, 85, 85, 85, 85, 6: 85, 85, 85, 10: 85, 13: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 27: 85, 85, 85, 85, 85, 85, 85, 85},
		{84, 84, 3: 84, 84, 84, 9: 84, 11: 84, 84, 26: 84, 35: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 49: 84, 84, 52: 368, 57: 84, 84, 61: 372, 63: 376, 370, 374, 371, 369, 378, 375, 373, 377, 121: 367},
		// 55
		{80, 355, 3: 80, 80, 80, 9: 80, 11: 80, 80, 26: 80, 35: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 49: 80, 80, 57: 356, 357},
		{77, 3: 352, 353, 77, 9: 77, 11: 77, 77, 26: 77, 35: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 49: 77, 77},
		{74, 5: 74, 9: 74, 11: 74, 74, 26: 74, 35: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 49: 349, 350},
		{69, 5: 69, 9: 69, 11: 69, 69, 26: 69, 35: 69, 69, 69, 69, 69, 69, 69, 69, 69, 345, 347, 344, 346},
		{66, 5: 66, 9: 66, 11: 66, 66, 26: 66, 35: 66, 66, 66, 66, 66, 66, 66, 341, 342},
		// 60
		{339, 5: 64, 9: 64, 11: 64, 64, 26: 64, 35: 64, 64, 64, 64, 64, 64, 64},
		{5: 62, 9: 62, 11: 62, 62, 26: 62, 35: 62, 62, 62, 62, 62, 62, 337},
		{5: 60, 9: 60, 11: 60, 60, 26: 60, 35: 60, 60, 60, 60, 60, 335},
		{5: 58, 9: 58, 11: 58, 58, 26: 58, 35: 58, 58, 58, 58, 333},
		{5: 56, 9: 56, 11: 56, 56, 26: 56, 35: 56, 56, 327, 326},
		// 65
		{5: 54, 9: 54, 11: 54, 54, 26: 54, 35: 54, 54},
		{5: 41, 9: 41, 12: 41, 26: 41, 35: 41, 41},
		{5: 270, 12: 263},
		{2: 304, 10: 303, 99: 305, 302},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 13: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27: 26, 26, 26, 26, 26, 26, 26, 26, 59: 26, 78: 26, 26, 81: 26},
		// 70
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 13: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27: 25, 25, 25, 25, 25, 25, 25, 25, 59: 25, 78: 25, 25, 81: 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 27: 24, 24, 24, 24, 24, 24, 24, 24, 59: 24, 78: 24, 24, 81: 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 13: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 27: 23, 23, 23, 23, 23, 23, 23, 23, 59: 23, 78: 23, 23, 81: 23},
		{5: 301},
		{224, 225, 216, 226, 227, 253, 207, 222, 221, 193, 208, 300, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 59: 243, 230, 62: 231, 73: 232, 233, 234, 235, 236, 254, 256, 237, 255, 238, 240, 239, 241, 242, 92: 244, 245, 251, 247, 246, 252, 281},
		// 75
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 13: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 27: 20, 20, 20, 20, 20, 20, 20, 20, 59: 20, 78: 20, 20, 81: 20},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 13: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 27: 18, 18, 18, 18, 18, 18, 18, 18, 59: 18, 78: 18, 18, 81: 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 27: 17, 17, 17, 17, 17, 17, 17, 17, 59: 17, 78: 17, 17, 81: 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 27: 16, 16, 16, 16, 16, 16, 16, 16, 59: 16, 78: 16, 16, 81: 16},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 241, 276},
		// 80
		{2: 272},
		{224, 225, 216, 226, 227, 253, 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 59: 243, 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 241, 257, 93: 258, 259},
		{5: 270, 9: 193, 12: 263, 92: 271},
		{224, 225, 216, 226, 227, 253, 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 241, 242, 93: 266},
		{224, 225, 216, 226, 227, 253, 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 241, 242, 93: 260},
		// 85
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 193, 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 241, 261, 92: 262},
		{9: 193, 12: 263, 92: 264},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 13: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 27: 2, 2, 2, 2, 2, 2, 2, 2, 59: 2, 78: 2, 2, 81: 2},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 265},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 27: 1, 1, 1, 1, 1, 1, 1, 1, 59: 1, 78: 1, 1, 81: 1},
		// 90
		{5: 40, 9: 40, 12: 40, 26: 40, 35: 40, 40},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 193, 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 241, 267, 92: 268},
		{9: 193, 12: 263, 92: 269},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 13: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 27: 4, 4, 4, 4, 4, 4, 4, 4, 59: 4, 78: 4, 4, 81: 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 13: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 27: 3, 3, 3, 3, 3, 3, 3, 3, 59: 3, 78: 3, 3, 81: 3},
		// 95
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 13: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 27: 15, 15, 15, 15, 15, 15, 15, 15, 59: 15, 78: 15, 15, 81: 15},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 27: 5, 5, 5, 5, 5, 5, 5, 5, 59: 5, 78: 5, 5, 81: 5},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 241, 273},
		{12: 263, 26: 274},
		{224, 225, 216, 226, 227, 253, 207, 222, 221, 193, 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 254, 256, 237, 255, 238, 240, 239, 241, 242, 92: 244, 245, 95: 247, 246, 275},
		// 100
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 13: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 27: 10, 10, 10, 10, 10, 10, 10, 10, 59: 10, 78: 10, 10, 81: 10},
		{9: 277, 12: 263, 92: 278},
		{224, 225, 216, 226, 227, 253, 207, 222, 221, 193, 208, 248, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 59: 243, 230, 62: 231, 73: 232, 233, 234, 235, 236, 254, 256, 237, 255, 238, 240, 239, 241, 242, 92: 244, 245, 251, 247, 246, 252, 250, 104: 279},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 27: 11, 11, 11, 11, 11, 11, 11, 11, 59: 11, 78: 11, 11, 81: 11},
		{224, 225, 216, 226, 227, 253, 207, 222, 221, 193, 208, 280, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 59: 243, 230, 62: 231, 73: 232, 233, 234, 235, 236, 254, 256, 237, 255, 238, 240, 239, 241, 242, 92: 244, 245, 251, 247, 246, 252, 281},
		// 105
		{5: 282, 102: 285, 107: 284, 286, 122: 283},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 13: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 27: 19, 19, 19, 19, 19, 19, 19, 19, 59: 19, 78: 19, 19, 81: 19},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 13: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 27: 21, 21, 21, 21, 21, 21, 21, 21, 59: 21, 78: 21, 21, 81: 21, 87: 21, 21, 21, 21, 21},
		{5: 297, 102: 285, 107: 296, 298},
		{5: 295},
		// 110
		{9: 288, 78: 287},
		{5: 8, 102: 8},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 241, 291},
		{224, 225, 216, 226, 227, 253, 207, 222, 221, 193, 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 59: 243, 230, 62: 231, 73: 232, 233, 234, 235, 236, 254, 256, 237, 255, 238, 240, 239, 241, 242, 92: 244, 245, 251, 247, 246, 252, 250, 104: 289},
		{224, 225, 216, 226, 227, 253, 207, 222, 221, 193, 208, 290, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 59: 243, 230, 62: 231, 73: 232, 233, 234, 235, 236, 254, 256, 237, 255, 238, 240, 239, 241, 242, 92: 244, 245, 251, 247, 246, 252, 281},
		// 115
		{5: 6},
		{9: 292, 12: 263},
		{224, 225, 216, 226, 227, 253, 207, 222, 221, 193, 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 59: 243, 230, 62: 231, 73: 232, 233, 234, 235, 236, 254, 256, 237, 255, 238, 240, 239, 241, 242, 92: 244, 245, 251, 247, 246, 252, 250, 104: 293},
		{224, 225, 216, 226, 227, 253, 207, 222, 221, 193, 208, 294, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 59: 243, 230, 62: 231, 73: 232, 233, 234, 235, 236, 254, 256, 237, 255, 238, 240, 239, 241, 242, 92: 244, 245, 251, 247, 246, 252, 281},
		{5: 9, 102: 9},
		// 120
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 13, 59: 13, 78: 13, 13, 81: 13},
		{5: 299},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 27: 12, 12, 12, 12, 12, 12, 12, 12, 59: 12, 78: 12, 12, 81: 12},
		{5: 7, 102: 7},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 27: 14, 14, 14, 14, 14, 14, 14, 14, 59: 14, 78: 14, 14, 81: 14},
		// 125
		{5: 282},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 13: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 27: 22, 22, 22, 22, 22, 22, 22, 22, 59: 22, 78: 22, 22, 81: 22, 87: 22, 22, 22, 22, 22},
		{1: 146, 6: 146, 10: 146, 13: 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146},
		{1: 145, 6: 145, 10: 145, 13: 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145},
		{2: 304, 10: 303, 99: 324, 302},
		// 130
		{1: 306, 6: 307, 10: 309, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 48: 308, 101: 310},
		{1: 306, 6: 307, 10: 309, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 48: 308, 101: 323},
		{27: 319, 35: 318},
		{5: 140, 12: 140, 26: 140, 52: 140},
		{5: 139, 12: 139, 26: 139, 52: 139, 72: 316},
		// 135
		{5: 311, 52: 312},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 13: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 27: 38, 38, 38, 38, 38, 38, 38, 38, 59: 38, 78: 38, 38, 81: 38},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 314, 115: 313},
		{5: 315},
		{5: 36},
		// 140
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 13: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 27: 37, 37, 37, 37, 37, 37, 37, 37, 59: 37, 78: 37, 37, 81: 37},
		{10: 317},
		{5: 138, 12: 138, 26: 138, 52: 138},
		{1: 306, 6: 307, 10: 309, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 48: 308, 101: 322},
		{35: 320},
		// 145
		{1: 306, 6: 307, 10: 309, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 48: 308, 101: 321},
		{5: 141, 12: 141, 26: 141, 52: 141},
		{5: 142, 12: 142, 26: 142, 52: 142},
		{5: 143, 12: 143, 26: 143, 52: 143},
		{26: 325},
		// 150
		{1: 144, 6: 144, 10: 144, 13: 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 332},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 241, 328},
		{12: 263, 36: 329},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 331, 239},
		// 155
		{84, 84, 3: 84, 84, 84, 9: 84, 11: 84, 84, 26: 84, 35: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 49: 84, 84, 57: 84, 84},
		{5: 55, 9: 55, 11: 55, 55, 26: 55, 35: 55, 55},
		{5: 57, 9: 57, 11: 57, 57, 26: 57, 35: 57, 57, 57, 57, 333},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 334},
		{5: 59, 9: 59, 11: 59, 59, 26: 59, 35: 59, 59, 59, 59, 59, 335},
		// 160
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 336},
		{5: 61, 9: 61, 11: 61, 61, 26: 61, 35: 61, 61, 61, 61, 61, 61, 337},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 231, 73: 232, 233, 234, 338},
		{339, 5: 63, 9: 63, 11: 63, 63, 26: 63, 35: 63, 63, 63, 63, 63, 63, 63},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 231, 73: 232, 233, 340},
		// 165
		{65, 5: 65, 9: 65, 11: 65, 65, 26: 65, 35: 65, 65, 65, 65, 65, 65, 65, 341, 342},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 231, 73: 232, 366},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 231, 73: 232, 343},
		{67, 5: 67, 9: 67, 11: 67, 67, 26: 67, 35: 67, 67, 67, 67, 67, 67, 67, 67, 67, 345, 347, 344, 346},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 231, 73: 365},
		// 170
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 231, 73: 364},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 231, 73: 363},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 231, 73: 348},
		{70, 5: 70, 9: 70, 11: 70, 70, 26: 70, 35: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 49: 349, 350},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 362},
		// 175
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 351},
		{75, 3: 352, 353, 75, 9: 75, 11: 75, 75, 26: 75, 35: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 49: 75, 75},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 361},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 354},
		{78, 355, 3: 78, 78, 78, 9: 78, 11: 78, 78, 26: 78, 35: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 49: 78, 78, 57: 356, 357},
		// 180
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 360, 223},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 359, 223},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 358, 223},
		{81, 81, 3: 81, 81, 81, 9: 81, 11: 81, 81, 26: 81, 35: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 49: 81, 81, 57: 81, 81},
		{82, 82, 3: 82, 82, 82, 9: 82, 11: 82, 82, 26: 82, 35: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 49: 82, 82, 57: 82, 82},
		// 185
		{83, 83, 3: 83, 83, 83, 9: 83, 11: 83, 83, 26: 83, 35: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 49: 83, 83, 57: 83, 83},
		{79, 355, 3: 79, 79, 79, 9: 79, 11: 79, 79, 26: 79, 35: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 49: 79, 79, 57: 356, 357},
		{76, 3: 352, 353, 76, 9: 76, 11: 76, 76, 26: 76, 35: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 49: 76, 76},
		{71, 5: 71, 9: 71, 11: 71, 71, 26: 71, 35: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 49: 349, 350},
		{72, 5: 72, 9: 72, 11: 72, 72, 26: 72, 35: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 49: 349, 350},
		// 190
		{73, 5: 73, 9: 73, 11: 73, 73, 26: 73, 35: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 49: 349, 350},
		{68, 5: 68, 9: 68, 11: 68, 68, 26: 68, 35: 68, 68, 68, 68, 68, 68, 68, 68, 68, 345, 347, 344, 346},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 379},
		{52, 52, 52, 52, 52, 6: 52, 52, 52, 10: 52, 13: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 27: 52, 52, 52, 52, 52, 52, 52, 52},
		{51, 51, 51, 51, 51, 6: 51, 51, 51, 10: 51, 13: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 27: 51, 51, 51, 51, 51, 51, 51, 51},
		// 195
		{50, 50, 50, 50, 50, 6: 50, 50, 50, 10: 50, 13: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 27: 50, 50, 50, 50, 50, 50, 50, 50},
		{49, 49, 49, 49, 49, 6: 49, 49, 49, 10: 49, 13: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 27: 49, 49, 49, 49, 49, 49, 49, 49},
		{48, 48, 48, 48, 48, 6: 48, 48, 48, 10: 48, 13: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 27: 48, 48, 48, 48, 48, 48, 48, 48},
		{47, 47, 47, 47, 47, 6: 47, 47, 47, 10: 47, 13: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 27: 47, 47, 47, 47, 47, 47, 47, 47},
		{46, 46, 46, 46, 46, 6: 46, 46, 46, 10: 46, 13: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 27: 46, 46, 46, 46, 46, 46, 46, 46},
		// 200
		{45, 45, 45, 45, 45, 6: 45, 45, 45, 10: 45, 13: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 27: 45, 45, 45, 45, 45, 45, 45, 45},
		{44, 44, 44, 44, 44, 6: 44, 44, 44, 10: 44, 13: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 27: 44, 44, 44, 44, 44, 44, 44, 44},
		{43, 43, 43, 43, 43, 6: 43, 43, 43, 10: 43, 13: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 27: 43, 43, 43, 43, 43, 43, 43, 43},
		{42, 42, 42, 42, 42, 6: 42, 42, 42, 10: 42, 13: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 27: 42, 42, 42, 42, 42, 42, 42, 42},
		{5: 53, 9: 53, 11: 53, 53, 26: 53, 35: 53, 53},
		// 205
		{90, 90, 3: 90, 90, 90, 9: 90, 11: 90, 90, 26: 90, 35: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 49: 90, 90, 52: 90, 57: 90, 90, 61: 90, 63: 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{91, 91, 3: 91, 91, 91, 9: 91, 11: 91, 91, 26: 91, 35: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 49: 91, 91, 52: 91, 57: 91, 91, 61: 91, 63: 91, 91, 91, 91, 91, 91, 91, 91, 91},
		{92, 92, 3: 92, 92, 92, 9: 92, 11: 92, 92, 26: 92, 35: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 49: 92, 92, 52: 92, 57: 92, 92, 61: 92, 63: 92, 92, 92, 92, 92, 92, 92, 92, 92},
		{10: 385, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 48: 384, 120: 386},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 11: 105, 105, 26: 105, 35: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 49: 105, 105, 52: 105, 57: 105, 105, 61: 105, 63: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105},
		// 210
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 11: 104, 104, 26: 104, 35: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 49: 104, 104, 52: 104, 57: 104, 104, 61: 104, 63: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 11: 101, 101, 26: 101, 35: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 49: 101, 101, 52: 101, 57: 101, 101, 61: 101, 63: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 241, 399},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 393, 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 395, 105: 394},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 11: 98, 98, 26: 98, 35: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 49: 98, 98, 52: 98, 57: 98, 98, 61: 98, 63: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		// 215
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 11: 97, 97, 26: 97, 35: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 49: 97, 97, 52: 97, 57: 97, 97, 61: 97, 63: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		{10: 392},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 11: 96, 96, 26: 96, 35: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 49: 96, 96, 52: 96, 57: 96, 96, 61: 96, 63: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 11: 100, 100, 26: 100, 35: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 49: 100, 100, 52: 100, 57: 100, 100, 61: 100, 63: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{12: 397, 26: 396},
		// 220
		{11: 95, 95, 26: 95},
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 11: 99, 99, 26: 99, 35: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 49: 99, 99, 52: 99, 57: 99, 99, 61: 99, 63: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 398},
		{11: 94, 94, 26: 94},
		{12: 263, 35: 400},
		// 225
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 11: 102, 102, 26: 102, 35: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 49: 102, 102, 52: 102, 57: 102, 102, 61: 102, 63: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{12: 263, 26: 402},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 11: 107, 107, 26: 107, 35: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 49: 107, 107, 52: 107, 57: 107, 107, 61: 107, 63: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		{10: 404, 124, 124, 126: 405},
		{36: 412},
		// 230
		{11: 407, 406},
		{10: 408},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 11: 114, 114, 26: 114, 35: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 49: 114, 114, 52: 114, 57: 114, 114, 61: 114, 63: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114},
		{36: 409},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 411, 239, 106: 410},
		// 235
		{11: 122, 122},
		{11: 39, 39},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 330, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 411, 239, 106: 413},
		{11: 123, 123},
		{35: 415},
		// 240
		{6: 207, 10: 416, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 48: 417, 51: 418},
		{9: 423},
		{9: 419},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 11: 117, 117, 26: 117, 35: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 49: 117, 117, 52: 117, 57: 117, 117, 61: 117, 63: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 421, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 395, 105: 420},
		// 245
		{11: 422, 397},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 11: 118, 118, 26: 118, 35: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 49: 118, 118, 52: 118, 57: 118, 118, 61: 118, 63: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 11: 119, 119, 26: 119, 35: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 49: 119, 119, 52: 119, 57: 119, 119, 61: 119, 63: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 425, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 395, 105: 424},
		{11: 426, 397},
		// 250
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 11: 120, 120, 26: 120, 35: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 49: 120, 120, 52: 120, 57: 120, 120, 61: 120, 63: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 11: 121, 121, 26: 121, 35: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 49: 121, 121, 52: 121, 57: 121, 121, 61: 121, 63: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		{59: 153, 87: 153, 153, 153, 153, 153},
		{2: 156, 9: 156},
		{26: 436},
		// 255
		{12: 434, 26: 152},
		{12: 151, 26: 151},
		{1: 306, 6: 307, 10: 309, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 48: 308, 101: 433},
		{5: 149, 12: 149, 26: 149},
		{2: 304, 10: 303, 99: 432, 302, 103: 435},
		// 260
		{12: 150, 26: 150},
		{2: 155, 9: 155},
		{2: 158},
		{2: 304, 10: 303, 99: 432, 302, 103: 431, 117: 430, 439},
		{26: 440},
		// 265
		{10: 441},
		{2: 157},
		{5: 443},
		{59: 159, 87: 159, 159, 159, 159, 159},
		{5: 445},
		// 270
		{59: 160, 87: 160, 160, 160, 160, 160},
		{124: 447},
		{9: 449, 125: 448},
		{59: 165, 87: 165, 165, 165, 165, 165},
		{2: 304, 10: 303, 450, 99: 432, 302, 103: 452, 123: 451},
		// 275
		{5: 458},
		{2: 304, 10: 303, 454, 99: 432, 302, 103: 455},
		{5: 453},
		{2: 162, 10: 162, 162},
		{5: 457},
		// 280
		{5: 456},
		{2: 161, 10: 161, 161},
		{59: 163, 87: 163, 163, 163, 163, 163},
		{59: 164, 87: 164, 164, 164, 164, 164},
		{1: 306, 6: 307, 10: 309, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 48: 308, 101: 460},
		// 285
		{5: 461, 52: 462},
		{59: 167, 87: 167, 167, 167, 167, 167},
		{224, 225, 216, 226, 227, 6: 207, 222, 221, 10: 208, 13: 194, 195, 197, 198, 200, 201, 202, 199, 196, 204, 205, 206, 203, 27: 212, 209, 210, 211, 214, 213, 215, 228, 48: 220, 51: 217, 53: 219, 218, 229, 223, 60: 230, 62: 231, 73: 232, 233, 234, 235, 236, 80: 237, 82: 238, 240, 239, 314, 115: 463},
		{5: 464},
		{59: 166, 87: 166, 166, 166, 166, 166},
		// 290
		{59: 173, 87: 173, 173, 173, 173, 173},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 160

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 8:
		{
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				expr := WritePrimary(yyS[yypt-1].argument.Type, make([]byte, yyS[yypt-1].argument.TotalSize))
				exprOut := expr[0].Outputs[0]
				yyS[yypt-1].argument.Name = yyS[yypt-2].argument.Name
				yyS[yypt-1].argument.MemoryRead = MEM_DATA
				yyS[yypt-1].argument.MemoryWrite = MEM_DATA
				yyS[yypt-1].argument.Offset = exprOut.Offset
				yyS[yypt-1].argument.Package = exprOut.Package
				pkg.AddGlobal(yyS[yypt-1].argument)
			} else {
				panic(err)
			}
		}
	case 9:
		{
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				expr := WritePrimary(yyS[yypt-3].argument.Type, make([]byte, yyS[yypt-3].argument.Size))
				exprOut := expr[0].Outputs[0]
				yyS[yypt-3].argument.Name = yyS[yypt-4].argument.Name
				yyS[yypt-3].argument.MemoryRead = MEM_DATA
				yyS[yypt-3].argument.MemoryWrite = MEM_DATA
				yyS[yypt-3].argument.Offset = exprOut.Offset
				yyS[yypt-3].argument.Size = exprOut.Size
				yyS[yypt-3].argument.TotalSize = exprOut.TotalSize
				yyS[yypt-3].argument.Package = exprOut.Package
				pkg.AddGlobal(yyS[yypt-3].argument)
			} else {
				panic(err)
			}
		}
	case 10:
		{
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				strct := MakeStruct(yyS[yypt-2].tok)
				pkg.AddStruct(strct)

				var size int
				for _, fld := range yyS[yypt-0].arguments {
					strct.AddField(fld)
					size += fld.TotalSize
				}
				strct.Size = size
			} else {
				panic(err)
			}
		}
	case 11:
		{
			yyVAL.arguments = nil
		}
	case 12:
		{
			yyVAL.arguments = yyS[yypt-2].arguments
		}
	case 13:
		{
			yyVAL.arguments = []*CXArgument{yyS[yypt-1].argument}
		}
	case 14:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-1].argument)
		}
	case 15:
		{
			pkg := MakePackage(yyS[yypt-1].tok)
			PRGRM.AddPackage(pkg)
		}
	case 17:
		{
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				fn := MakeFunction(yyS[yypt-0].tok)
				pkg.AddFunction(fn)

				yyVAL.function = fn
			} else {
				panic(err)
			}
		}
	case 18:
		{
			if len(yyS[yypt-2].arguments) > 1 {
				panic("method has multiple receivers")
			}
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				fn := MakeFunction(yyS[yypt-0].tok)
				pkg.AddFunction(fn)

				fn.AddInput(yyS[yypt-2].arguments[0])

				yyVAL.function = fn
			} else {
				panic(err)
			}
		}
	case 19:
		{
			yyVAL.arguments = nil
		}
	case 20:
		{
			yyVAL.arguments = yyS[yypt-1].arguments
		}
	case 21:
		{
			FunctionDeclaration(yyS[yypt-2].function, yyS[yypt-1].arguments, nil, nil)
		}
	case 22:
		{
			FunctionDeclaration(yyS[yypt-3].function, yyS[yypt-2].arguments, yyS[yypt-1].arguments, nil)
		}
	case 24:
		{
			// if $1.IsArray {
			// 	$1.TotalSize = $1.Size * TotalLength($1.Lengths)
			// } else {
			// 	$1.TotalSize = $1.Size
			// }
			yyVAL.arguments = []*CXArgument{yyS[yypt-0].argument}
		}
	case 25:
		{
			// if $3.IsArray {
			// 	$3.TotalSize = $3.Size * TotalLength($3.Lengths)
			// } else {
			// 	$3.TotalSize = $3.Size
			// }
			// lastPar := $1[len($1) - 1]
			// $3.Offset = lastPar.Offset + lastPar.TotalSize
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-0].argument)
		}
	case 26:
		{
			yyS[yypt-0].argument.Name = yyS[yypt-1].argument.Name
			yyS[yypt-0].argument.Package = yyS[yypt-1].argument.Package
			// $2.MemoryType = MEM_STACK
			yyVAL.argument = yyS[yypt-0].argument
		}
	case 30:
		{
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				arg := MakeArgument("")
				arg.AddType(TypeNames[TYPE_UNDEFINED])
				arg.Name = yyS[yypt-0].tok
				arg.Package = pkg
				yyVAL.argument = arg
			} else {
				panic(err)
			}
		}
	case 31:
		{
			yyVAL.argument = yyS[yypt-1].argument
		}
	case 32:
		{
			yyS[yypt-0].argument.DeclarationSpecifiers = append(yyS[yypt-0].argument.DeclarationSpecifiers, DECL_POINTER)
			if !yyS[yypt-0].argument.IsPointer {
				yyS[yypt-0].argument.IsPointer = true
				// $2.MemoryRead = MEM_HEAP
				yyS[yypt-0].argument.PointeeSize = yyS[yypt-0].argument.Size
				yyS[yypt-0].argument.Size = TYPE_POINTER_SIZE
				yyS[yypt-0].argument.TotalSize = TYPE_POINTER_SIZE
				yyS[yypt-0].argument.IndirectionLevels++
			} else {
				pointer := yyS[yypt-0].argument

				for c := yyS[yypt-0].argument.IndirectionLevels - 1; c > 0; c-- {
					pointer = pointer.Pointee
					pointer.IndirectionLevels = c
					pointer.IsPointer = true
				}

				pointee := MakeArgument("")
				pointee.AddType(TypeNames[pointer.Type])
				// pointee.Size = pointer.Size
				// pointee.TotalSize = pointer.TotalSize
				pointee.IsPointer = true

				yyS[yypt-0].argument.IndirectionLevels++

				// pointer.Type = TYPE_POINTER
				pointer.Size = TYPE_POINTER_SIZE
				pointer.TotalSize = TYPE_POINTER_SIZE
				pointer.Pointee = pointee
			}

			yyVAL.argument = yyS[yypt-0].argument
		}
	case 33:
		{
			yyS[yypt-0].argument.DeclarationSpecifiers = append(yyS[yypt-0].argument.DeclarationSpecifiers, DECL_SLICE)
			arg := yyS[yypt-0].argument
			arg.IsArray = true
			arg.Lengths = append([]int{SLICE_SIZE}, arg.Lengths...)
			arg.TotalSize = arg.Size * TotalLength(arg.Lengths)
			yyVAL.argument = arg
		}
	case 34:
		{
			yyS[yypt-0].argument.DeclarationSpecifiers = append(yyS[yypt-0].argument.DeclarationSpecifiers, DECL_ARRAY)
			arg := yyS[yypt-0].argument
			arg.IsArray = true
			arg.Lengths = append([]int{int(yyS[yypt-2].i32)}, arg.Lengths...)
			arg.TotalSize = arg.Size * TotalLength(arg.Lengths)
			// arg.Size = GetArgSize($4.Type)
			yyVAL.argument = arg
		}
	case 35:
		{
			arg := MakeArgument("")
			arg.AddType(TypeNames[yyS[yypt-0].i])
			arg.DeclarationSpecifiers = append(arg.DeclarationSpecifiers, DECL_BASIC)
			arg.Type = yyS[yypt-0].i
			arg.Size = GetArgSize(yyS[yypt-0].i)
			arg.TotalSize = arg.Size
			yyVAL.argument = arg
		}
	case 36:
		{
			// custom type in the current package
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				if strct, err := PRGRM.GetStruct(yyS[yypt-0].tok, pkg.Name); err == nil {
					arg := MakeArgument("")
					arg.AddType(TypeNames[TYPE_CUSTOM])
					arg.DeclarationSpecifiers = append(arg.DeclarationSpecifiers, DECL_STRUCT)
					arg.CustomType = strct
					arg.Size = strct.Size
					arg.TotalSize = strct.Size

					yyVAL.argument = arg
				} else {
					panic("type '" + yyS[yypt-0].tok + "' does not exist")
				}
			} else {
				panic(err)
			}
		}
	case 37:
		{
			// custom type in an imported package
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				if imp, err := pkg.GetImport(yyS[yypt-2].tok); err == nil {
					if strct, err := PRGRM.GetStruct(yyS[yypt-0].tok, imp.Name); err == nil {
						arg := MakeArgument("")
						arg.AddType(TypeNames[TYPE_CUSTOM])
						arg.CustomType = strct
						arg.Size = strct.Size
						arg.TotalSize = strct.Size
						arg.DeclarationSpecifiers = append(arg.DeclarationSpecifiers, DECL_STRUCT)

						yyVAL.argument = arg
					} else {
						panic("type '" + yyS[yypt-2].tok + "' does not exist")
					}
				} else {
					panic(err)
				}
			} else {
				panic(err)
			}

			// if pkg, err := PRGRM.GetPackage($1); err == nil {
			// 	if strct, err := PRGRM.GetStruct($3, pkg.Name); err == nil {
			// 		arg := MakeArgument(TYPE_CUSTOM)
			// 		arg.CustomType = strct
			// 		arg.Size = strct.Size
			// 		arg.TotalSize = strct.Size

			// 		$$ = arg
			// 	} else {
			// 		panic("type '" + $1 + "' does not exist")
			// 	}
			// } else {
			// 	panic(err)
			// }
		}
	case 38:
		{
			yyVAL.i = TYPE_BOOL
		}
	case 39:
		{
			yyVAL.i = TYPE_BYTE
		}
	case 40:
		{
			yyVAL.i = TYPE_STR
		}
	case 41:
		{
			yyVAL.i = TYPE_F32
		}
	case 42:
		{
			yyVAL.i = TYPE_F64
		}
	case 43:
		{
			yyVAL.i = TYPE_I8
		}
	case 44:
		{
			yyVAL.i = TYPE_I16
		}
	case 45:
		{
			yyVAL.i = TYPE_I32
		}
	case 46:
		{
			yyVAL.i = TYPE_I64
		}
	case 47:
		{
			yyVAL.i = TYPE_UI8
		}
	case 48:
		{
			yyVAL.i = TYPE_UI16
		}
	case 49:
		{
			yyVAL.i = TYPE_UI32
		}
	case 50:
		{
			yyVAL.i = TYPE_UI64
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
