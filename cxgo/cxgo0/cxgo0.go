// Code generated by goyacc - DO NOT EDIT.

package cxgo0

import __yyfmt__ "fmt"

import (
	"bytes"
	"fmt"
	. "github.com/skycoin/cx/cx"
)

var PRGRM *CXProgram
var DataOffset int

var lineNo int = 0
var replMode bool = false
var inREPL bool = false
var inFn bool = false
var fileName string

func WritePrimary(typ int, byts []byte) []*CXExpression {
	if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
		arg := MakeArgument("")
		arg.AddType(TypeNames[typ])
		arg.AddValue(&byts)
		arg.MemoryRead = MEM_DATA
		arg.MemoryWrite = MEM_DATA
		arg.Offset = DataOffset
		arg.Package = pkg
		arg.Program = PRGRM
		size := len(byts)
		arg.Size = size
		arg.TotalSize = size
		arg.PointeeSize = size
		DataOffset += size
		PRGRM.Data = append(PRGRM.Data, Data(byts)...)
		expr := MakeExpression(nil)
		expr.Package = pkg
		expr.Outputs = append(expr.Outputs, arg)
		return []*CXExpression{expr}
	} else {
		panic(err)
	}
}

func TotalLength(lengths []int) int {
	var total int = 1
	for _, i := range lengths {
		total *= i
	}
	return total
}

func FunctionDeclaration(fn *CXFunction, inputs []*CXArgument, outputs []*CXArgument, exprs []*CXExpression) {
	// adding inputs, outputs
	for _, inp := range inputs {
		fn.AddInput(inp)
	}
	for _, out := range outputs {
		fn.AddOutput(out)
	}
}

func Parse(code string) int {
	codeBuf := bytes.NewBufferString(code)
	return yyParse(NewLexer(codeBuf))
}

type yySymType struct {
	yys     int
	i       int
	byt     byte
	i32     int32
	i64     int64
	f32     float32
	f64     float64
	tok     string
	bool    bool
	string  string
	stringA []string

	line int

	argument  *CXArgument
	arguments []*CXArgument

	expression  *CXExpression
	expressions []*CXExpression

	function *CXFunction
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault       = 57496
	yyEofCode       = 57344
	ADDR            = 57495
	ADD_ASSIGN      = 57440
	ADD_OP          = 57400
	AFF             = 57491
	AFFVAR          = 57407
	AND             = 57398
	AND_ASSIGN      = 57441
	AND_OP          = 57438
	ASSIGN          = 57380
	BASICTYPE       = 57472
	BITANDEQ        = 57426
	BITCLEAR_OP     = 57417
	BITOREQ         = 57428
	BITOR_OP        = 57416
	BITXOREQ        = 57427
	BITXOR_OP       = 57415
	BOOL            = 57450
	BOOLEAN         = 57348
	BOOLEAN_LITERAL = 57354
	BREAK           = 57469
	BYTE            = 57451
	BYTENUM         = 57346
	BYTE_LITERAL    = 57352
	CASE            = 57466
	CASSIGN         = 57381
	CLAUSES         = 57482
	COLON           = 57390
	COMMA           = 57368
	COMMENT         = 57370
	CONST           = 57465
	CONTINUE        = 57470
	DEC_OP          = 57429
	DEF             = 57477
	DEFAULT         = 57467
	DIVEQ           = 57421
	DIV_ASSIGN      = 57445
	DIV_OP          = 57403
	DOUBLE          = 57351
	DOUBLE_LITERAL  = 57357
	DPROGRAM        = 57489
	DSTACK          = 57488
	DSTATE          = 57490
	ELSE            = 57374
	ENUM            = 57464
	EQUAL           = 57389
	EQUALWORD       = 57392
	EQ_OP           = 57436
	EXP             = 57413
	EXPEQ           = 57423
	EXPR            = 57478
	F32             = 57452
	F64             = 57453
	FIELD           = 57479
	FLOAT           = 57350
	FLOAT_LITERAL   = 57356
	FOR             = 57375
	FUNC            = 57358
	GE_OP           = 57434
	GOTO            = 57384
	GTEQ_OP         = 57387
	GTHANEQ         = 57395
	GTHANWORD       = 57393
	GT_OP           = 57385
	I16             = 57455
	I32             = 57456
	I64             = 57457
	I8              = 57454
	IDENTIFIER      = 57366
	IF              = 57373
	IMPORT          = 57382
	INC_OP          = 57430
	INFER           = 57493
	INPUT           = 57480
	INT             = 57347
	INT_LITERAL     = 57353
	LBRACE          = 57362
	LBRACK          = 57364
	LEFTSHIFT       = 57411
	LEFTSHIFTEQ     = 57424
	LEFT_ASSIGN     = 57442
	LEFT_OP         = 57432
	LE_OP           = 57435
	LONG            = 57349
	LONG_LITERAL    = 57355
	LPAREN          = 57360
	LTEQ_OP         = 57388
	LTHANEQ         = 57396
	LTHANWORD       = 57394
	LT_OP           = 57386
	MINUSEQ         = 57419
	MINUSMINUS      = 57409
	MOD_ASSIGN      = 57443
	MOD_OP          = 57404
	MULTEQ          = 57420
	MUL_ASSIGN      = 57444
	MUL_OP          = 57402
	NEG_OP          = 57406
	NEW             = 57391
	NEWLINE         = 57379
	NE_OP           = 57437
	NOT             = 57414
	OBJECT          = 57483
	OBJECTS         = 57484
	OP              = 57359
	OR              = 57399
	OR_ASSIGN       = 57446
	OR_OP           = 57439
	OUTPUT          = 57481
	PACKAGE         = 57372
	PERIOD          = 57369
	PLUSEQ          = 57418
	PLUSPLUS        = 57408
	PSTEP           = 57486
	PTR_OP          = 57431
	RBRACE          = 57363
	RBRACK          = 57365
	REF_OP          = 57405
	REM             = 57476
	REMAINDER       = 57410
	REMAINDEREQ     = 57422
	RETURN          = 57383
	RIGHTSHIFT      = 57412
	RIGHTSHIFTEQ    = 57425
	RIGHT_ASSIGN    = 57447
	RIGHT_OP        = 57433
	RPAREN          = 57361
	SEMICOLON       = 57378
	SFUNC           = 57475
	SPACKAGE        = 57473
	SSTRUCT         = 57474
	STEP            = 57485
	STR             = 57458
	STRING_LITERAL  = 57371
	STRUCT          = 57377
	SUB_ASSIGN      = 57448
	SUB_OP          = 57401
	SWITCH          = 57468
	TAG             = 57492
	TSTEP           = 57487
	TYPE            = 57471
	TYPSTRUCT       = 57376
	UI16            = 57460
	UI32            = 57461
	UI64            = 57462
	UI8             = 57459
	UNEQUAL         = 57397
	UNION           = 57463
	VALUE           = 57494
	VAR             = 57367
	XOR_ASSIGN      = 57449
	yyErrCode       = 57345

	yyMaxDepth = 200
	yyTabOfs   = -182
)

var (
	yyPrec = map[int]int{
		IDENTIFIER: 0,
		LBRACE:     0,
	}

	yyXLAT = map[int]int{
		57405: 0,   // REF_OP (167x)
		57402: 1,   // MUL_OP (161x)
		57360: 2,   // LPAREN (159x)
		57400: 3,   // ADD_OP (155x)
		57401: 4,   // SUB_OP (155x)
		57364: 5,   // LBRACK (152x)
		57378: 6,   // SEMICOLON (151x)
		57429: 7,   // DEC_OP (141x)
		57430: 8,   // INC_OP (141x)
		57362: 9,   // LBRACE (136x)
		57363: 10,  // RBRACE (134x)
		57366: 11,  // IDENTIFIER (126x)
		57368: 12,  // COMMA (119x)
		57361: 13,  // RPAREN (108x)
		57450: 14,  // BOOL (106x)
		57451: 15,  // BYTE (106x)
		57452: 16,  // F32 (106x)
		57453: 17,  // F64 (106x)
		57455: 18,  // I16 (106x)
		57456: 19,  // I32 (106x)
		57457: 20,  // I64 (106x)
		57454: 21,  // I8 (106x)
		57458: 22,  // STR (106x)
		57460: 23,  // UI16 (106x)
		57461: 24,  // UI32 (106x)
		57462: 25,  // UI64 (106x)
		57459: 26,  // UI8 (106x)
		57353: 27,  // INT_LITERAL (97x)
		57371: 28,  // STRING_LITERAL (95x)
		57354: 29,  // BOOLEAN_LITERAL (94x)
		57352: 30,  // BYTE_LITERAL (94x)
		57357: 31,  // DOUBLE_LITERAL (94x)
		57356: 32,  // FLOAT_LITERAL (94x)
		57355: 33,  // LONG_LITERAL (94x)
		57406: 34,  // NEG_OP (94x)
		57365: 35,  // RBRACK (91x)
		57390: 36,  // COLON (88x)
		63:    37,  // '?' (80x)
		57439: 38,  // OR_OP (80x)
		57438: 39,  // AND_OP (79x)
		57416: 40,  // BITOR_OP (77x)
		57415: 41,  // BITXOR_OP (75x)
		57436: 42,  // EQ_OP (71x)
		57437: 43,  // NE_OP (71x)
		57385: 44,  // GT_OP (69x)
		57387: 45,  // GTEQ_OP (69x)
		57386: 46,  // LT_OP (69x)
		57388: 47,  // LTEQ_OP (69x)
		57432: 48,  // LEFT_OP (66x)
		57433: 49,  // RIGHT_OP (66x)
		57553: 50,  // type_specifier (63x)
		57380: 51,  // ASSIGN (59x)
		57403: 52,  // DIV_OP (58x)
		57404: 53,  // MOD_OP (58x)
		57501: 54,  // array_literal_expression (55x)
		57547: 55,  // slice_literal_expression (55x)
		57542: 56,  // postfix_expression (54x)
		57543: 57,  // primary_expression (54x)
		57554: 58,  // unary_expression (54x)
		57555: 59,  // unary_operator (54x)
		57440: 60,  // ADD_ASSIGN (51x)
		57441: 61,  // AND_ASSIGN (51x)
		57445: 62,  // DIV_ASSIGN (51x)
		57442: 63,  // LEFT_ASSIGN (51x)
		57443: 64,  // MOD_ASSIGN (51x)
		57444: 65,  // MUL_ASSIGN (51x)
		57446: 66,  // OR_ASSIGN (51x)
		57447: 67,  // RIGHT_ASSIGN (51x)
		57448: 68,  // SUB_ASSIGN (51x)
		57367: 69,  // VAR (51x)
		57449: 70,  // XOR_ASSIGN (51x)
		57369: 71,  // PERIOD (49x)
		57537: 72,  // multiplicative_expression (48x)
		57497: 73,  // additive_expression (46x)
		57546: 74,  // shift_expression (44x)
		57544: 75,  // relational_expression (40x)
		57519: 76,  // equality_expression (38x)
		57499: 77,  // and_expression (37x)
		57520: 78,  // exclusive_or_expression (36x)
		57531: 79,  // inclusive_or_expression (35x)
		57373: 80,  // IF (34x)
		57535: 81,  // logical_and_expression (34x)
		57507: 82,  // conditional_expression (33x)
		57375: 83,  // FOR (33x)
		57536: 84,  // logical_or_expression (33x)
		57468: 85,  // SWITCH (33x)
		57502: 86,  // assignment_expression (30x)
		57521: 87,  // expression (20x)
		57358: 88,  // FUNC (20x)
		57382: 89,  // IMPORT (20x)
		57372: 90,  // PACKAGE (20x)
		57471: 91,  // TYPE (20x)
		57344: 92,  // $end (19x)
		57506: 93,  // compound_statement (17x)
		57522: 94,  // expression_statement (12x)
		57509: 95,  // declaration (9x)
		57534: 96,  // iteration_statement (9x)
		57545: 97,  // selection_statement (9x)
		57548: 98,  // statement (9x)
		57504: 99,  // block_item (8x)
		57511: 100, // declarator (8x)
		57515: 101, // direct_declarator (8x)
		57510: 102, // declaration_specifiers (6x)
		57500: 103, // argument_expression_list (5x)
		57374: 104, // ELSE (5x)
		57539: 105, // parameter_declaration (5x)
		57505: 106, // block_item_list (4x)
		57508: 107, // constant_expression (2x)
		57516: 108, // else_statement (2x)
		57517: 109, // elseif (2x)
		57523: 110, // external_declaration (2x)
		57525: 111, // function_declaration (2x)
		57526: 112, // function_header (2x)
		57527: 113, // function_parameters (2x)
		57528: 114, // global_declaration (2x)
		57530: 115, // import_declaration (2x)
		57532: 116, // initializer (2x)
		57538: 117, // package_declaration (2x)
		57540: 118, // parameter_list (2x)
		57541: 119, // parameter_type_list (2x)
		57549: 120, // struct_declaration (2x)
		57551: 121, // struct_literal_fields (2x)
		57498: 122, // after_period (1x)
		57503: 123, // assignment_operator (1x)
		57518: 124, // elseif_list (1x)
		57524: 125, // fields (1x)
		57377: 126, // STRUCT (1x)
		57550: 127, // struct_fields (1x)
		57552: 128, // translation_unit (1x)
		57496: 129, // $default (0x)
		57495: 130, // ADDR (0x)
		57491: 131, // AFF (0x)
		57407: 132, // AFFVAR (0x)
		57398: 133, // AND (0x)
		57472: 134, // BASICTYPE (0x)
		57426: 135, // BITANDEQ (0x)
		57417: 136, // BITCLEAR_OP (0x)
		57428: 137, // BITOREQ (0x)
		57427: 138, // BITXOREQ (0x)
		57348: 139, // BOOLEAN (0x)
		57469: 140, // BREAK (0x)
		57346: 141, // BYTENUM (0x)
		57466: 142, // CASE (0x)
		57381: 143, // CASSIGN (0x)
		57482: 144, // CLAUSES (0x)
		57370: 145, // COMMENT (0x)
		57465: 146, // CONST (0x)
		57470: 147, // CONTINUE (0x)
		57477: 148, // DEF (0x)
		57467: 149, // DEFAULT (0x)
		57512: 150, // designation (0x)
		57513: 151, // designator (0x)
		57514: 152, // designator_list (0x)
		57421: 153, // DIVEQ (0x)
		57351: 154, // DOUBLE (0x)
		57489: 155, // DPROGRAM (0x)
		57488: 156, // DSTACK (0x)
		57490: 157, // DSTATE (0x)
		57464: 158, // ENUM (0x)
		57389: 159, // EQUAL (0x)
		57392: 160, // EQUALWORD (0x)
		57345: 161, // error (0x)
		57413: 162, // EXP (0x)
		57423: 163, // EXPEQ (0x)
		57478: 164, // EXPR (0x)
		57479: 165, // FIELD (0x)
		57350: 166, // FLOAT (0x)
		57434: 167, // GE_OP (0x)
		57384: 168, // GOTO (0x)
		57395: 169, // GTHANEQ (0x)
		57393: 170, // GTHANWORD (0x)
		57529: 171, // identifier_list (0x)
		57493: 172, // INFER (0x)
		57533: 173, // initializer_list (0x)
		57480: 174, // INPUT (0x)
		57347: 175, // INT (0x)
		57435: 176, // LE_OP (0x)
		57411: 177, // LEFTSHIFT (0x)
		57424: 178, // LEFTSHIFTEQ (0x)
		57349: 179, // LONG (0x)
		57396: 180, // LTHANEQ (0x)
		57394: 181, // LTHANWORD (0x)
		57419: 182, // MINUSEQ (0x)
		57409: 183, // MINUSMINUS (0x)
		57420: 184, // MULTEQ (0x)
		57391: 185, // NEW (0x)
		57379: 186, // NEWLINE (0x)
		57414: 187, // NOT (0x)
		57483: 188, // OBJECT (0x)
		57484: 189, // OBJECTS (0x)
		57359: 190, // OP (0x)
		57399: 191, // OR (0x)
		57481: 192, // OUTPUT (0x)
		57418: 193, // PLUSEQ (0x)
		57408: 194, // PLUSPLUS (0x)
		57486: 195, // PSTEP (0x)
		57431: 196, // PTR_OP (0x)
		57476: 197, // REM (0x)
		57410: 198, // REMAINDER (0x)
		57422: 199, // REMAINDEREQ (0x)
		57383: 200, // RETURN (0x)
		57412: 201, // RIGHTSHIFT (0x)
		57425: 202, // RIGHTSHIFTEQ (0x)
		57475: 203, // SFUNC (0x)
		57473: 204, // SPACKAGE (0x)
		57474: 205, // SSTRUCT (0x)
		57485: 206, // STEP (0x)
		57492: 207, // TAG (0x)
		57487: 208, // TSTEP (0x)
		57376: 209, // TYPSTRUCT (0x)
		57397: 210, // UNEQUAL (0x)
		57463: 211, // UNION (0x)
		57494: 212, // VALUE (0x)
	}

	yySymNames = []string{
		"REF_OP",
		"MUL_OP",
		"LPAREN",
		"ADD_OP",
		"SUB_OP",
		"LBRACK",
		"SEMICOLON",
		"DEC_OP",
		"INC_OP",
		"LBRACE",
		"RBRACE",
		"IDENTIFIER",
		"COMMA",
		"RPAREN",
		"BOOL",
		"BYTE",
		"F32",
		"F64",
		"I16",
		"I32",
		"I64",
		"I8",
		"STR",
		"UI16",
		"UI32",
		"UI64",
		"UI8",
		"INT_LITERAL",
		"STRING_LITERAL",
		"BOOLEAN_LITERAL",
		"BYTE_LITERAL",
		"DOUBLE_LITERAL",
		"FLOAT_LITERAL",
		"LONG_LITERAL",
		"NEG_OP",
		"RBRACK",
		"COLON",
		"'?'",
		"OR_OP",
		"AND_OP",
		"BITOR_OP",
		"BITXOR_OP",
		"EQ_OP",
		"NE_OP",
		"GT_OP",
		"GTEQ_OP",
		"LT_OP",
		"LTEQ_OP",
		"LEFT_OP",
		"RIGHT_OP",
		"type_specifier",
		"ASSIGN",
		"DIV_OP",
		"MOD_OP",
		"array_literal_expression",
		"slice_literal_expression",
		"postfix_expression",
		"primary_expression",
		"unary_expression",
		"unary_operator",
		"ADD_ASSIGN",
		"AND_ASSIGN",
		"DIV_ASSIGN",
		"LEFT_ASSIGN",
		"MOD_ASSIGN",
		"MUL_ASSIGN",
		"OR_ASSIGN",
		"RIGHT_ASSIGN",
		"SUB_ASSIGN",
		"VAR",
		"XOR_ASSIGN",
		"PERIOD",
		"multiplicative_expression",
		"additive_expression",
		"shift_expression",
		"relational_expression",
		"equality_expression",
		"and_expression",
		"exclusive_or_expression",
		"inclusive_or_expression",
		"IF",
		"logical_and_expression",
		"conditional_expression",
		"FOR",
		"logical_or_expression",
		"SWITCH",
		"assignment_expression",
		"expression",
		"FUNC",
		"IMPORT",
		"PACKAGE",
		"TYPE",
		"$end",
		"compound_statement",
		"expression_statement",
		"declaration",
		"iteration_statement",
		"selection_statement",
		"statement",
		"block_item",
		"declarator",
		"direct_declarator",
		"declaration_specifiers",
		"argument_expression_list",
		"ELSE",
		"parameter_declaration",
		"block_item_list",
		"constant_expression",
		"else_statement",
		"elseif",
		"external_declaration",
		"function_declaration",
		"function_header",
		"function_parameters",
		"global_declaration",
		"import_declaration",
		"initializer",
		"package_declaration",
		"parameter_list",
		"parameter_type_list",
		"struct_declaration",
		"struct_literal_fields",
		"after_period",
		"assignment_operator",
		"elseif_list",
		"fields",
		"STRUCT",
		"struct_fields",
		"translation_unit",
		"$default",
		"ADDR",
		"AFF",
		"AFFVAR",
		"AND",
		"BASICTYPE",
		"BITANDEQ",
		"BITCLEAR_OP",
		"BITOREQ",
		"BITXOREQ",
		"BOOLEAN",
		"BREAK",
		"BYTENUM",
		"CASE",
		"CASSIGN",
		"CLAUSES",
		"COMMENT",
		"CONST",
		"CONTINUE",
		"DEF",
		"DEFAULT",
		"designation",
		"designator",
		"designator_list",
		"DIVEQ",
		"DOUBLE",
		"DPROGRAM",
		"DSTACK",
		"DSTATE",
		"ENUM",
		"EQUAL",
		"EQUALWORD",
		"error",
		"EXP",
		"EXPEQ",
		"EXPR",
		"FIELD",
		"FLOAT",
		"GE_OP",
		"GOTO",
		"GTHANEQ",
		"GTHANWORD",
		"identifier_list",
		"INFER",
		"initializer_list",
		"INPUT",
		"INT",
		"LE_OP",
		"LEFTSHIFT",
		"LEFTSHIFTEQ",
		"LONG",
		"LTHANEQ",
		"LTHANWORD",
		"MINUSEQ",
		"MINUSMINUS",
		"MULTEQ",
		"NEW",
		"NEWLINE",
		"NOT",
		"OBJECT",
		"OBJECTS",
		"OP",
		"OR",
		"OUTPUT",
		"PLUSEQ",
		"PLUSPLUS",
		"PSTEP",
		"PTR_OP",
		"REM",
		"REMAINDER",
		"REMAINDEREQ",
		"RETURN",
		"RIGHTSHIFT",
		"RIGHTSHIFTEQ",
		"SFUNC",
		"SPACKAGE",
		"SSTRUCT",
		"STEP",
		"TAG",
		"TSTEP",
		"TYPSTRUCT",
		"UNEQUAL",
		"UNION",
		"VALUE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {128, 1},
		2:   {128, 2},
		3:   {110, 1},
		4:   {110, 1},
		5:   {110, 1},
		6:   {110, 1},
		7:   {110, 1},
		8:   {114, 4},
		9:   {114, 6},
		10:  {120, 4},
		11:  {127, 3},
		12:  {127, 4},
		13:  {125, 2},
		14:  {125, 3},
		15:  {117, 3},
		16:  {115, 3},
		17:  {112, 2},
		18:  {112, 5},
		19:  {113, 2},
		20:  {113, 3},
		21:  {111, 3},
		22:  {111, 4},
		23:  {119, 1},
		24:  {118, 1},
		25:  {118, 3},
		26:  {105, 2},
		27:  {171, 1},
		28:  {171, 3},
		29:  {100, 1},
		30:  {101, 1},
		31:  {101, 3},
		32:  {102, 2},
		33:  {102, 3},
		34:  {102, 4},
		35:  {102, 1},
		36:  {102, 1},
		37:  {102, 3},
		38:  {50, 1},
		39:  {50, 1},
		40:  {50, 1},
		41:  {50, 1},
		42:  {50, 1},
		43:  {50, 1},
		44:  {50, 1},
		45:  {50, 1},
		46:  {50, 1},
		47:  {50, 1},
		48:  {50, 1},
		49:  {50, 1},
		50:  {50, 1},
		51:  {121, 0},
		52:  {121, 3},
		53:  {121, 5},
		54:  {54, 7},
		55:  {54, 6},
		56:  {54, 7},
		57:  {54, 6},
		58:  {54, 4},
		59:  {55, 6},
		60:  {55, 5},
		61:  {55, 6},
		62:  {55, 5},
		63:  {55, 3},
		64:  {57, 1},
		65:  {57, 1},
		66:  {57, 4},
		67:  {57, 6},
		68:  {57, 1},
		69:  {57, 1},
		70:  {57, 1},
		71:  {57, 1},
		72:  {57, 1},
		73:  {57, 1},
		74:  {57, 3},
		75:  {57, 1},
		76:  {57, 1},
		77:  {122, 1},
		78:  {122, 1},
		79:  {56, 1},
		80:  {56, 4},
		81:  {56, 3},
		82:  {56, 3},
		83:  {56, 4},
		84:  {56, 2},
		85:  {56, 2},
		86:  {56, 3},
		87:  {103, 1},
		88:  {103, 3},
		89:  {58, 1},
		90:  {58, 2},
		91:  {58, 2},
		92:  {58, 2},
		93:  {59, 1},
		94:  {59, 1},
		95:  {59, 1},
		96:  {59, 1},
		97:  {59, 1},
		98:  {72, 1},
		99:  {72, 3},
		100: {72, 3},
		101: {72, 3},
		102: {73, 1},
		103: {73, 3},
		104: {73, 3},
		105: {74, 1},
		106: {74, 3},
		107: {74, 3},
		108: {75, 1},
		109: {75, 3},
		110: {75, 3},
		111: {75, 3},
		112: {75, 3},
		113: {76, 1},
		114: {76, 3},
		115: {76, 3},
		116: {77, 1},
		117: {77, 3},
		118: {78, 1},
		119: {78, 3},
		120: {79, 1},
		121: {79, 3},
		122: {81, 1},
		123: {81, 3},
		124: {84, 1},
		125: {84, 3},
		126: {82, 1},
		127: {82, 5},
		128: {86, 1},
		129: {86, 3},
		130: {123, 1},
		131: {123, 1},
		132: {123, 1},
		133: {123, 1},
		134: {123, 1},
		135: {123, 1},
		136: {123, 1},
		137: {123, 1},
		138: {123, 1},
		139: {123, 1},
		140: {123, 1},
		141: {87, 1},
		142: {87, 3},
		143: {107, 1},
		144: {95, 4},
		145: {95, 6},
		146: {116, 1},
		147: {173, 2},
		148: {173, 1},
		149: {173, 4},
		150: {173, 3},
		151: {150, 2},
		152: {152, 1},
		153: {152, 2},
		154: {151, 3},
		155: {151, 2},
		156: {98, 1},
		157: {98, 1},
		158: {98, 1},
		159: {98, 1},
		160: {93, 3},
		161: {93, 4},
		162: {106, 1},
		163: {106, 2},
		164: {99, 1},
		165: {99, 1},
		166: {94, 1},
		167: {94, 2},
		168: {97, 8},
		169: {97, 7},
		170: {97, 7},
		171: {97, 3},
		172: {97, 5},
		173: {109, 6},
		174: {124, 1},
		175: {124, 2},
		176: {108, 4},
		177: {96, 3},
		178: {96, 4},
		179: {96, 5},
		180: {96, 4},
		181: {96, 5},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [311][]uint16{
		// 0
		{69: 190, 88: 194, 193, 192, 191, 110: 184, 187, 195, 114: 186, 188, 117: 185, 120: 189, 128: 183},
		{69: 190, 88: 194, 193, 192, 191, 182, 110: 492, 187, 195, 114: 186, 188, 117: 185, 120: 189},
		{69: 181, 88: 181, 181, 181, 181, 181},
		{69: 179, 88: 179, 179, 179, 179, 179},
		{69: 178, 88: 178, 178, 178, 178, 178},
		// 5
		{69: 177, 88: 177, 177, 177, 177, 177},
		{69: 176, 88: 176, 176, 176, 176, 176},
		{69: 175, 88: 175, 175, 175, 175, 175},
		{2: 312, 11: 311, 100: 486, 310},
		{11: 473},
		// 10
		{11: 471},
		{28: 469},
		{2: 465, 11: 464},
		{2: 196, 113: 197},
		{2: 312, 11: 311, 13: 455, 100: 459, 310, 105: 458, 118: 457, 456},
		// 15
		{2: 196, 9: 200, 93: 198, 113: 199},
		{69: 161, 88: 161, 161, 161, 161, 161},
		{9: 200, 93: 454},
		{232, 233, 223, 234, 235, 214, 261, 230, 229, 200, 256, 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 69: 251, 72: 238, 239, 240, 241, 242, 243, 244, 245, 262, 246, 248, 264, 247, 263, 249, 250, 93: 252, 253, 259, 255, 254, 260, 258, 106: 257},
		{144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 12: 144, 144, 35: 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 51: 144, 144, 144, 60: 144, 144, 144, 144, 144, 144, 144, 144, 144, 70: 144, 144},
		// 20
		{143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 12: 143, 143, 35: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 51: 143, 143, 143, 60: 143, 143, 143, 143, 143, 143, 143, 143, 143, 70: 143, 143},
		{142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 12: 142, 142, 35: 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 51: 142, 142, 142, 60: 142, 142, 142, 142, 142, 142, 142, 142, 142, 70: 142, 142},
		{141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 12: 141, 141, 35: 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 51: 141, 141, 141, 60: 141, 141, 141, 141, 141, 141, 141, 141, 141, 70: 141, 141},
		{140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 12: 140, 140, 35: 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 51: 140, 140, 140, 60: 140, 140, 140, 140, 140, 140, 140, 140, 140, 70: 140, 140},
		{139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 12: 139, 139, 35: 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 51: 139, 139, 139, 60: 139, 139, 139, 139, 139, 139, 139, 139, 139, 70: 139, 139},
		// 25
		{138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 12: 138, 138, 35: 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 51: 138, 138, 138, 60: 138, 138, 138, 138, 138, 138, 138, 138, 138, 70: 138, 138},
		{137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 12: 137, 137, 35: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 51: 137, 137, 137, 60: 137, 137, 137, 137, 137, 137, 137, 137, 137, 70: 137, 137},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 12: 136, 136, 35: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 51: 136, 136, 136, 60: 136, 136, 136, 136, 136, 136, 136, 136, 136, 70: 136, 136},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 12: 135, 135, 35: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 51: 135, 135, 135, 60: 135, 135, 135, 135, 135, 135, 135, 135, 135, 70: 135, 135},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 12: 134, 134, 35: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 51: 134, 134, 134, 60: 134, 134, 134, 134, 134, 134, 134, 134, 134, 70: 134, 134},
		// 30
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 12: 133, 133, 35: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 51: 133, 133, 133, 60: 133, 133, 133, 133, 133, 133, 133, 133, 133, 70: 133, 133},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 12: 132, 132, 35: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 51: 132, 132, 132, 60: 132, 132, 132, 132, 132, 132, 132, 132, 132, 70: 132, 132},
		{27: 427, 35: 428},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 411, 118, 12: 118, 118, 35: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 51: 118, 118, 118, 60: 118, 118, 118, 118, 118, 118, 118, 118, 118, 70: 118, 412},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 12: 117, 117, 35: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 51: 117, 117, 117, 60: 117, 117, 117, 117, 117, 117, 117, 117, 117, 70: 117, 117},
		// 35
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 12: 114, 114, 35: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 51: 114, 114, 114, 60: 114, 114, 114, 114, 114, 114, 114, 114, 114, 70: 114, 114},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12: 113, 113, 35: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 51: 113, 113, 113, 60: 113, 113, 113, 113, 113, 113, 113, 113, 113, 70: 113, 113},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12: 112, 112, 35: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 51: 112, 112, 112, 60: 112, 112, 112, 112, 112, 112, 112, 112, 112, 70: 112, 112},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 12: 111, 111, 35: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 51: 111, 111, 111, 60: 111, 111, 111, 111, 111, 111, 111, 111, 111, 70: 111, 111},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 12: 110, 110, 35: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 51: 110, 110, 110, 60: 110, 110, 110, 110, 110, 110, 110, 110, 110, 70: 110, 110},
		// 40
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 12: 109, 109, 35: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 51: 109, 109, 109, 60: 109, 109, 109, 109, 109, 109, 109, 109, 109, 70: 109, 109},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 249, 409},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 12: 107, 107, 35: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 51: 107, 107, 107, 60: 107, 107, 107, 107, 107, 107, 107, 107, 107, 70: 107, 107},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 12: 106, 106, 35: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 51: 106, 106, 106, 60: 106, 106, 106, 106, 106, 106, 106, 106, 106, 70: 106, 106},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 12: 103, 103, 35: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 51: 103, 103, 103, 60: 103, 103, 103, 103, 103, 103, 103, 103, 103, 70: 103, 103},
		// 45
		{93, 93, 396, 93, 93, 395, 93, 398, 397, 93, 93, 12: 93, 93, 35: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 51: 93, 93, 93, 60: 93, 93, 93, 93, 93, 93, 93, 93, 93, 70: 93, 399},
		{71: 391},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 390, 231},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 389, 231},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 388, 231},
		// 50
		{89, 89, 89, 89, 89, 89, 7: 89, 89, 11: 89, 14: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{88, 88, 88, 88, 88, 88, 7: 88, 88, 11: 88, 14: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{87, 87, 87, 87, 87, 87, 7: 87, 87, 11: 87, 14: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{86, 86, 86, 86, 86, 86, 7: 86, 86, 11: 86, 14: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{85, 85, 85, 85, 85, 85, 7: 85, 85, 11: 85, 14: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		// 55
		{84, 84, 3: 84, 84, 6: 84, 9: 84, 84, 12: 84, 84, 35: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 51: 376, 84, 84, 60: 380, 384, 378, 382, 379, 377, 386, 383, 381, 70: 385, 123: 375},
		{80, 363, 3: 80, 80, 6: 80, 9: 80, 80, 12: 80, 80, 35: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 52: 364, 365},
		{77, 3: 360, 361, 6: 77, 9: 77, 77, 12: 77, 77, 35: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{74, 6: 74, 9: 74, 74, 12: 74, 74, 35: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 357, 358},
		{69, 6: 69, 9: 69, 69, 12: 69, 69, 35: 69, 69, 69, 69, 69, 69, 69, 69, 69, 353, 355, 352, 354},
		// 60
		{66, 6: 66, 9: 66, 66, 12: 66, 66, 35: 66, 66, 66, 66, 66, 66, 66, 349, 350},
		{347, 6: 64, 9: 64, 64, 12: 64, 64, 35: 64, 64, 64, 64, 64, 64, 64},
		{6: 62, 9: 62, 62, 12: 62, 62, 35: 62, 62, 62, 62, 62, 62, 345},
		{6: 60, 9: 60, 60, 12: 60, 60, 35: 60, 60, 60, 60, 60, 343},
		{6: 58, 9: 58, 58, 12: 58, 58, 35: 58, 58, 58, 58, 341},
		// 65
		{6: 56, 9: 56, 56, 12: 56, 56, 35: 56, 56, 335, 334},
		{6: 54, 9: 54, 54, 12: 54, 54, 35: 54, 54},
		{6: 41, 9: 41, 12: 41, 41, 35: 41, 41},
		{6: 278, 12: 271},
		{2: 312, 11: 311, 100: 313, 310},
		// 70
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 14: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 69: 26, 80: 26, 83: 26, 85: 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 14: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 69: 25, 80: 25, 83: 25, 85: 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 14: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 69: 24, 80: 24, 83: 24, 85: 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 14: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 69: 23, 80: 23, 83: 23, 85: 23},
		{6: 309},
		// 75
		{232, 233, 223, 234, 235, 214, 261, 230, 229, 200, 308, 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 69: 251, 72: 238, 239, 240, 241, 242, 243, 244, 245, 262, 246, 248, 264, 247, 263, 249, 250, 93: 252, 253, 259, 255, 254, 260, 289},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 69: 20, 80: 20, 83: 20, 85: 20},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 69: 18, 80: 18, 83: 18, 85: 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 14: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 69: 17, 80: 17, 83: 17, 85: 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 69: 16, 80: 16, 83: 16, 85: 16},
		// 80
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 249, 284},
		{2: 280},
		{232, 233, 223, 234, 235, 214, 261, 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 69: 251, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 249, 265, 94: 266, 267},
		{6: 278, 9: 200, 12: 271, 93: 279},
		{232, 233, 223, 234, 235, 214, 261, 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 249, 250, 94: 274},
		// 85
		{232, 233, 223, 234, 235, 214, 261, 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 249, 250, 94: 268},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 200, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 249, 269, 93: 270},
		{9: 200, 12: 271, 93: 272},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 14: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 69: 2, 80: 2, 83: 2, 85: 2},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 273},
		// 90
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 69: 1, 80: 1, 83: 1, 85: 1},
		{6: 40, 9: 40, 12: 40, 40, 35: 40, 40},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 200, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 249, 275, 93: 276},
		{9: 200, 12: 271, 93: 277},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 14: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 69: 4, 80: 4, 83: 4, 85: 4},
		// 95
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 69: 3, 80: 3, 83: 3, 85: 3},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 69: 15, 80: 15, 83: 15, 85: 15},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 14: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 69: 5, 80: 5, 83: 5, 85: 5},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 249, 281},
		{12: 271, 282},
		// 100
		{232, 233, 223, 234, 235, 214, 261, 230, 229, 200, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 262, 246, 248, 264, 247, 263, 249, 250, 93: 252, 253, 96: 255, 254, 283},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 69: 10, 80: 10, 83: 10, 85: 10},
		{9: 285, 12: 271, 93: 286},
		{232, 233, 223, 234, 235, 214, 261, 230, 229, 200, 256, 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 69: 251, 72: 238, 239, 240, 241, 242, 243, 244, 245, 262, 246, 248, 264, 247, 263, 249, 250, 93: 252, 253, 259, 255, 254, 260, 258, 106: 287},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 14: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 69: 11, 80: 11, 83: 11, 85: 11},
		// 105
		{232, 233, 223, 234, 235, 214, 261, 230, 229, 200, 288, 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 69: 251, 72: 238, 239, 240, 241, 242, 243, 244, 245, 262, 246, 248, 264, 247, 263, 249, 250, 93: 252, 253, 259, 255, 254, 260, 289},
		{6: 290, 104: 293, 108: 292, 294, 124: 291},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 69: 19, 80: 19, 83: 19, 85: 19},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 14: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 69: 21, 80: 21, 83: 21, 85: 21, 88: 21, 21, 21, 21, 21},
		{6: 305, 104: 293, 108: 304, 306},
		// 110
		{6: 303},
		{9: 296, 80: 295},
		{6: 8, 104: 8},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 249, 299},
		{232, 233, 223, 234, 235, 214, 261, 230, 229, 200, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 69: 251, 72: 238, 239, 240, 241, 242, 243, 244, 245, 262, 246, 248, 264, 247, 263, 249, 250, 93: 252, 253, 259, 255, 254, 260, 258, 106: 297},
		// 115
		{232, 233, 223, 234, 235, 214, 261, 230, 229, 200, 298, 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 69: 251, 72: 238, 239, 240, 241, 242, 243, 244, 245, 262, 246, 248, 264, 247, 263, 249, 250, 93: 252, 253, 259, 255, 254, 260, 289},
		{6: 6},
		{9: 300, 12: 271},
		{232, 233, 223, 234, 235, 214, 261, 230, 229, 200, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 69: 251, 72: 238, 239, 240, 241, 242, 243, 244, 245, 262, 246, 248, 264, 247, 263, 249, 250, 93: 252, 253, 259, 255, 254, 260, 258, 106: 301},
		{232, 233, 223, 234, 235, 214, 261, 230, 229, 200, 302, 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 69: 251, 72: 238, 239, 240, 241, 242, 243, 244, 245, 262, 246, 248, 264, 247, 263, 249, 250, 93: 252, 253, 259, 255, 254, 260, 289},
		// 120
		{6: 9, 104: 9},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 69: 13, 80: 13, 83: 13, 85: 13},
		{6: 307},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 69: 12, 80: 12, 83: 12, 85: 12},
		{6: 7, 104: 7},
		// 125
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 69: 14, 80: 14, 83: 14, 85: 14},
		{6: 290},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 14: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 69: 22, 80: 22, 83: 22, 85: 22, 88: 22, 22, 22, 22, 22},
		{1: 153, 5: 153, 11: 153, 13: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153},
		{1: 152, 5: 152, 11: 152, 13: 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152},
		// 130
		{2: 312, 11: 311, 100: 332, 310},
		{1: 314, 5: 315, 11: 317, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 50: 316, 102: 318},
		{1: 314, 5: 315, 11: 317, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 50: 316, 102: 331},
		{27: 327, 35: 326},
		{6: 147, 12: 147, 147, 51: 147},
		// 135
		{6: 146, 12: 146, 146, 51: 146, 71: 324},
		{6: 319, 51: 320},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 14: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69: 38, 80: 38, 83: 38, 85: 38},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 322, 116: 321},
		{6: 323},
		// 140
		{6: 36},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 14: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 69: 37, 80: 37, 83: 37, 85: 37},
		{11: 325},
		{6: 145, 12: 145, 145, 51: 145},
		{1: 314, 5: 315, 11: 317, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 50: 316, 102: 330},
		// 145
		{35: 328},
		{1: 314, 5: 315, 11: 317, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 50: 316, 102: 329},
		{6: 148, 12: 148, 148, 51: 148},
		{6: 149, 12: 149, 149, 51: 149},
		{6: 150, 12: 150, 150, 51: 150},
		// 150
		{13: 333},
		{1: 151, 5: 151, 11: 151, 13: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 340},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 249, 336},
		{12: 271, 36: 337},
		// 155
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 339, 84: 247},
		{84, 84, 3: 84, 84, 6: 84, 9: 84, 84, 12: 84, 84, 35: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 52: 84, 84},
		{6: 55, 9: 55, 55, 12: 55, 55, 35: 55, 55},
		{6: 57, 9: 57, 57, 12: 57, 57, 35: 57, 57, 57, 57, 341},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 239, 240, 241, 242, 243, 244, 342},
		// 160
		{6: 59, 9: 59, 59, 12: 59, 59, 35: 59, 59, 59, 59, 59, 343},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 239, 240, 241, 242, 243, 344},
		{6: 61, 9: 61, 61, 12: 61, 61, 35: 61, 61, 61, 61, 61, 61, 345},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 239, 240, 241, 242, 346},
		{347, 6: 63, 9: 63, 63, 12: 63, 63, 35: 63, 63, 63, 63, 63, 63, 63},
		// 165
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 239, 240, 241, 348},
		{65, 6: 65, 9: 65, 65, 12: 65, 65, 35: 65, 65, 65, 65, 65, 65, 65, 349, 350},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 239, 240, 374},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 239, 240, 351},
		{67, 6: 67, 9: 67, 67, 12: 67, 67, 35: 67, 67, 67, 67, 67, 67, 67, 67, 67, 353, 355, 352, 354},
		// 170
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 239, 373},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 239, 372},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 239, 371},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 239, 356},
		{70, 6: 70, 9: 70, 70, 12: 70, 70, 35: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 357, 358},
		// 175
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 370},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 359},
		{75, 3: 360, 361, 6: 75, 9: 75, 75, 12: 75, 75, 35: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 369},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 362},
		// 180
		{78, 363, 3: 78, 78, 6: 78, 9: 78, 78, 12: 78, 78, 35: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 52: 364, 365},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 368, 231},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 367, 231},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 366, 231},
		{81, 81, 3: 81, 81, 6: 81, 9: 81, 81, 12: 81, 81, 35: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 52: 81, 81},
		// 185
		{82, 82, 3: 82, 82, 6: 82, 9: 82, 82, 12: 82, 82, 35: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 52: 82, 82},
		{83, 83, 3: 83, 83, 6: 83, 9: 83, 83, 12: 83, 83, 35: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 52: 83, 83},
		{79, 363, 3: 79, 79, 6: 79, 9: 79, 79, 12: 79, 79, 35: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 52: 364, 365},
		{76, 3: 360, 361, 6: 76, 9: 76, 76, 12: 76, 76, 35: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		{71, 6: 71, 9: 71, 71, 12: 71, 71, 35: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 357, 358},
		// 190
		{72, 6: 72, 9: 72, 72, 12: 72, 72, 35: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 357, 358},
		{73, 6: 73, 9: 73, 73, 12: 73, 73, 35: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 357, 358},
		{68, 6: 68, 9: 68, 68, 12: 68, 68, 35: 68, 68, 68, 68, 68, 68, 68, 68, 68, 353, 355, 352, 354},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 387},
		{52, 52, 52, 52, 52, 52, 7: 52, 52, 11: 52, 14: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		// 195
		{51, 51, 51, 51, 51, 51, 7: 51, 51, 11: 51, 14: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{50, 50, 50, 50, 50, 50, 7: 50, 50, 11: 50, 14: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{49, 49, 49, 49, 49, 49, 7: 49, 49, 11: 49, 14: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{48, 48, 48, 48, 48, 48, 7: 48, 48, 11: 48, 14: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{47, 47, 47, 47, 47, 47, 7: 47, 47, 11: 47, 14: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		// 200
		{46, 46, 46, 46, 46, 46, 7: 46, 46, 11: 46, 14: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{45, 45, 45, 45, 45, 45, 7: 45, 45, 11: 45, 14: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{44, 44, 44, 44, 44, 44, 7: 44, 44, 11: 44, 14: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{43, 43, 43, 43, 43, 43, 7: 43, 43, 11: 43, 14: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{42, 42, 42, 42, 42, 42, 7: 42, 42, 11: 42, 14: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		// 205
		{6: 53, 9: 53, 53, 12: 53, 53, 35: 53, 53},
		{90, 90, 3: 90, 90, 6: 90, 9: 90, 90, 12: 90, 90, 35: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 51: 90, 90, 90, 60: 90, 90, 90, 90, 90, 90, 90, 90, 90, 70: 90},
		{91, 91, 3: 91, 91, 6: 91, 9: 91, 91, 12: 91, 91, 35: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 51: 91, 91, 91, 60: 91, 91, 91, 91, 91, 91, 91, 91, 91, 70: 91},
		{92, 92, 3: 92, 92, 6: 92, 9: 92, 92, 12: 92, 92, 35: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 51: 92, 92, 92, 60: 92, 92, 92, 92, 92, 92, 92, 92, 92, 70: 92},
		{11: 393, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 50: 392, 122: 394},
		// 210
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 12: 105, 105, 35: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 51: 105, 105, 105, 60: 105, 105, 105, 105, 105, 105, 105, 105, 105, 70: 105, 105},
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 12: 104, 104, 35: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 51: 104, 104, 104, 60: 104, 104, 104, 104, 104, 104, 104, 104, 104, 70: 104, 104},
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 12: 101, 101, 35: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 51: 101, 101, 101, 60: 101, 101, 101, 101, 101, 101, 101, 101, 101, 70: 101, 101},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 249, 407},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 13: 401, 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 403, 103: 402},
		// 215
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 12: 98, 98, 35: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 51: 98, 98, 98, 60: 98, 98, 98, 98, 98, 98, 98, 98, 98, 70: 98, 98},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 12: 97, 97, 35: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 51: 97, 97, 97, 60: 97, 97, 97, 97, 97, 97, 97, 97, 97, 70: 97, 97},
		{11: 400},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 12: 96, 96, 35: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 51: 96, 96, 96, 60: 96, 96, 96, 96, 96, 96, 96, 96, 96, 70: 96, 96},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 12: 100, 100, 35: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 51: 100, 100, 100, 60: 100, 100, 100, 100, 100, 100, 100, 100, 100, 70: 100, 100},
		// 220
		{12: 405, 404},
		{10: 95, 12: 95, 95},
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 12: 99, 99, 35: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 51: 99, 99, 99, 60: 99, 99, 99, 99, 99, 99, 99, 99, 99, 70: 99, 99},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 406},
		{10: 94, 12: 94, 94},
		// 225
		{12: 271, 35: 408},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 12: 102, 102, 35: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 51: 102, 102, 102, 60: 102, 102, 102, 102, 102, 102, 102, 102, 102, 70: 102, 102},
		{12: 271, 410},
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 12: 108, 108, 35: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 51: 108, 108, 108, 60: 108, 108, 108, 108, 108, 108, 108, 108, 108, 70: 108, 108},
		{10: 131, 415, 131, 121: 425},
		// 230
		{11: 413},
		{9: 414},
		{10: 131, 415, 131, 121: 416},
		{36: 423},
		{10: 418, 12: 417},
		// 235
		{11: 419},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 12: 115, 115, 35: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 51: 115, 115, 115, 60: 115, 115, 115, 115, 115, 115, 115, 115, 115, 70: 115, 115},
		{36: 420},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 422, 84: 247, 107: 421},
		{10: 129, 12: 129},
		// 240
		{10: 39, 12: 39},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 338, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 422, 84: 247, 107: 424},
		{10: 130, 12: 130},
		{10: 426, 12: 417},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 12: 116, 116, 35: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 51: 116, 116, 116, 60: 116, 116, 116, 116, 116, 116, 116, 116, 116, 70: 116, 116},
		// 245
		{35: 441},
		{5: 429, 11: 430, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 50: 431, 55: 432},
		{35: 428},
		{9: 437},
		{9: 433},
		// 250
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 12: 119, 119, 35: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 51: 119, 119, 119, 60: 119, 119, 119, 119, 119, 119, 119, 119, 119, 70: 119, 119},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 10: 435, 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 403, 103: 434},
		{10: 436, 12: 405},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 12: 120, 120, 35: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 51: 120, 120, 120, 60: 120, 120, 120, 120, 120, 120, 120, 120, 120, 70: 120, 120},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 12: 121, 121, 35: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 51: 121, 121, 121, 60: 121, 121, 121, 121, 121, 121, 121, 121, 121, 70: 121, 121},
		// 255
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 10: 439, 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 403, 103: 438},
		{10: 440, 12: 405},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 12: 122, 122, 35: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 51: 122, 122, 122, 60: 122, 122, 122, 122, 122, 122, 122, 122, 122, 70: 122, 122},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 12: 123, 123, 35: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 51: 123, 123, 123, 60: 123, 123, 123, 123, 123, 123, 123, 123, 123, 70: 123, 123},
		{5: 442, 11: 443, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 50: 444, 54: 445},
		// 260
		{27: 427},
		{9: 450},
		{9: 446},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 12: 124, 124, 35: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 51: 124, 124, 124, 60: 124, 124, 124, 124, 124, 124, 124, 124, 124, 70: 124, 124},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 10: 448, 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 403, 103: 447},
		// 265
		{10: 449, 12: 405},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 12: 125, 125, 35: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 51: 125, 125, 125, 60: 125, 125, 125, 125, 125, 125, 125, 125, 125, 70: 125, 125},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 12: 126, 126, 35: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 51: 126, 126, 126, 60: 126, 126, 126, 126, 126, 126, 126, 126, 126, 70: 126, 126},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 10: 452, 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 403, 103: 451},
		{10: 453, 12: 405},
		// 270
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 12: 127, 127, 35: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 51: 127, 127, 127, 60: 127, 127, 127, 127, 127, 127, 127, 127, 127, 70: 127, 127},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 12: 128, 128, 35: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 51: 128, 128, 128, 60: 128, 128, 128, 128, 128, 128, 128, 128, 128, 70: 128, 128},
		{69: 160, 88: 160, 160, 160, 160, 160},
		{2: 163, 9: 163},
		{13: 463},
		// 275
		{12: 461, 159},
		{12: 158, 158},
		{1: 314, 5: 315, 11: 317, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 50: 316, 102: 460},
		{6: 156, 12: 156, 156},
		{2: 312, 11: 311, 100: 459, 310, 105: 462},
		// 280
		{12: 157, 157},
		{2: 162, 9: 162},
		{2: 165},
		{2: 312, 11: 311, 100: 459, 310, 105: 458, 118: 457, 466},
		{13: 467},
		// 285
		{11: 468},
		{2: 164},
		{6: 470},
		{69: 166, 88: 166, 166, 166, 166, 166},
		{6: 472},
		// 290
		{69: 167, 88: 167, 167, 167, 167, 167},
		{126: 474},
		{9: 476, 127: 475},
		{69: 172, 88: 172, 172, 172, 172, 172},
		{2: 312, 10: 477, 311, 100: 459, 310, 105: 479, 125: 478},
		// 295
		{6: 485},
		{2: 312, 10: 481, 311, 100: 459, 310, 105: 482},
		{6: 480},
		{2: 169, 10: 169, 169},
		{6: 484},
		// 300
		{6: 483},
		{2: 168, 10: 168, 168},
		{69: 170, 88: 170, 170, 170, 170, 170},
		{69: 171, 88: 171, 171, 171, 171, 171},
		{1: 314, 5: 315, 11: 317, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 50: 316, 102: 487},
		// 305
		{6: 488, 51: 489},
		{69: 174, 88: 174, 174, 174, 174, 174},
		{232, 233, 223, 234, 235, 214, 7: 230, 229, 11: 215, 14: 201, 202, 204, 205, 207, 208, 209, 206, 203, 211, 212, 213, 210, 219, 216, 217, 218, 221, 220, 222, 236, 50: 228, 54: 224, 225, 227, 226, 237, 231, 72: 238, 239, 240, 241, 242, 243, 244, 245, 81: 246, 248, 84: 247, 86: 322, 116: 490},
		{6: 491},
		{69: 173, 88: 173, 173, 173, 173, 173},
		// 310
		{69: 180, 88: 180, 180, 180, 180, 180},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 161

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 8:
		{
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				expr := WritePrimary(yyS[yypt-1].argument.Type, make([]byte, yyS[yypt-1].argument.TotalSize))
				exprOut := expr[0].Outputs[0]
				yyS[yypt-1].argument.Name = yyS[yypt-2].argument.Name
				yyS[yypt-1].argument.MemoryRead = MEM_DATA
				yyS[yypt-1].argument.MemoryWrite = MEM_DATA
				yyS[yypt-1].argument.Offset = exprOut.Offset
				yyS[yypt-1].argument.Package = exprOut.Package
				pkg.AddGlobal(yyS[yypt-1].argument)
			} else {
				panic(err)
			}
		}
	case 9:
		{
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				expr := WritePrimary(yyS[yypt-3].argument.Type, make([]byte, yyS[yypt-3].argument.Size))
				exprOut := expr[0].Outputs[0]
				yyS[yypt-3].argument.Name = yyS[yypt-4].argument.Name
				yyS[yypt-3].argument.MemoryRead = MEM_DATA
				yyS[yypt-3].argument.MemoryWrite = MEM_DATA
				yyS[yypt-3].argument.Offset = exprOut.Offset
				yyS[yypt-3].argument.Size = exprOut.Size
				yyS[yypt-3].argument.TotalSize = exprOut.TotalSize
				yyS[yypt-3].argument.Package = exprOut.Package
				pkg.AddGlobal(yyS[yypt-3].argument)
			} else {
				panic(err)
			}
		}
	case 10:
		{
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				strct := MakeStruct(yyS[yypt-2].tok)
				pkg.AddStruct(strct)

				var size int
				for _, fld := range yyS[yypt-0].arguments {
					strct.AddField(fld)
					size += fld.TotalSize
				}
				strct.Size = size
			} else {
				panic(err)
			}
		}
	case 11:
		{
			yyVAL.arguments = nil
		}
	case 12:
		{
			yyVAL.arguments = yyS[yypt-2].arguments
		}
	case 13:
		{
			yyVAL.arguments = []*CXArgument{yyS[yypt-1].argument}
		}
	case 14:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-1].argument)
		}
	case 15:
		{
			pkg := MakePackage(yyS[yypt-1].tok)
			PRGRM.AddPackage(pkg)
		}
	case 16:
		{
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				if _, err := pkg.GetImport(yyS[yypt-1].tok); err != nil {
					if imp, err := PRGRM.GetPackage(yyS[yypt-1].tok); err == nil {
						pkg.AddImport(imp)
					} else {
						panic(err)
					}
				}
			} else {
				panic(err)
			}
		}
	case 17:
		{
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				fn := MakeFunction(yyS[yypt-0].tok)
				pkg.AddFunction(fn)

				yyVAL.function = fn
			} else {
				panic(err)
			}
		}
	case 18:
		{
			if len(yyS[yypt-2].arguments) > 1 {
				panic("method has multiple receivers")
			}
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				fn := MakeFunction(yyS[yypt-0].tok)
				pkg.AddFunction(fn)

				fn.AddInput(yyS[yypt-2].arguments[0])

				yyVAL.function = fn
			} else {
				panic(err)
			}
		}
	case 19:
		{
			yyVAL.arguments = nil
		}
	case 20:
		{
			yyVAL.arguments = yyS[yypt-1].arguments
		}
	case 21:
		{
			FunctionDeclaration(yyS[yypt-2].function, yyS[yypt-1].arguments, nil, nil)
		}
	case 22:
		{
			FunctionDeclaration(yyS[yypt-3].function, yyS[yypt-2].arguments, yyS[yypt-1].arguments, nil)
		}
	case 24:
		{
			// if $1.IsArray {
			// 	$1.TotalSize = $1.Size * TotalLength($1.Lengths)
			// } else {
			// 	$1.TotalSize = $1.Size
			// }
			yyVAL.arguments = []*CXArgument{yyS[yypt-0].argument}
		}
	case 25:
		{
			// if $3.IsArray {
			// 	$3.TotalSize = $3.Size * TotalLength($3.Lengths)
			// } else {
			// 	$3.TotalSize = $3.Size
			// }
			// lastPar := $1[len($1) - 1]
			// $3.Offset = lastPar.Offset + lastPar.TotalSize
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-0].argument)
		}
	case 26:
		{
			yyS[yypt-0].argument.Name = yyS[yypt-1].argument.Name
			yyS[yypt-0].argument.Package = yyS[yypt-1].argument.Package
			// $2.MemoryType = MEM_STACK
			yyVAL.argument = yyS[yypt-0].argument
		}
	case 30:
		{
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				arg := MakeArgument("")
				arg.AddType(TypeNames[TYPE_UNDEFINED])
				arg.Name = yyS[yypt-0].tok
				arg.Package = pkg
				yyVAL.argument = arg
			} else {
				panic(err)
			}
		}
	case 31:
		{
			yyVAL.argument = yyS[yypt-1].argument
		}
	case 32:
		{
			yyS[yypt-0].argument.DeclarationSpecifiers = append(yyS[yypt-0].argument.DeclarationSpecifiers, DECL_POINTER)
			if !yyS[yypt-0].argument.IsPointer {
				yyS[yypt-0].argument.IsPointer = true
				// $2.MemoryRead = MEM_HEAP
				yyS[yypt-0].argument.PointeeSize = yyS[yypt-0].argument.Size
				yyS[yypt-0].argument.Size = TYPE_POINTER_SIZE
				yyS[yypt-0].argument.TotalSize = TYPE_POINTER_SIZE
				yyS[yypt-0].argument.IndirectionLevels++
			} else {
				pointer := yyS[yypt-0].argument

				for c := yyS[yypt-0].argument.IndirectionLevels - 1; c > 0; c-- {
					pointer = pointer.Pointee
					pointer.IndirectionLevels = c
					pointer.IsPointer = true
				}

				pointee := MakeArgument("")
				pointee.AddType(TypeNames[pointer.Type])
				// pointee.Size = pointer.Size
				// pointee.TotalSize = pointer.TotalSize
				pointee.IsPointer = true

				yyS[yypt-0].argument.IndirectionLevels++

				// pointer.Type = TYPE_POINTER
				pointer.Size = TYPE_POINTER_SIZE
				pointer.TotalSize = TYPE_POINTER_SIZE
				pointer.Pointee = pointee
			}

			yyVAL.argument = yyS[yypt-0].argument
		}
	case 33:
		{
			yyS[yypt-0].argument.DeclarationSpecifiers = append(yyS[yypt-0].argument.DeclarationSpecifiers, DECL_SLICE)
			arg := yyS[yypt-0].argument
			arg.IsArray = true
			arg.Lengths = append([]int{SLICE_SIZE}, arg.Lengths...)
			arg.TotalSize = arg.Size * TotalLength(arg.Lengths)
			yyVAL.argument = arg
		}
	case 34:
		{
			yyS[yypt-0].argument.DeclarationSpecifiers = append(yyS[yypt-0].argument.DeclarationSpecifiers, DECL_ARRAY)
			arg := yyS[yypt-0].argument
			arg.IsArray = true
			arg.Lengths = append([]int{int(yyS[yypt-2].i32)}, arg.Lengths...)
			arg.TotalSize = arg.Size * TotalLength(arg.Lengths)
			// arg.Size = GetArgSize($4.Type)
			yyVAL.argument = arg
		}
	case 35:
		{
			arg := MakeArgument("")
			arg.AddType(TypeNames[yyS[yypt-0].i])
			arg.DeclarationSpecifiers = append(arg.DeclarationSpecifiers, DECL_BASIC)
			arg.Type = yyS[yypt-0].i
			arg.Size = GetArgSize(yyS[yypt-0].i)
			arg.TotalSize = arg.Size
			yyVAL.argument = arg
		}
	case 36:
		{
			// custom type in the current package
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				fmt.Println("huh")
				if strct, err := PRGRM.GetStruct(yyS[yypt-0].tok, pkg.Name); err == nil {
					arg := MakeArgument("")
					arg.AddType(TypeNames[TYPE_CUSTOM])
					arg.DeclarationSpecifiers = append(arg.DeclarationSpecifiers, DECL_STRUCT)
					arg.CustomType = strct
					arg.Size = strct.Size
					arg.TotalSize = strct.Size

					yyVAL.argument = arg
				} else {
					panic("type '" + yyS[yypt-0].tok + "' does not exist")
				}
			} else {
				panic(err)
			}
		}
	case 37:
		{
			// custom type in an imported package
			if pkg, err := PRGRM.GetCurrentPackage(); err == nil {
				if imp, err := pkg.GetImport(yyS[yypt-2].tok); err == nil {
					if strct, err := PRGRM.GetStruct(yyS[yypt-0].tok, imp.Name); err == nil {
						arg := MakeArgument("")
						arg.AddType(TypeNames[TYPE_CUSTOM])
						arg.CustomType = strct
						arg.Size = strct.Size
						arg.TotalSize = strct.Size
						arg.DeclarationSpecifiers = append(arg.DeclarationSpecifiers, DECL_STRUCT)

						yyVAL.argument = arg
					} else {
						panic("type '" + yyS[yypt-2].tok + "' does not exist")
					}
				} else {
					panic(err)
				}
			} else {
				panic(err)
			}

			// if pkg, err := PRGRM.GetPackage($1); err == nil {
			// 	if strct, err := PRGRM.GetStruct($3, pkg.Name); err == nil {
			// 		arg := MakeArgument(TYPE_CUSTOM)
			// 		arg.CustomType = strct
			// 		arg.Size = strct.Size
			// 		arg.TotalSize = strct.Size

			// 		$$ = arg
			// 	} else {
			// 		panic("type '" + $1 + "' does not exist")
			// 	}
			// } else {
			// 	panic(err)
			// }
		}
	case 38:
		{
			yyVAL.i = TYPE_BOOL
		}
	case 39:
		{
			yyVAL.i = TYPE_BYTE
		}
	case 40:
		{
			yyVAL.i = TYPE_STR
		}
	case 41:
		{
			yyVAL.i = TYPE_F32
		}
	case 42:
		{
			yyVAL.i = TYPE_F64
		}
	case 43:
		{
			yyVAL.i = TYPE_I8
		}
	case 44:
		{
			yyVAL.i = TYPE_I16
		}
	case 45:
		{
			yyVAL.i = TYPE_I32
		}
	case 46:
		{
			yyVAL.i = TYPE_I64
		}
	case 47:
		{
			yyVAL.i = TYPE_UI8
		}
	case 48:
		{
			yyVAL.i = TYPE_UI16
		}
	case 49:
		{
			yyVAL.i = TYPE_UI32
		}
	case 50:
		{
			yyVAL.i = TYPE_UI64
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
