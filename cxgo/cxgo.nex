<      {
}
/(\r\n|\r|\n)/ {
	lval.line++
	token := f(NEWLINE)
	if token != NEWLINE {
		return token
	}
}
/(\t| )/ {
	/* skip blanks and tabs */
}
/(\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\/)|\/\/[^\n\r]*/ {
	/* skip comments */
	lval.line = lval.line + countNewLines([]byte(yylex.Text()))
}
/bool/                    { lval.tok = yylex.Text(); return f(BOOL) }
/byte/                    { lval.tok = yylex.Text(); return f(BYTE) }
/break/                   { return f(BREAK) }
/case/                    { return f(CASE) }
/const/                   { return f(CONST) }
/continue/                { return f(CONTINUE) }
/default/                 { return f(DEFAULT) }
/else/                    { return f(ELSE) }
/enum/                    { return f(ENUM) }
/f32/                     { lval.tok = yylex.Text(); return f(F32) }
/f64/                     { lval.tok = yylex.Text(); return f(F64) }
/for/                     { return f(FOR)}
/goto/                    { return f(GOTO)}
/i8/                      { lval.tok = yylex.Text(); return f(I8)}
/i16/                     { lval.tok = yylex.Text(); return f(I16)}
/i32/                     { lval.tok = yylex.Text(); return f(I32)}
/i64/                     { lval.tok = yylex.Text(); return f(I64)}
/if/                      { return f(IF)}
/new/                     { return f(NEW)}
/return/                  { return f(RETURN)}
/str/                     { return f(STR)}
/struct/                  { return f(STRUCT)}
/switch/                  { return f(SWITCH)}
/type/                    { return f(TYPE)}
/ui8/                     { lval.tok = yylex.Text(); return f(UI8)}
/ui16/                    { lval.tok = yylex.Text(); return f(UI16)}
/ui32/                    { lval.tok = yylex.Text(); return f(UI32)}
/ui64/                    { lval.tok = yylex.Text(); return f(UI64)}
/union/                   { return f(UNION) }
/&/                       { lval.tok = yylex.Text(); return f(REF_OP) }
/\+/                      { lval.tok = yylex.Text(); return f(ADD_OP) }
/-/                       { lval.tok = yylex.Text(); return f(SUB_OP) }
/\*/                      { lval.tok = yylex.Text(); return f(MUL_OP) }
/\//                      { lval.tok = yylex.Text(); return f(DIV_OP) }
/%/                       { lval.tok = yylex.Text(); return f(MOD_OP) }
/>/                       { return f(GT_OP) }
/</                       { return f(LT_OP) }
/>=/                      { return f(GTEQ_OP) }
/<=/                      { return f(LTEQ_OP) }
/>>=/                     { return f(RIGHT_ASSIGN)}
/<<=/                     { return f(LEFT_ASSIGN)}
/\+=/                     { return f(ADD_ASSIGN)}
/-=/                      { return f(SUB_ASSIGN)}
/\*=/                     { return f(MUL_ASSIGN)}
/\/=/                     { return f(DIV_ASSIGN)}
/%=/                      { return f(MOD_ASSIGN)}
/&=/                      { return f(AND_ASSIGN)}
/\^=/                     { return f(XOR_ASSIGN)}
/\|=/                     { return f(OR_ASSIGN)}
/>>/                      { return f(RIGHT_OP)}
/<</                      { return f(LEFT_OP)}
/\+\+/                    { return f(INC_OP)}
/--/                      { return f(DEC_OP)}
/&&/                      { return f(AND_OP)}
/\|\|/                    { return f(OR_OP)}
/<=/                      { return f(LE_OP)}
/>=/                      { return f(GE_OP)}
/==/                      { return f(EQ_OP)}
/\|/                      { return f(BITOR_OP)}
/&\^/                     { return f(BITCLEAR_OP)}
/\^/                      { return f(BITXOR_OP)}
/!=/                      { return f(NE_OP)}
/;/                       { return f(SEMICOLON) }
/:/                       { return f(COLON) }
/!/                       { lval.tok = yylex.Text(); return f(NEG_OP) }
/\[/                      { return f(LBRACK) }
/\]/                      { return f(RBRACK) }
/\(/                      { return f(LPAREN) }
/\)/                      { return f(RPAREN) }
/\{/                      { return f(LBRACE) }
/\}/                      { return f(RBRACE) }
/\./                      { return f(PERIOD) }
/,/                       { return f(COMMA) }
/=/                       { return f(ASSIGN) }
/:=/                      { return f(CASSIGN) }
/(:dl)|(:dLocals)/        { return f(DSTATE)     }
/(:ds)|(:dStack)/         { return f(DSTACK)     }
/(:dProgram)|(:dp)/       { return f(DPROGRAM)   }
/:package/                {
	lval.line = 0
	// yylex.line = 0
	yylex.stack[len(yylex.stack) - 1].line = 0
	// fmt.Printf("%+v\n", )
	// fmt.Printf("%+v\n", yylex)
	return f(SPACKAGE)
}
/:struct/                 { return f(SSTRUCT)    }
/:func/                   { return f(SFUNC)      }
/:rem/                    { return f(REM)        }
/:step/                   { return f(STEP)       }
/:tStep/                  { return f(TSTEP)      }
/:pStep/                  { return f(PSTEP)      }
/:aff/                    { return f(AFF)        }
/package/                 { return f(PACKAGE)    }
/type/                    { return f(TYPSTRUCT)  }
/struct/                  { return f(STRUCT)     }
/return/                  { return f(RETURN)     }
/goto/                    { return f(GOTO)       }
/if/                      { return f(IF)         }
/for/                     { return f(FOR)        }
/func/                    { return f(FUNC)       }
/clauses/                 { return f(CLAUSES)    }
/expr/                    { return f(EXPR)       }
/def/                     { return f(DEF)        }
/field/                   { return f(FIELD)      }
/input/                   { return f(INPUT)      }
/output/                  { return f(OUTPUT)     }
/import/                  { return f(IMPORT)     }
/var/                     { return f(VAR)        }
/"([^"]*)"/ { /* " */
	tokVal := yylex.Text()
	tokVal = strings.TrimPrefix(tokVal, "\"")
	tokVal = strings.TrimSuffix(tokVal, "\"")
	lval.tok = tokVal
	lval.line = lval.line + countNewLines([]byte(lval.tok))
	return f(STRING_LITERAL)
}
/true/ {
	lval.bool = true
	return f(BOOLEAN_LITERAL)
}
/false/ {
	lval.bool = false
	return f(BOOLEAN_LITERAL)
}
/-?[0-9]+B/ {
	result ,_ := strconv.ParseInt(yylex.Text()[:len(yylex.Text()) - 1], 10, 8)
	lval.byt = byte(result)
	return f(BYTE_LITERAL)
}
/-?[0-9]+L/ {
	result ,_ := strconv.ParseInt(yylex.Text()[:len(yylex.Text()) - 1], 10, 64)
	lval.i64 = int64(result)
	return f(LONG_LITERAL)
}
/-?[0-9]+\.[0-9]*D/ {
	result ,_ := strconv.ParseFloat(yylex.Text()[:len(yylex.Text()) - 1], 64)
	lval.f64 = float64(result)
	return f(DOUBLE_LITERAL)
}
/-?[0-9]+/ {
	result ,_ := strconv.Atoi(yylex.Text())
	lval.i32 = int32(result)
	return f(INT_LITERAL)
}
/-?[0-9]+\.[0-9]*/ {
	result ,_ := strconv.ParseFloat(yylex.Text(), 32)
	lval.f32 = float32(result)
	return f(FLOAT_LITERAL)
}
/[_a-zA-Z][_a-zA-Z0-9]*/ {
	lval.tok = yylex.Text()
	return f(IDENTIFIER)
}
>      {
}
//
package main
import (
	"os"
	"os/user"
	"os/exec"
	"fmt"
	"bytes"
	"time"
	"io/ioutil"
	"strconv"
	"encoding/json"

	"regexp"
	
	// "flag"

	"path/filepath"

	"net"
	"net/http"
	
	"runtime"
	//"runtime/debug"

	//"github.com/skycoin/viscript/signal"
	
	// "github.com/skycoin/skycoin/src/cipher/encoder"
	. "github.com/skycoin/cx/cx"
	. "github.com/skycoin/cx/cxgo/actions"
	"github.com/skycoin/cx/cxgo/cxgo0"
	// "github.com/skycoin/cx/src/interpreted"
)

const VERSION = "0.5.6"

var currentFileName string
var insert bool
// var PRGRM *CXProgram

func f (token int) int {
	if insert && token == NEWLINE {
		insert = false
		return SEMICOLON
	} else {
		switch token {
			case IDENTIFIER,
			
			BOOL, BYTE, STR,
			I8, I16, I32, I64,
			UI8, UI16, UI32, UI64,
			F32, F64,
			
			BOOLEAN_LITERAL, BYTE_LITERAL, STRING_LITERAL,
			INT_LITERAL, FLOAT_LITERAL, DOUBLE_LITERAL, LONG_LITERAL,
			RETURN,
			
			RPAREN, RBRACE, RBRACK:
			insert = true
		default: insert = false
		}
		return token
	}
}

func countNewLines (s []byte) int {
	count := 0
	for i := 0; i < len(s); i++ {
		if s[i] == '\n' {
			count++
		}
	}
	return count
}

func readline (fi *bufio.Reader) (string, bool) {
	//s, err := fi.ReadString(';')
	s, err := fi.ReadString('\n')
	
	if err != nil {
		return "", false
	}
	return s, true
}

func unsafeEval (code string) (out string) {
	var lexer *Lexer
	defer func() {
		if r := recover(); r != nil {
			out = fmt.Sprintf("%v", r)
			lexer.Stop()
		}  
	}()
	
	// storing strings sent to standard output
	old := os.Stdout
	r, w, _ := os.Pipe()
	os.Stdout = w
	
	LineNo = 0
	
	b := bytes.NewBufferString(code)
	lexer = NewLexer(b)
	yyParse(lexer)

	if err := PRGRM.RunCompiled(); err != nil {
		PRGRM = MakeProgram(1024, 1024, 1024)
		return fmt.Sprintf("%s", err)
	}

	outC := make(chan string)
	go func() {
		var buf bytes.Buffer
		io.Copy(&buf, r)
		outC <- buf.String()
	}()
	
	w.Close()
	os.Stdout = old // restoring the real stdout
	out = <-outC

	PRGRM = MakeProgram(1024, 1024, 1024)
	return out
}

func Eval (code string) string {
	runtime.GOMAXPROCS(2)
	ch := make(chan string, 1)

	var result string
	
	go func() {
		result = unsafeEval(code)
		ch <- result
	}()

	timer := time.NewTimer(20 * time.Second)
	defer timer.Stop()

	select {
	case <-ch:
		return result
	case <-timer.C:
		PRGRM = MakeProgram(1024, 1024, 1024)
		return "Timed out."
	}
}

type SourceCode struct {
	Code string
}

func ObjectExplorer () {
	host := ":5337"

	mux := http.NewServeMux()
	
	mux.Handle("/", http.FileServer(http.Dir("./object-explorer")))
	
	// mux.HandleFunc("/get-objects", func(w http.ResponseWriter, r *http.Request) {
	// 	defer r.Body.Close()
	// 	var b []byte
	// 	var err error
	// 	if b, err = ioutil.ReadAll(r.Body); err != nil {
	// 		http.Error(w, err.Error(), 500)
	// 		return
	// 	}
		
	// 	var source SourceCode
	// 	if err := json.Unmarshal(b, &source); err != nil {
	// 		http.Error(w, err.Error(), 500)
	// 		return
	// 	}

	// 	if err := r.ParseForm(); err == nil {
	// 		fmt.Fprintf(w, "%s", Eval(source.Code))
	// 	}
	// })

	if listener, err := net.Listen("tcp", host); err == nil {
		fmt.Println("Starting CX web service on http://127.0.0.1:5337/")
		http.Serve(listener, mux)
	}
}

func ServiceMode () {
	host := ":5336"

	mux := http.NewServeMux()
	
	mux.Handle("/", http.FileServer(http.Dir("./dist")))
	
	mux.HandleFunc("/eval", func(w http.ResponseWriter, r *http.Request) {
		defer r.Body.Close()
		var b []byte
		var err error
		if b, err = ioutil.ReadAll(r.Body); err != nil {
			http.Error(w, err.Error(), 500)
			return
		}
		
		var source SourceCode
		if err := json.Unmarshal(b, &source); err != nil {
			http.Error(w, err.Error(), 500)
			return
		}

		if err := r.ParseForm(); err == nil {
			fmt.Fprintf(w, "%s", Eval(source.Code))
		}
	})

	if listener, err := net.Listen("tcp", host); err == nil {
		fmt.Println("Starting CX web service on http://127.0.0.1:5336/")
		http.Serve(listener, mux)
	}
}

func parseFile (fileName string) {
	sourceCode, err := os.Open(fileName)
	if err != nil {
		panic(fmt.Sprintf("Couldn't read file."))
	}
	yyParse(NewLexer(sourceCode))
}

func help () {
	fmt.Printf(`Usage: cx [options] [source-files]

CX options:
-b, --base                        Generate a "out.cx.go" file with the transcompiled CX Base source code.
-c, --compile                     Generate a "out" executable file of the program.
-co, --compile-output FILENAME    Specifies the filename for the generated executable.
-h, --help                        Prints this message.
-n, --new                         Creates a new project located at $CXPATH/src
-r, --repl                        Loads source files into memory and starts a read-eval-print loop.
-w, --web                         Start CX as a web service.

Signal options:
-signal-client                   Run signal client
-signal-client-id UINT           Id of signal client (default 1)
-signal-server-address STRING    Address of signal server (default "localhost:7999")

Notes:
* Options --compile and --repl are mutually exclusive.
* Option --web makes every other flag to be ignored.
`)
}

func (yylex Lexer) Error (e string) {
	if InREPL {
		fmt.Printf("syntax error: %s\n", e)
	} else {
		fmt.Printf("%s:%d: syntax error: %s\n", currentFileName, yylex.Line() + 1, e)
	}
	
	yylex.Stop()
}

func getWorkingDirectory (file string) string {
	var c int = len(file) - 1
	for ; c > 0; c-- {
		if file[c - 1] == os.PathSeparator {
			break
		}
	}
	return file[:c]
}

func repl () {
	fmt.Println("CX", VERSION)
	fmt.Println("More information about CX is available at http://cx.skycoin.net/ and https://github.com/skycoin/cx/")

	InREPL = true

	fi := bufio.NewReader(os.NewFile(0, "stdin"))
	
	for {
		var inp string
		var ok bool

		fmt.Println()

		if ReplTargetMod != "" {
			fmt.Println(fmt.Sprintf(":package %s {...", ReplTargetMod))
			fmt.Printf("\t* ")
		} else if ReplTargetFn != "" {
			fmt.Println(fmt.Sprintf(":func %s {...", ReplTargetFn))
			fmt.Printf("\t* ")
		} else if ReplTargetStrct != "" {
			fmt.Println(fmt.Sprintf(":struct %s {...", ReplTargetStrct))
			fmt.Printf("\t* ")
		} else {
			fmt.Printf("* ")
		}
		
		if inp, ok = readline(fi); ok {
			if ReplTargetFn != "" {
				inp = fmt.Sprintf(":func %s {\n%s\n}\n", ReplTargetFn, inp)
			}
			if ReplTargetMod != "" {
				inp = fmt.Sprintf(":package %s {%s}", ReplTargetMod, inp)
			}
			if ReplTargetStrct != "" {
				inp = fmt.Sprintf(":struct %s {%s}", ReplTargetStrct, inp)
			}


			// var numExprs int
			// var currFn string
			// if fn, err := PRGRM.GetCurrentFunction(); err == nil {
			// 	currFn = fn.Name
			// 	numExprs = len(fn.Expressions)
			// }
			
			b := bytes.NewBufferString(inp)

			yyParse(NewLexer(b))

			// PRGRM.PrintProgram()

			// var numExprsAdded int
			// if fn, err := PRGRM.GetCurrentFunction(); err == nil {
			// 	numExprsAdded = len(fn.Expressions) - numExprs
			// }

			// if numExprsAdded > 0 && currFn == MAIN_FUNC {
			// 	if fn, err := PRGRM.GetCurrentFunction(); err == nil {
			// 		for true {
			// 			PRGRM.RunInterpreted(dStack, 1)
						
			// 			if len(PRGRM.CallStack) == 1 && PRGRM.CallStack[0].Line == len(fn.Expressions) {
			// 				break
			// 			}
			// 		}
			// 	}
			// }
		} else {
			if ReplTargetFn != "" {
				ReplTargetFn = ""
				fmt.Println()
				continue
			}

			if ReplTargetStrct != "" {
				ReplTargetStrct = ""
				fmt.Println()
				continue
			}

			if ReplTargetMod != "" {
				ReplTargetMod = ""
				fmt.Println()
				continue
			}

			fmt.Printf("\nBye!\n")
			break
		}
	}
}

func initNewProject () {
	var name string
	
	reader := bufio.NewReader(os.Stdin)
	fmt.Print("Name of the project: ")
	name, _ = reader.ReadString('\n')

	fmt.Printf("Creating project %s%s/", SRCPATH, name)

	os.MkdirAll(fmt.Sprintf("%s%s", SRCPATH, name[:len(name) - 1]), 0751)
}

func checkCXPathSet () {
	if os.Getenv("CXPATH") == "" {
		usr, err := user.Current()
		if err != nil { 
			panic(err)
		}

		CXPATH = usr.HomeDir + "/cx/"
		BINPATH = CXPATH + "bin/"
		PKGPATH = CXPATH + "pkg/"
		SRCPATH = CXPATH + "src/"
	}
}

func main () {
	checkCXPathSet()
	
	runtime.LockOSThread()
	runtime.GOMAXPROCS(2)

	args := os.Args[1:]
	var sourceCode []*os.File
	var fileNames []string

	if len(args) == 0 {
		ReplMode = true
	}

	flagMode := false
	newProject := false
	var compileOutput string = "o"
	for i, arg := range args {
		if arg == "--version" || arg == "-v" {
			fmt.Println("CX version", VERSION)
			return
		}
		if arg == "--new" || arg == "-n" {
			flagMode = false
			newProject = true
		}
		if arg == "--web" || arg == "-w" {
			WebMode = true
			flagMode = true
			continue
		}
		if arg == "--repl" || arg == "-r" {
			ReplMode = true
			flagMode = true
			continue
		}
		if arg == "--base" || arg == "-b" {
			BaseOutput = true
			flagMode = true
			continue
		}
		if arg == "--interpret" || arg == "-i" {
			InterpretMode = true
			flagMode = true
			continue
		}
		if arg == "--compile" || arg == "-c" {
			CompileMode = true
			BaseOutput = true
			flagMode = true
			continue
		}
		if arg == "--compile-output" || arg == "-co" {
			compileOutput = args[i+1]
			continue
		}
		if arg == "--help" || arg == "-h" {
			HelpMode = true
			flagMode = true
			continue
		}
		// viscript options
		if arg == "-signal-client" || arg == "-signal-client-id" || arg == "-signal-server-address" {
			continue
		}
		if i > 0 && (args[i-1] == "-signal-client-id" || args[i-1] == "-signal-server-address") {
			continue
		}
		if newProject {
			initNewProject()
			return
		}
		if !flagMode {

			fi, err := os.Stat(arg)
			_ = err

			if err != nil {
				panic(err)
			}
	
			switch mode := fi.Mode(); {
			case mode.IsDir():
				var fileList []string

				err := filepath.Walk(arg, func(path string, f os.FileInfo, err error) error {
					fileList = append(fileList, path)
					return nil
				})

				if err != nil {
					panic(err)
				}

				for _, path := range fileList {
					file, err := os.Open(path)
					
					if err != nil {
						panic(err)
					}

					fiName := file.Name()
					fiNameLen := len(fiName)
					
					if fiNameLen > 2 && fiName[fiNameLen - 2:] == "cx" {
						// only loading .cx files
						sourceCode = append(sourceCode, file)
						fileNames = append(fileNames, fiName)
					}
				}
			case mode.IsRegular():
				file, err := os.Open(arg)
				
				if err != nil {
					panic(err)
				}
				
				sourceCode = append(sourceCode, file)
			}
		}
	}

	// if InterpretMode {
	// 	PRGRM = MakeProgram(CALLSTACK_SIZE, STACK_SIZE, INIT_HEAP_SIZE)
	// } else {
	// 	PRGRM = MakeProgram(CALLSTACK_SIZE, STACK_SIZE, INIT_HEAP_SIZE)
	// }

	PRGRM = MakeProgram(CALLSTACK_SIZE, STACK_SIZE, INIT_HEAP_SIZE)

	if HelpMode {
		help()
		return
	}

	if WebMode {
		// ServiceMode()
		ObjectExplorer()
		return
	}

	if CompileMode && ReplMode {
		fmt.Println("Error: Options --compile and --repl are mutually exclusive.")
		return
	}

	cxgo0.PRGRM0 = PRGRM

	sourceCodeCopy := make([]string, len(sourceCode))
	for i, source := range sourceCode {
		tmp := bytes.NewBuffer(nil)
		io.Copy(tmp, source)
		sourceCodeCopy[i] = string(tmp.Bytes())
	}

	if len(sourceCode) > 0 {
		allSC := strings.Join(sourceCodeCopy, "")

		re := regexp.MustCompile("(package)\\s([.\\[\\]a-zA-Z0-9_]+)")

		// the actual pass 0, but so small I'm not going to count it as another pass
		for _, match := range re.FindAllStringSubmatch(allSC, -1) {
			pkg := MakePackage(match[len(match)-1])
			cxgo0.PRGRM0.AddPackage(pkg)
		}
		
		// cxgo0.Parse(allSC)
		for i, source := range sourceCodeCopy {
			if len(fileNames) > 0 {
				cxgo0.CurrentFileName = fileNames[i]
			}
			cxgo0.Parse(source)
		}
	}

	PRGRM = cxgo0.PRGRM0
	// DataOffset = cxgo0.dataOffset

	// parsing all source code files
	for _, source := range sourceCodeCopy {
		b := bytes.NewBufferString(source)
		// fmt.Printf("%+v\n", lex)
		yyParse(NewLexer(b))
	}

	if len(sourceCode) == 0 {
		mod := MakePackage(MAIN_PKG)
		PRGRM.AddPackage(mod)
		fn := MakeFunction("main")
		mod.AddFunction(fn)

		ReplTargetFn = "main"
	}

	// adding *init function that initializes all the global variables
	if main, err := PRGRM.GetPackage(MAIN_PKG); err == nil {
		initFn := MakeFunction(SYS_INIT_FUNC)
		main.AddFunction(initFn)

		// if mainFn, err := PRGRM.GetFunction(MAIN_FUNC, MAIN_PKG); err == nil {
		// 	// expr := MakeExpression(mainFn)
		// 	// expr.Package = main
		// 	// if we receive arguments from the OS, we'll add them here
		// 	// sysInitExprs = append(sysInitExprs, expr)
		// } else {
		// 	panic(err)
		// }

		FunctionDeclaration(initFn, nil, nil, SysInitExprs)
		PRGRM.SelectFunction(MAIN_FUNC)
	} else {
		panic(err)
	}
	
	LineNo = 0

	if ReplMode || len(sourceCode) == 0 {
		repl()
	} else if !CompileMode && !BaseOutput && len(sourceCode) > 0 {
		if InterpretMode {
			if err := PRGRM.RunInterpreted(false, -1); err != nil {
				fmt.Println(err)
				repl()
			}
		} else {
			if err := PRGRM.RunCompiled(); err != nil {
				fmt.Println(err)
				// repl()
			}
		}
	}
	
	if BaseOutput {
		//PRGRM.Compile(true)
	}
	if CompileMode {
		baseFilename := fmt.Sprintf("%s.go", compileOutput)
		build := exec.Command("go", "build", baseFilename)
		build.Run()
		removeBase := exec.Command("rm", baseFilename)
		removeBase.Run()
	}
}
