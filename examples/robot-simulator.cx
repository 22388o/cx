package main

var goNorth str = "going north."
var goSouth str = "going south."
var goWest str = "going west."
var goEast str = "going east."

func robotAct (row i32, col i32, action str) (row i32, col i32) {
	printStr(action)
	if eqStr(action, "going north.") {
		row = addI32(row, -1)
	}
	if eqStr(action, "going south.") {
		row = addI32(row, 1)
	}
	if eqStr(action, "going east.") {
		col = addI32(col, 1)
	}
	if eqStr(action, "going west.") {
		col = addI32(col, -1)
	}
}

func robot (row i32, col i32) (row i32, col i32) {
	//remArg("robot")
	exprAff("goNorth|goSouth|goWest|goEast")
	row, col = robotAct(row, col, "")
}

func map2Dto1D (r i32, c i32, w i32) (i i32) {
	i = addI32(mulI32(w, r), c)
}

func map1Dto2D (i i32, w i32) (r i32, c i32) {
	r = divI32(i, W)
	c = modI32(i, W)
}

func robotObjects (row i32, col i32, width i32, wallMap []bool, wormholeMap []bool) () {
	remObjects()
	if readBoolA(wallMap, map2Dto1D(addI32(row, -1), col, width)) {
		addObject("northWall")
	}
	if readBoolA(wallMap, map2Dto1D(addI32(row, 1), col, width)) {
		addObject("southWall")
	}
	if readBoolA(wallMap, map2Dto1D(row, addI32(col, 1), width)) {
		addObject("eastWall")
	}
	if readBoolA(wallMap, map2Dto1D(row, addI32(col, -1), width)) {
		addObject("westWall")
	}

	if readBoolA(wormholeMap, map2Dto1D(addI32(row, -1), col, width)) {
		addObject("northWormhole")
	}
	if readBoolA(wormholeMap, map2Dto1D(addI32(row, 1), col, width)) {
		addObject("southWormhole")
	}
	if readBoolA(wormholeMap, map2Dto1D(row, addI32(col, 1), width)) {
		addObject("eastWormhole")
	}
	if readBoolA(wormholeMap, map2Dto1D(row, addI32(col, -1), width)) {
		addObject("westWormhole")
	}
}

func main () (out str) {

	setClauses("
          aff(robotAct, goNorth, X, R) :- X = northWall, R = false.
	  aff(robotAct, goSouth, X, R) :- X = southWall, R = false.
	  aff(robotAct, goWest, X, R) :- X = westWall, R = false.
	  aff(robotAct, goEast, X, R) :- X = eastWall, R = false.

	  aff(robotAct, goNorth, X, R) :- X = northWormhole, R = true.
	  aff(robotAct, goSouth, X, R) :- X = southWormhole, R = true.
	  aff(robotAct, goWest, X, R) :- X = westWormhole, R = true.
	  aff(robotAct, goEast, X, R) :- X = eastWormhole, R = true.
        ")

	setQuery("aff(%s, %s, %s, R).")

	var wallMap []bool = []bool{
		true, true,  true,  true,  true,
		true, false, true, false, true,
		true, false, true, false, true,
		true, false, false, false, true,
		true, true,  true,  true,  true}

	var wormholeMap []bool = []bool{
		false, false, false, false, false,
		false, false, false, false, false,
		false, false, false, false, false,
		false, false, false, false, false,
		false, false, false, false, false}

	var width i32 = 5
	var row i32 = 1
	var col i32 = 1

	var counter i32
	for ltI32(counter, 6) {
		wallMap = writeBoolA(wallMap, map2Dto1D(row, col, width), true)
		wormholeMap = writeBoolA(wormholeMap, map2Dto1D(row, col, width), false)
		robotObjects(row, col, width, wallMap, wormholeMap)
		row, col := robot(row, col)
		counter = addI32(counter, 1)
	}
	
	printStr("done.")
}
