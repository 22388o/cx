package main

func realFn (n f64) (out f64) {
	out = n * n + n
}

func simFn (n f64) (out f64) {}

func main () (out f64) {
	var numPoints i32
	var inps []f64
	var outs []f64
	
	var c i32
	
	for c = 0; c < numPoints; c++ {
		inps = append(inps, i32.f64(c) - 10.0D)
	}

	for c = 0; c < numPoints; c++ {
		outs = append(outs, realFn(inps[c]))
	}
	
	var target aff
	target = ->{pkg(main) fn(realFn)}
	
	var fnBag aff
	fnBag = ->{fn(f64.add) fn(f64.mul) fn(f64.sub)}
	
	evolve(target, fnBag, inps, outs, 5, 100, 0.1D)

	str.print("Testing evolved solution")
	for c = 0; c < numPoints; c++ {
		printf("%f\n", simFn(inps[c]))
	}
}
