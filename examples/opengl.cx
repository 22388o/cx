package main

import "gl"
import "glfw"

var width i32 = 500
var height i32 = 500

var square []f32 = []f32{
	-0.5, 0.5, 0.0,
	-0.5, -0.5, 0.0,
	0.5, -0.5, 0.0,

	-0.5, 0.5, 0.0,
	0.5, 0.5, 0.0,
	0.5, -0.5, 0.0
}

var triBL []f32 = []f32{
	-0.5, 0.5, 0.0,
	-0.5, -0.5, 0.0,
	0.5, -0.5, 0.0
}

var triTR []f32 = []f32{
	-0.5, 0.5, 0.0,
	0.5, 0.5, 0.0,
	0.5, -0.5, 0.0
}

var triTL []f32 = []f32{
	-0.5, 0.5, 0.0,
	0.5, 0.5, 0.0,
	-0.5, -0.5, 0.0
}

var triBR []f32 = []f32{
	-0.5, -0.5, 0.0,
	0.5, -0.5, 0.0,
	0.5, 0.5, 0.0
}

// var testing []f32 = []f32{
// 	// f 17 	19 	20
// 	0, 0.5, 0.5,
// 	-0.25, 0.432999992370605, 0.5,
// 	-0.432999992370605, 0.25, 0.5,
// 	// f 17 	20 	21
// 	0, 0.5, 0.5,
// 	-0.432999992370605, 0.25, 0.5,
// 	-0.5, 0, 0.5,
// 	// f 17 	21 	22
// 	0, 0.5, 0.5,
// 	-0.5, 0, 0.5,
// 	-0.432999992370605, -0.25, 0.5,
// 	// f 17 	22 	23
// 	0, 0.5, 0.5,
// 	-0.432999992370605, -0.25, 0.5,
// 	-0.25, -0.432999992370605, 0.5,
// 	// f 17 	23 	24
// 	0, 0.5, 0.5,
// 	-0.25, -0.432999992370605, 0.5,
// 	0, -0.5, 0.5,
// 	// f 17 	24 	4
// 	0, 0.5, 0.5,
// 	0, -0.5, 0.5,
// 	0.25, -0.432999992370605, 0.5,
// 	// f 17 	4 	3
// 	0, 0.5, 0.5,
// 	0.25, -0.432999992370605, 0.5,
// 	0.432999992370605, -0.25, 0.5,
// 	// f 17 	3 	16
// 	0, 0.5, 0.5,
// 	0.432999992370605, -0.25, 0.5,
// 	0.5, 0, 0.5,
// 	// f 17 	16 	15
// 	0, 0.5, 0.5,
// 	0.5, 0, 0.5,
// 	0.432999992370605, 0.25, 0.5,
// 	// f 17 	15 	18
// 	0, 0.5, 0.5,
// 	0.432999992370605, 0.25, 0.5,
// 	0.25, 0.432999992370605, 0.5
// }

var testing []f32 = []f32{
	// f 1 	8 	3
	-0.00198179893233307, -0.168260465463236, 0.124729742074972,
	0.185694883772175, 0.0105188790915105, 0.124729742074972,
	0.00358941593413668, 0.173083303251808, 0.124729742074972,
	// f 3 	24 	1
	0.00358941593413668, 0.173083303251808, 0.124729742074972,
	-0.18383778571634, 0.0155911318499177, 0.124729742074972,
	-0.00198179893233307, -0.168260465463236, 0.124729742074972,
	// f 4 	5 	6
	-0.00198179893233307, -0.168260465463236, -0.124729742074972,
	0.179624706797642, -0.463703605987207, -0.124729742074972,
	0.179624706797642, -0.463703605987207, 0.124729742074972,
	// f 4 	6 	1
	-0.00198179893233307, -0.168260465463236, -0.124729742074972,
	0.179624706797642, -0.463703605987207, 0.124729742074972,
	-0.00198179893233307, -0.168260465463236, 0.124729742074972,
	// f 7 	8 	9
	0.471991125791319, 0.455970393804707, 0.124729742074972,
	0.185694883772175, 0.0105188790915105, 0.124729742074972,
	0.185694883772175, 0.0105188790915105, -0.124729742074972,
	// f 7 	9 	10
	0.471991125791319, 0.455970393804707, 0.124729742074972,
	0.185694883772175, 0.0105188790915105, -0.124729742074972,
	0.471991125791319, 0.455970393804707, -0.124729742074972,
	// f 2 	7 	10
	0.162079352950083, 0.455970393804707, 0.124729742074972,
	0.471991125791319, 0.455970393804707, 0.124729742074972,
	0.471991125791319, 0.455970393804707, -0.124729742074972,
	// f 8 	7 	2
	0.185694883772175, 0.0105188790915105, 0.124729742074972,
	0.471991125791319, 0.455970393804707, 0.124729742074972,
	0.162079352950083, 0.455970393804707, 0.124729742074972,
	// f 15 	14 	4
	-0.18383778571634, 0.0155911318499177, -0.124729742074972,
	0.00358941593413668, 0.173083303251808, -0.124729742074972,
	-0.00198179893233307, -0.168260465463236, -0.124729742074972,
	// f 11 	5 	9
	0.498932859197736, -0.463703605987207, -0.124729742074972,
	0.179624706797642, -0.463703605987207, -0.124729742074972,
	0.185694883772175, 0.0105188790915105, -0.124729742074972,
	// f 4 	9 	5
	-0.00198179893233307, -0.168260465463236, -0.124729742074972,
	0.185694883772175, 0.0105188790915105, -0.124729742074972,
	0.179624706797642, -0.463703605987207, -0.124729742074972,
	// f 14 	15 	13
	0.00358941593413668, 0.173083303251808, -0.124729742074972,
	-0.18383778571634, 0.0155911318499177, -0.124729742074972,
	-0.159141223194136, 0.455970393804707, -0.124729742074972,
	// f 12 	13 	15
	-0.472212983651722, 0.455970393804707, -0.124729742074972,
	-0.159141223194136, 0.455970393804707, -0.124729742074972,
	-0.18383778571634, 0.0155911318499177, -0.124729742074972,
	// f 10 	9 	16
	0.471991125791319, 0.455970393804707, -0.124729742074972,
	0.185694883772175, 0.0105188790915105, -0.124729742074972,
	0.162079352950083, 0.455970393804707, -0.124729742074972,
	// f 14 	16 	9
	0.00358941593413668, 0.173083303251808, -0.124729742074972,
	0.162079352950083, 0.455970393804707, -0.124729742074972,
	0.185694883772175, 0.0105188790915105, -0.124729742074972,
	// f 9 	4 	14
	0.185694883772175, 0.0105188790915105, -0.124729742074972,
	-0.00198179893233307, -0.168260465463236, -0.124729742074972,
	0.00358941593413668, 0.173083303251808, -0.124729742074972,
	// f 8 	17 	11
	0.185694883772175, 0.0105188790915105, 0.124729742074972,
	0.498932859197736, -0.463703605987207, 0.124729742074972,
	0.498932859197736, -0.463703605987207, -0.124729742074972,
	// f 8 	11 	9
	0.185694883772175, 0.0105188790915105, 0.124729742074972,
	0.498932859197736, -0.463703605987207, -0.124729742074972,
	0.185694883772175, 0.0105188790915105, -0.124729742074972,
	// f 6 	8 	1
	0.179624706797642, -0.463703605987207, 0.124729742074972,
	0.185694883772175, 0.0105188790915105, 0.124729742074972,
	-0.00198179893233307, -0.168260465463236, 0.124729742074972,
	// f 17 	8 	6
	0.498932859197736, -0.463703605987207, 0.124729742074972,
	0.185694883772175, 0.0105188790915105, 0.124729742074972,
	0.179624706797642, -0.463703605987207, 0.124729742074972,
	// f 2 	3 	8
	0.162079352950083, 0.455970393804707, 0.124729742074972,
	0.00358941593413668, 0.173083303251808, 0.124729742074972,
	0.185694883772175, 0.0105188790915105, 0.124729742074972,
	// f 1 	20 	4
	-0.00198179893233307, -0.168260465463236, 0.124729742074972,
	-0.183671412146296, -0.463703605987207, 0.124729742074972,
	-0.00198179893233307, -0.168260465463236, -0.124729742074972,
	// f 18 	19 	13
	-0.472212983651722, 0.455970393804707, 0.124729742074972,
	-0.159141223194136, 0.455970393804707, 0.124729742074972,
	-0.159141223194136, 0.455970393804707, -0.124729742074972,
	// f 18 	13 	12
	-0.472212983651722, 0.455970393804707, 0.124729742074972,
	-0.159141223194136, 0.455970393804707, -0.124729742074972,
	-0.472212983651722, 0.455970393804707, -0.124729742074972,
	// f 20 	21 	22
	-0.183671412146296, -0.463703605987207, 0.124729742074972,
	-0.501067140802264, -0.463703605987207, 0.124729742074972,
	-0.501067140802264, -0.463703605987207, -0.124729742074972,
	// f 20 	22 	23
	-0.183671412146296, -0.463703605987207, 0.124729742074972,
	-0.501067140802264, -0.463703605987207, -0.124729742074972,
	-0.183671412146296, -0.463703605987207, -0.124729742074972,
	// f 17 	6 	5
	0.498932859197736, -0.463703605987207, 0.124729742074972,
	0.179624706797642, -0.463703605987207, 0.124729742074972,
	0.179624706797642, -0.463703605987207, -0.124729742074972,
	// f 17 	5 	11
	0.498932859197736, -0.463703605987207, 0.124729742074972,
	0.179624706797642, -0.463703605987207, -0.124729742074972,
	0.498932859197736, -0.463703605987207, -0.124729742074972,
	// f 4 	23 	15
	-0.00198179893233307, -0.168260465463236, -0.124729742074972,
	-0.183671412146296, -0.463703605987207, -0.124729742074972,
	-0.18383778571634, 0.0155911318499177, -0.124729742074972,
	// f 22 	15 	23
	-0.501067140802264, -0.463703605987207, -0.124729742074972,
	-0.18383778571634, 0.0155911318499177, -0.124729742074972,
	-0.183671412146296, -0.463703605987207, -0.124729742074972,
	// f 15 	22 	21
	-0.18383778571634, 0.0155911318499177, -0.124729742074972,
	-0.501067140802264, -0.463703605987207, -0.124729742074972,
	-0.501067140802264, -0.463703605987207, 0.124729742074972,
	// f 15 	21 	24
	-0.18383778571634, 0.0155911318499177, -0.124729742074972,
	-0.501067140802264, -0.463703605987207, 0.124729742074972,
	-0.18383778571634, 0.0155911318499177, 0.124729742074972,
	// f 20 	23 	4
	-0.183671412146296, -0.463703605987207, 0.124729742074972,
	-0.183671412146296, -0.463703605987207, -0.124729742074972,
	-0.00198179893233307, -0.168260465463236, -0.124729742074972,
	// f 21 	20 	24
	-0.501067140802264, -0.463703605987207, 0.124729742074972,
	-0.183671412146296, -0.463703605987207, 0.124729742074972,
	-0.18383778571634, 0.0155911318499177, 0.124729742074972,
	// f 24 	18 	12
	-0.18383778571634, 0.0155911318499177, 0.124729742074972,
	-0.472212983651722, 0.455970393804707, 0.124729742074972,
	-0.472212983651722, 0.455970393804707, -0.124729742074972,
	// f 24 	12 	15
	-0.18383778571634, 0.0155911318499177, 0.124729742074972,
	-0.472212983651722, 0.455970393804707, -0.124729742074972,
	-0.18383778571634, 0.0155911318499177, -0.124729742074972,
	// f 10 	16 	2
	0.471991125791319, 0.455970393804707, -0.124729742074972,
	0.162079352950083, 0.455970393804707, -0.124729742074972,
	0.162079352950083, 0.455970393804707, 0.124729742074972,
	// f 19 	3 	14
	-0.159141223194136, 0.455970393804707, 0.124729742074972,
	0.00358941593413668, 0.173083303251808, 0.124729742074972,
	0.00358941593413668, 0.173083303251808, -0.124729742074972,
	// f 19 	14 	13
	-0.159141223194136, 0.455970393804707, 0.124729742074972,
	0.00358941593413668, 0.173083303251808, -0.124729742074972,
	-0.159141223194136, 0.455970393804707, -0.124729742074972,
	// f 20 	1 	24
	-0.183671412146296, -0.463703605987207, 0.124729742074972,
	-0.00198179893233307, -0.168260465463236, 0.124729742074972,
	-0.18383778571634, 0.0155911318499177, 0.124729742074972,
	// f 3 	19 	24
	0.00358941593413668, 0.173083303251808, 0.124729742074972,
	-0.159141223194136, 0.455970393804707, 0.124729742074972,
	-0.18383778571634, 0.0155911318499177, 0.124729742074972,
	// f 18 	24 	19
	-0.472212983651722, 0.455970393804707, 0.124729742074972,
	-0.18383778571634, 0.0155911318499177, 0.124729742074972,
	-0.159141223194136, 0.455970393804707, 0.124729742074972,
	// f 16 	14 	3
	0.162079352950083, 0.455970393804707, -0.124729742074972,
	0.00358941593413668, 0.173083303251808, -0.124729742074972,
	0.00358941593413668, 0.173083303251808, 0.124729742074972,
	// f 16 	3 	2
	0.162079352950083, 0.455970393804707, -0.124729742074972,
	0.00358941593413668, 0.173083303251808, 0.124729742074972,
	0.162079352950083, 0.455970393804707, 0.124729742074972
}

var rows i32 = 20
var columns i32 = 20

var vertexShaderSource str = "
          #version 120
          void main() {
            gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * gl_Vertex * 200;
          }
"

var fragmentShaderSource str = "
          #version 120
          void main() {
            gl_FragColor = vec4(0.5, 0.7, 1.0, 1.0);
          }
"

func compileShader(source str, shaderType i32) (shader i32) {
	shader := gl.CreateShader(shaderType)

	gl.Strs(source, "csources")
	gl.ShaderSource(shader, 1, "csources")
	gl.Free("csources")
	gl.CompileShader(shader)
}

func makeVao (points []f32) (vao i32) {
	var vbo i32
	gl.GenBuffers(1, vbo) // should be &vbo. to be fixed, but should work as it is
	gl.BindBuffer(gl.ARRAY_BUFFER, vbo)
	gl.BufferData(gl.ARRAY_BUFFER, i32.mul(4, []f32.len(points)), points, gl.DYNAMIC_DRAW)

	var vao i32
	gl.GenVertexArrays(1, vao)
	
	gl.BindVertexArray(vao)
	gl.EnableVertexAttribArray(0)
	gl.BindBuffer(gl.ARRAY_BUFFER, vbo)
	gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 0)
}

func draw (vao i32, len i32) () {
	gl.BindVertexArray(vao)
	gl.DrawArrays(gl.TRIANGLES, 0, i32.div(len, 3))
}

func addNull (source str) (source str) {
	bSource := str.[]byte(source)
	bSource := []byte.append(bSource, i32.byte(0))
	source = []byte.str(bSource)
}

func initOpenGL () (program i32) {
	gl.Init()

	vertexShader := compileShader(addNull(vertexShaderSource), gl.VERTEX_SHADER)
	fragmentShader := compileShader(addNull(fragmentShaderSource), gl.FRAGMENT_SHADER)

	program := gl.CreateProgram()
	
	gl.AttachShader(program, vertexShader)
	gl.AttachShader(program, fragmentShader)
	gl.LinkProgram(program)
}

func initGlfw (window str) () {
	glfw.Init()
	glfw.WindowHint(glfw.Resizable, glfw.False)
	glfw.WindowHint(glfw.ContextVersionMajor, 2)
	glfw.WindowHint(glfw.ContextVersionMinor, 1)
	// glfw.WindowHint(glfw.OpenGLProfile, glfw.OpenGLCoreProfile)
	//glfw.WindowHint(glfw.OpenGLForwardCompatible, glfw.True)

	glfw.CreateWindow("window", width, height, "Testing")
	glfw.MakeContextCurrent("window")
}

func newObject (obj []f32, x i32, y i32, z i32) (points []f32) {
	lenObject := []f32.len(obj)
	points := []f32.make(lenObject)

	[]f32.copy(points, obj)
	
	for c := 0; i32.lt(c, lenObject); c = i32.add(c, 1) {
		var position f32
		var size f32

		point := []f32.read(points, c)
		
		if i32.eq(i32.mod(c, 3), 0) {
			size = f32.div(1.0, i32.f32(columns))
			position = f32.mul(i32.f32(x), size)
		}
		if i32.eq(i32.mod(c, 3), 1) {
			size = f32.div(1.0, i32.f32(rows))
			position = f32.mul(i32.f32(y), size)
		}
		if i32.eq(i32.mod(c, 3), 2) {
			size = f32.div(1.0, i32.f32(rows))
			position = f32.mul(i32.f32(z), size)
		}

		[]f32.write(points, c, f32.sub(f32.mul(f32.add(position, f32.mul(point, size)), i32.f32(2)), i32.f32(1)))
	}
}

func newBox (x i32, y i32) (box []f32) {
	box := newObject(square, x, y, 0)

	box = []f32.concat(box, newObject(triBL, i32.sub(x, 1), i32.sub(y, 1), 0))
	box = []f32.concat(box, newObject(triTL, i32.sub(x, 1), i32.add(y, 1), 0))
	box = []f32.concat(box, newObject(triBR, i32.add(x, 1), i32.sub(y, 1), 0))
	box = []f32.concat(box, newObject(triTR, i32.add(x, 1), i32.add(y, 1), 0))
}

func newChar (x i32, y i32) (char []f32) {
	char := newObject(triTR, i32.sub(x, 1), i32.add(y, 1), 0)
	char = []f32.concat(char, newObject(triTL, i32.add(x, 1), i32.add(y, 1), 0))
	char = []f32.concat(char, newObject(square, x, y, 0))
	char = []f32.concat(char, newObject(square, i32.sub(x, 1), y, 0))
	char = []f32.concat(char, newObject(square, i32.add(x, 1), y, 0))
	char = []f32.concat(char, newObject(square, x, i32.sub(y, 1), 0))
}

// func newBullet (x i32, y i32) (bullet []f32) {
// 	bullet := newObject(testing, x, y)
// }

func drawVaos (vaos []i32) () {
	vaosLen := []i32.len(vaos)
	for c := 0; i32.lt(c, vaosLen); c = i32.add(c, 1) {
		draw([]i32.read(vaos, c))
	}
}

func main () () {
	// gl.EnableClientState(gl.VERTEX_ARRAY)
	initGlfw("window")
	program := initOpenGL()

	stop := not(glfw.ShouldClose("window"))

	xBox := i32.rand(0, columns)
	yBox := i32.rand(0, rows)

	xChar := i32.rand(0, columns)
	yChar := i32.rand(0, rows)

	angle := 0.0

	lenTesting := []f32.len(testing)

	//gl.Rotatef(45.0, 0.0, 0.0, 1.0)

	for stop {
		gl.Clear(i32.bitor(gl.COLOR_BUFFER_BIT, gl.DEPTH_BUFFER_BIT))
		gl.UseProgram(program)

		gl.MatrixMode(gl.MODELVIEW)
		//gl.MatrixMode(gl.PROJECTION)
		gl.LoadIdentity()
		gl.PushMatrix()
		
		gl.Rotatef(angle, 1.0, 0.0, 0.0)
		gl.Rotatef(angle, 0.0, 1.0, 0.0)
		gl.Rotatef(angle, 0.0, 0.0, 1.0)

		//gl.MatrixMode(gl.PROJECTION)
		
		draw(makeVao(testing), lenTesting)

		if f32.gt(angle, 360.0) {
			angle = 0.0
		} else {
			angle = f32.add(angle, 0.1)
		}

		//gl.Rotatef(45.0, 0.0, 0.0, 1.0)
		
		//draw(makeVao(newObject(testing, 3, 6, 0)), 9)
		//draw(makeVao(newObject(square, 6, 3)), 18)
		
		//draw(makeVao(newObject(testing, xBox, yBox, 0)), lenTesting)
		//draw(makeVao(newObject(testing, 15, 15, 0)), lenTesting)
		//draw(makeVao(newObject(testing, xChar, yChar, 0)), lenTesting)
		
		// box := newBox(xBox, yBox)
		// char1 := newChar(xChar, yChar)
		// char2 := newChar(10, yChar)
		// char3 := newChar(xChar, 15)
		// all := []f32.concat(box, char1)
		// all := []f32.concat(all, char2)
		// all := []f32.concat(all, char3)

		// lenAll := []f32.len(all)

		//gl.Translatef(-5.0, -5.0, -3131.0)

		//draw(makeVao(all), lenAll)
		gl.PopMatrix()

		// xBox = i32.mod(i32.add(xBox, 1), columns)
		// yBox = i32.mod(i32.add(yBox, 1), rows)

		// xChar = i32.mod(i32.add(xChar, 1), columns)
		// yChar = i32.mod(i32.add(yChar, 1), rows)
		
		// xBox = i32.mod(i32.add(xBox, i32.rand(-1, 2)), columns)
		// yBox = i32.mod(i32.add(yBox, i32.rand(-1, 2)), rows)

		// xChar = i32.mod(i32.add(xChar, i32.rand(-1, 2)), columns)
		// yChar = i32.mod(i32.add(yChar, i32.rand(-1, 2)), rows)

		// // i32.print(xBox)
		// // i32.print(yBox)

		// //sleep(500)

		glfw.PollEvents()
		
		glfw.SwapBuffers("window")

		
		
		stop = not(glfw.ShouldClose("window"))
	}
}
