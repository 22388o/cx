package main

var greeting str = "hello"
var ten i32 = 10
var five i32 = 5
var foo i32 = 10
var bar f64 = 4.17
var par i32 = 30
var boo i32 = 40
var epsilon f64 = 1.531
var inps []f64 = []f64{
	-10.0, -9.0, -8.0, -7.0, -6.0, -5.0, -4.0, -3.0, -2.0, -1.0,
	0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0}
var outs []f64 = []f64{
	-970.0, -702.0, -488.0, -322.0, -198.0, -110.0, -52.0, -18.0, -2.0,
	2.0, 0.0, -2.0, 2.0, 18.0, 52.0, 110.0, 198.0, 322.0, 488.0, 702.0, 970.0}

type Shape struct {
	perimeter f32
	area f32
}

type Point struct {
	name str
	x i32
	y i32
}

var myPoint Point
var myInt i32

func double (num f32) (out f32) {
	out := addF32(num, num)
}

func quad (num f32) (out f32) {
	out := double(num)
}

func voidFn () () {
}

func solution (n f64) (out f64) {
	double = addF64(n, n)
	triple = addF64(double, n)
	square = mulF64(n, n)
	cubic = mulF64(square, n)
	out = subF64(cubic, triple)
}

//:func voidFn

func main () (outMain f32) {
	printI32(10)
	printI32(20)
	num := addI32(3, 3)
	outMain := quad(4.0)
	// outMain := divF32(3.0, 7.0)

	// num := addI32(3, 3)
	
	// pred := gtI32(5, 10)
	if gtI32(5, 10) {
		printByte(ltI32(5, 10))
		printByte(ltI32(5, 10))
		//num := addI32(3, 3)
		//printI32(num)
		//printByte(ltI32(15, 10))
		//result := addI32(7, 10)
		//result := addI32(7, 10)
	} else {
		//printByte(ltI32(15, 10))
		//printByte(ltI32(5, 10))
		num := addI32(6, 6)
		printI32(num)
		// printByte(ltI32(15, 10))
		//result := addI32(20, 3)
		//result := addI32(7, 10)
		//result := addI32(7, 10)
	}

	// var i i32 = 0
	// //pred := ltI32(i, 10000)
	// while ltI32(i, 100) {
	// //while pred {
	// 	//printI32(i)
	// 	//printByte(ltI32(i, 10))
	// 	i := addI32(i, 1)
	// 	//pred := ltI32(i, 10000)
	// }

	
	
	// printI32(10101)
	// var anotherPoint Point
	
	// //var done i32 = 10101

	// // var myPoint Point
	
	// // var i i32 = 0
	// // pred := ltI32(i, 10000)
	// // while pred {
	// // 	printI32(i)
	// // 	i := addI32(i, 1)
	// // 	pred := ltI32(i, 10000)
	// // }

	// // printI32(myPoint.x)

	// // var bar f32 = 4.17
	// // // casting
	// // foo1 := f32toI32(bar)
	// // foo2 := addI32(foo1, foo1)
	// // printI32(foo1)
	// // printF32A(inps)

	// // printStr("hello")

	// // printStr()

	// // //addI32(addI32(5, 4), addI32(3, 7))
	// // addI32(addI32(addI32(i, 20), i), addI32(3, i))
}
