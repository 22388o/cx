/(\r\n|\r|\n)/ {
	lval.line++
}
/(\t| )/ {
	/* skip blanks and tabs */
}
/(\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\/)|\/\/[^\n\r]*/ {
	/* skip comments */
	lval.line = lval.line + countNewLines([]byte(yylex.Text()))
}
/:clauses/   { return CCLAUSES   }
/:objects/   { return COBJECTS   }
/:object/    { return COBJECT    }
/:query/     { return QUERY      }
/:dQuery/    { return DQUERY     }
/:dState/    { return DSTATE     }
/:dStack/    { return DSTACK     }
/:dProgram/  { return DPROGRAM   }
/:package/   { return SPACKAGE   }
/:struct/    { return SSTRUCT    }
/:func/      { return SFUNC      }
/:rem/       { return REM        }
/:step/      { return STEP       }
/:tStep/     { return TSTEP      }
/:pStep/     { return PSTEP      }
/:tag/       { return TAG        }
/:aff/       { return AFF        }
/package/    { return PACKAGE    }
/type/       { return TYPSTRUCT  }
/struct/     { return STRUCT     }
/return/     { return RETURN     }
/if/         { return IF         }
/else/       { return ELSE       }
/for/        { return FOR        }
/,/          { return COMMA      }
/func/       { return FUNC       }
/clauses/    { return CLAUSES    }
/objects/    { return OBJECTS    }
/object/     { return OBJECT     }
/expr/       { return EXPR       }
/def/        { return DEF        }
/field/      { return FIELD      }
/input/      { return INPUT      }
/output/     { return OUTPUT     }
/import/     { return IMPORT     }
/var/        { return VAR        }
/\(/         { return LPAREN     }
/\)/         { return RPAREN     }
/\{/         { return LBRACE     }
/\}/         { return RBRACE     }
/=/          { return ASSIGN     }
/:=/         { return CASSIGN    }
/>/          { return GTHAN      }
/</          { return LTHAN      }
/<=/         { return LTEQ       }
/>=/         { return GTEQ       }
/bool/       { lval.tok = yylex.Text(); return BOOL     }
/str/        { lval.tok = yylex.Text(); return STR      }
/i32/        { lval.tok = yylex.Text(); return I32      }
/i64/        { lval.tok = yylex.Text(); return I64      }
/f32/        { lval.tok = yylex.Text(); return F32      }
/f64/        { lval.tok = yylex.Text(); return F64      }
/byte/       { lval.tok = yylex.Text(); return BYTE     }
/\[\]bool/   { lval.tok = yylex.Text(); return BOOLA    }
/\[\]byte/   { lval.tok = yylex.Text(); return BYTEA    }
/\[\]i32/    { lval.tok = yylex.Text(); return I32A     }
/\[\]i64/    { lval.tok = yylex.Text(); return I64A     }
/\[\]f32/    { lval.tok = yylex.Text(); return F32A     }
/\[\]f64/    { lval.tok = yylex.Text(); return F64A     }
/"([^"]*)"/ { /* " */
	lval.tok = yylex.Text()
	lval.line = lval.line + countNewLines([]byte(lval.tok))
	return STRING
}
/true/ {
	lval.i32 = int32(1)
	return BOOLEAN
}
/false/ {
	lval.i32 = int32(0)
	return BOOLEAN
}
/-?[0-9]+/ {
	result ,_ := strconv.Atoi(yylex.Text())
	lval.i32 = int32(result)
	return INT
}
/-?[0-9]+\.[0-9]*/ {
	result ,_ := strconv.ParseFloat(yylex.Text(), 32)
	lval.f32 = float32(result)
	return FLOAT
}
/[_a-zA-Z][a-zA-Z0-9_]*(\.[a-zA-Z0-9_]+)?/ {
	lval.tok = yylex.Text()
	return IDENT
}
/;/ { return int(yylex.Text()[0]) }
//
package main
import (
	"os"
	"os/exec"
	"fmt"
	"bytes"
	"time"
	"regexp"
	"io/ioutil"
	"strconv"

	"runtime"

	"github.com/skycoin/skycoin/src/cipher/encoder"
	. "github.com/skycoin/cx/src/base"
)

func countNewLines (s []byte) int {
	count := 0
	for i := 0; i < len(s); i++ {
		if s[i] == '\n' {
			count++
		}
	}
	return count
}

func readline (fi *bufio.Reader) (string, bool) {
	s, err := fi.ReadString(';')
	if err != nil {
		return "", false
	}
	return s, true
}

func repl () {
	fmt.Println("CX REPL")
	fmt.Println("More information about CX is available at http://cx.skycoin.net/")

	inREPL = true

	fi := bufio.NewReader(os.NewFile(0, "stdin"))

	for {
		var inp string
		var ok bool

		fmt.Println()

		if replTargetMod != "" {
			fmt.Println(fmt.Sprintf(":package %s {...", replTargetMod))
			fmt.Printf("\t* ")
		} else if replTargetFn != "" {
			fmt.Println(fmt.Sprintf(":func %s {...", replTargetFn))
			fmt.Printf("\t* ")
		} else if replTargetStrct != "" {
			fmt.Println(fmt.Sprintf(":struct %s {...", replTargetStrct))
			fmt.Printf("\t* ")
		} else {
			fmt.Printf("* ")
		}
		
		if inp, ok = readline(fi); ok {
			if replTargetFn != "" {
				inp = fmt.Sprintf(":func %s {%s}", replTargetFn, inp)
			}
			if replTargetMod != "" {
				inp = fmt.Sprintf(":package %s {%s}", replTargetMod, inp)
			}
			if replTargetStrct != "" {
				inp = fmt.Sprintf(":struct %s {%s}", replTargetStrct, inp)
			}
			b := bytes.NewBufferString(inp)
			yyParse(NewLexer(b))
		} else {
			if replTargetFn != "" {
				replTargetFn = ""
				fmt.Println()
				continue
			}

			if replTargetStrct != "" {
				replTargetStrct = ""
				fmt.Println()
				continue
			}

			if replTargetMod != "" {
				replTargetMod = ""
				fmt.Println()
				continue
			}

			fmt.Printf("\nBye!\n")
			break
		}
	}
}

var coreModule string = `
package core
func idStr (x str) (x str) {}
func idBool (x bool) (x bool) {}
func idByte (x byte) (x byte) {}
func idI32 (x i32) (x i32) {}
func idI64 (x i64) (x i64) {}
func idF32 (x f32) (x f32) {}
func idF64 (x f64) (x f64) {}
func idBoolA (x []bool) (x []bool) {}
func idByteA (x []byte) (x []byte) {}
func idI32A (x []i32) (x []i32) {}
func idI64A (x []i64) (x []i64) {}
func idF32A (x []f32) (x []f32) {}
func idF64A (x []f64) (x []f64) {}

func addI32 (n1 i32, n2 i32) (out i32) {}
func subI32 (n1 i32, n2 i32) (out i32) {}
func mulI32 (n1 i32, n2 i32) (out i32) {}
func divI32 (n1 i32, n2 i32) (out i32) {}

func addI64 (n1 i64, n2 i64) (out i64) {}
func subI64 (n1 i64, n2 i64) (out i64) {}
func mulI64 (n1 i64, n2 i64) (out i64) {}
func divI64 (n1 i64, n2 i64) (out i64) {}

func addF32 (n1 f32, n2 f32) (out f32) {}
func subF32 (n1 f32, n2 f32) (out f32) {}
func mulF32 (n1 f32, n2 f32) (out f32) {}
func divF32 (n1 f32, n2 f32) (out f32) {}

func addF64 (n1 f64, n2 f64) (out f64) {}
func subF64 (n1 f64, n2 f64) (out f64) {}
func mulF64 (n1 f64, n2 f64) (out f64) {}
func divF64 (n1 f64, n2 f64) (out f64) {}

func modI32 (n1 i32, n2 i32) (rem i32) {}
func modI64 (n1 i64, n2 i64) (rem i64) {}

func andI32 (n1 i32, n2 i32) (out i32) {}
func orI32 (n1 i32, n2 i32) (out i32) {}
func xorI32 (n1 i32, n2 i32) (out i32) {}
func andNotI32 (n1 i32, n2 i32) (out i32) {}

func andI64 (n1 i64, n2 i64) (out i64) {}
func orI64 (n1 i64, n2 i64) (out i64) {}
func xorI64 (n1 i64, n2 i64) (out i64) {}
func andNotI64 (n1 i64, n2 i64) (out i64) {}

func and (c1 bool, c2 bool) (out bool) {}
func or (c1 bool, c2 bool) (out bool) {}
func not (c1 bool) (out bool) {}

func ltI32 (n1 i32, n2 i32) (out bool) {}
func gtI32 (n1 i32, n2 i32) (out bool) {}
func eqI32 (n1 i32, n2 i32) (out bool) {}
func lteqI32 (n1 i32, n2 i32) (out bool) {}
func gteqI32 (n1 i32, n2 i32) (out bool) {}

func ltI64 (n1 i64, n2 i64) (out bool) {}
func gtI64 (n1 i64, n2 i64) (out bool) {}
func eqI64 (n1 i64, n2 i64) (out bool) {}
func lteqI64 (n1 i64, n2 i64) (out bool) {}
func gteqI64 (n1 i64, n2 i64) (out bool) {}

func ltF32 (n1 f32, n2 f32) (out bool) {}
func gtF32 (n1 f32, n2 f32) (out bool) {}
func eqF32 (n1 f32, n2 f32) (out bool) {}
func lteqF32 (n1 f32, n2 f32) (out bool) {}
func gteqF32 (n1 f32, n2 f32) (out bool) {}

func ltF64 (n1 f64, n2 f64) (out bool) {}
func gtF64 (n1 f64, n2 f64) (out bool) {}
func eqF64 (n1 f64, n2 f64) (out bool) {}
func lteqF64 (n1 f64, n2 f64) (out bool) {}
func gteqF64 (n1 f64, n2 f64) (out bool) {}

func ltStr (n1 str, n2 str) (out bool) {}
func gtStr (n1 str, n2 str) (out bool) {}
func eqStr (n1 str, n2 str) (out bool) {}
func lteqStr (n1 str, n2 str) (out bool) {}
func gteqStr (n1 str, n2 str) (out bool) {}

func ltByte (n1 byte, n2 byte) (out bool) {}
func gtByte (n1 byte, n2 byte) (out bool) {}
func eqByte (n1 byte, n2 byte) (out bool) {}
func lteqByte (n1 byte, n2 byte) (out bool) {}
func gteqByte (n1 byte, n2 byte) (out bool) {}

func byteAToStr (in []byte) (out str) {}
func strToByteA (in str) (out []byte) {}

func i32ToByte (in i32) (out byte) {}
func i64ToByte (in i64) (out byte) {}
func f32ToByte (in f32) (out byte) {}
func f64ToByte (in f64) (out byte) {}

func byteToI32 (in byte) (out i32) {}
func i64ToI32 (in i64) (out i32) {}
func f32ToI32 (in f32) (out i32) {}
func f64ToI32 (in f64) (out i32) {}

func byteToI64 (in byte) (out i64) {}
func i32ToI64 (in i32) (out i64) {}
func f32ToI64 (in f32) (out i64) {}
func f64ToI64 (in f64) (out i64) {}

func byteToF32 (in byte) (out f32) {}
func i32ToF32 (in i32) (out f32) {}
func i64ToF32 (in i64) (out f32) {}
func f64ToF32 (in f64) (out f32) {}

func byteToF64 (in byte) (out f64) {}
func i32ToF64 (in i32) (out f64) {}
func i64ToF64 (in i64) (out f64) {}
func f32ToF64 (in f32) (out f64) {}

func i32AToByteA (in []i32) (out []byte) {}
func i64AToByteA (in []i64) (out []byte) {}
func f32AToByteA (in []f32) (out []byte) {}
func f64AToByteA (in []f64) (out []byte) {}

func byteAToI32A (in []byte) (out []i32) {}
func i64AToI32A (in []i64) (out []i32) {}
func f32AToI32A (in []f32) (out []i32) {}
func f64AToI32A (in []f64) (out []i32) {}

func byteAToI64A (in []byte) (out []i64) {}
func i32AToI64A (in []i32) (out []i64) {}
func f32AToI64A (in []f32) (out []i64) {}
func f64AToI64A (in []f64) (out []i64) {}

func byteAToF32A (in []byte) (out []f32) {}
func i32AToF32A (in []i32) (out []f32) {}
func i64AToF32A (in []i64) (out []f32) {}
func f64AToF32A (in []f64) (out []f32) {}

func byteAToF64A (in []byte) (out []f64) {}
func i32AToF64A (in []i32) (out []f64) {}
func i64AToF64A (in []i64) (out []f64) {}
func f32AToF64A (in []f32) (out []f64) {}

func goTo (predicate bool, thenLines i32, elseLines i32) (out bool) {}

func printBool (p bool) (p bool) {}
func printStr (s str) (s str) {}
func printByte (n byte) (out byte) {}
func printI32 (n i32) (out i32) {}
func printI64 (n i64) (out i64) {}
func printF32 (n f32) (out f32) {}
func printF64 (n f64) (out f64) {}
func printBoolA (n []bool) (out []bool) {}
func printByteA (n []byte) (out []byte) {}
func printI32A (n []i32) (out []i32) {}
func printI64A (n []i64) (out []i64) {}
func printF32A (n []f32) (out []f32) {}
func printF64A (n []f64) (out []f64) {}

func makeBoolA (size i32) (arr []bool) {}
func makeByteA (size i32) (arr []byte) {}
func makeI32A (size i32) (arr []i32) {}
func makeI64A (size i32) (arr []i64) {}
func makeF32A (size i32) (arr []f32) {}
func makeF64A (size i32) (arr []f64) {}

func readBoolA (arr []bool, idx i32) (lit bool) {}
func writeBoolA (arr []bool, idx i32, val bool) (arr []bool) {}
func readByteA (arr []byte, idx i32) (lit byte) {}
func writeByteA (arr []byte, idx i32, val byte) (arr []byte) {}
func readI32A (arr []i32, idx i32) (lit i32) {}
func writeI32A (arr []i32, idx i32, val i32) (arr []i32) {}
func readI64A (arr []i64, idx i32) (lit i64) {}
func writeI64A (arr []i64, idx i32, val i64) (arr []i64) {}
func readF32A (arr []f32, idx i32) (lit f32) {}
func writeF32A (arr []f32, idx i32, val f32) (arr []f32) {}
func readF64A (arr []f64, idx i32) (lit f64) {}
func writeF64A (arr []f64, idx i32, val f64) (arr []f64) {}

func lenBoolA (arr []bool) (len i32) {}
func lenByteA (arr []byte) (len i32) {}
func lenI32A (arr []i32) (len i32) {}
func lenI64A (arr []i64) (len i32) {}
func lenF32A (arr []f32) (len i32) {}
func lenF64A (arr []f64) (len i32) {}

func sleep (ms i32) (ms i32) {}

func randI32 (min i32, max i32) (r i32) {}
func randI64 (min i64, max i64) (r i64) {}

func setClauses (clss str) (clss str) {}
func setQuery (qry str) (qry str) {}
func addObject (obj str) (obj str) {}
func remObject (obj str) (obj str) {}
func remObjects () (out bool) {}

func remExpr (tag str) (err bool) {}
func remArg (tag str) (err bool) {}
func addExpr (tag str, fnName str) (err bool) {}
func affExpr (tag str, filter str, index i32) (numAffs i32) {}

func evolve (fnName str, fnBag str, inps []f64, outs []f64, numberExprs i32, iterations i32, epsilon f64) (success f64) {}
func serialize () (sPrgrm []byte) {}
func deserialize (sPrgrm []byte) (err bool) {}

func initDef (typ str) (typ str) {}

func halt (msg str) (out bool) {}
`

func unsafeEval (code string) (result string) {
	var lexer *Lexer
	defer func() {
		if r := recover(); r != nil {
			result = fmt.Sprintf("%v", r)
			lexer.Stop()
		}
	}()
	
	// storing strings sent to standard output
	old := os.Stdout
	r, w, _ := os.Pipe()
	os.Stdout = w
	
	lineNo = 0
	
	b := bytes.NewBufferString(coreModule)
	lexer = NewLexer(b)
	yyParse(lexer)
	
	b = bytes.NewBufferString(code)
	lexer = NewLexer(b)
	yyParse(lexer)

	if err := cxt.Run(false, -1); err != nil {
		cxt = MakeContext()
		return fmt.Sprintf("%s", err)
	}

	if len(cxt.Outputs) > 0 {
		outVal := *cxt.Outputs[0].Value
	
		switch cxt.Outputs[0].Typ.Name {
		case "bool":
			var out bool
			encoder.DeserializeRaw(outVal, &out)
			fmt.Println(out)
		case "str":
			fmt.Println(string(outVal))
		case "byte":
			fmt.Println(outVal)
		case "i32":
			var out int32
			encoder.DeserializeRaw(outVal, &out)
			fmt.Println(out)
		case "i64":
			var out int64
			encoder.DeserializeRaw(outVal, &out)
			fmt.Println(out)
		case "f32":
			var out float32
			encoder.DeserializeRaw(outVal, &out)
			fmt.Println(out)
		case "f64":
			var out float64
			encoder.DeserializeRaw(outVal, &out)
			fmt.Println(out)
		case "[]bool":
			var out []bool
			encoder.DeserializeRaw(outVal, &out)
			fmt.Println(out)
		case "[]byte":
			var out []byte
			encoder.DeserializeRaw(outVal, &out)
			fmt.Println(out)
		case "[]i32":
			var out []int32
			encoder.DeserializeRaw(outVal, &out)
			fmt.Println(out)
		case "[]i64":
			var out []int64
			encoder.DeserializeRaw(outVal, &out)
			fmt.Println(out)
		case "[]f32":
			var out []float32
			encoder.DeserializeRaw(outVal, &out)
			fmt.Println(out)
		case "[]f64":
			var out []float64
			encoder.DeserializeRaw(outVal, &out)
			fmt.Println(out)
		default:
			
		}
	}
	

	outC := make(chan string)
	go func() {
		var buf bytes.Buffer
		io.Copy(&buf, r)
		outC <- buf.String()
	}()
	
	w.Close()
	os.Stdout = old // restoring the real stdout
	//out := <-outC
	out := <-outC
	re := regexp.MustCompile("\n")
	result = string(re.ReplaceAll([]byte(out), []byte("<br />")))

	cxt = MakeContext()
	return result
}

func Eval (code string) string {
	runtime.GOMAXPROCS(2)
	ch := make(chan string, 1)

	var result string
	
	go func() {
		result = unsafeEval(code)
		ch <- result
	}()

	timer := time.NewTimer(20 * time.Second)
	defer timer.Stop()

	select {
	case <-ch:
		return result
	case <-timer.C:
		cxt = MakeContext()
		return "Timed out."
	}
}

func parseFile (fileName string) {
	sourceCode, err := os.Open(fileName)
	if err != nil {
		panic(fmt.Sprintf("Couldn't read file."))
	}
	yyParse(NewLexer(sourceCode))
}

func help () {
	fmt.Printf(`Usage: cx [options] [source-files]

Options:
-b, --base                       Generate a "out.cx.go" file with the transcompiled CX Base source code.
-c, --compile                    Generate a "out" executable file of the program.
-co, --compile-output FILENAME   Specifies the filename for the generated executable.
-h, --help                       Prints this message.
-r, --repl                       Loads source files into memory and starts a read-eval-print loop.

Notes:
Options --compile and --repl are mutually exclusive.
`)
}

func (yylex Lexer) Error (e string) {
	if inREPL {
		fmt.Printf("syntax error: %s\n", e)
	} else {
		fmt.Printf("%d: syntax error: %s\n", yylex.Line() + 1, e)
	}
	
	yylex.Stop()
}

func main () {
	runtime.GOMAXPROCS(2)

	args := os.Args[1:]
	var sourceCode []*os.File

	if len(args) == 0 {
		replMode = true
	}

	flagMode := false
	var compileOutput string = "o"
	for i, arg := range args {
		if arg == "--repl" || arg == "-r" {
			replMode = true
			flagMode = true
			continue
		}
		if arg == "--base" || arg == "-b" {
			baseOutput = true
			flagMode = true
			continue
		}
		if arg == "--compile" || arg == "-c" {
			compileMode = true
			baseOutput = true
			flagMode = true
			continue
		}
		if arg == "--compile-output" || arg == "-co" {
			compileOutput = args[i+1]
			continue
		}
		if arg == "--help" || arg == "-h" {
			helpMode = true
			flagMode = true
			continue
		}
		if !flagMode {
			file, err := os.Open(arg)
			if err != nil {
				panic(fmt.Sprintf("Couldn't read file."))
			}
			sourceCode = append(sourceCode, file)	
		}
	}

	if helpMode {
		help()
		return
	}

	if compileMode && replMode {
		fmt.Println("Error: Options --compile and --repl are mutually exclusive.")
		return
	}

	if baseOutput {
		program.WriteString(`package main;import (. "github.com/skycoin/cx/src/base";);var cxt = MakeContext();var mod *CXModule;var imp *CXModule;var fn *CXFunction;var op *CXFunction;var expr *CXExpression;var strct *CXStruct;var arg *CXArgument;var tag string = "";func main () {`)
	}

	// adding core module and native functions to it
	b := bytes.NewBufferString(coreModule)
	yyParse(NewLexer(b))

	// parsing all source code files
	for _, source := range sourceCode {
		yyParse(NewLexer(source))
	}
	
	// if sourceCode != nil {
	// 	yyParse(NewLexer(sourceCode))
	// }
	
	lineNo = 0

	if replMode {
		repl()
	} else if !compileMode {
		if err := cxt.Run(false, -1); err != nil {
			fmt.Println(err)
			repl()
		}
	}
	
	if baseOutput {
		program.WriteString(`cxt.Run(false, -1);}`)
		ioutil.WriteFile(fmt.Sprintf("%s.go", compileOutput), []byte(program.String()), 0644)
	}
	if compileMode {
		baseFilename := fmt.Sprintf("%s.go", compileOutput)
		build := exec.Command("go", "build", baseFilename)
		build.Run()
		removeBase := exec.Command("rm", baseFilename)
		removeBase.Run()
	}
}
