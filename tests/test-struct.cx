package testing

type miniStruct struct {
	mInt i32
	mLong i64
	mFloat f32
	mDecimal f64
	mBoolean bool
	mByt byte
	mString str
}

type TestStruct struct {
	int i32
	long i64
	float f32
	decimal f64
	boolean bool
	byt byte
	string str
	anotherStruct miniStruct
}

func testStructures () {
	var mytest TestStruct
	mytest = TestStruct{
		int: 32,
		long: 64L,
		float: 32.0,
		decimal: 64.0D,
		boolean: true,
		byt: 255B,
		string: "Foo bar",
		anotherStruct: miniStruct{
			mInt: 32,
			mLong: 64L,
			mFloat: 32.0,
			mDecimal: 64.0D,
			mBoolean: true,
			mByt: 255B,
			mString: "Foo bar"}}

	assert((32 == mytest.int), true, "Struct i32 properties error")
	assert((mytest.int == mytest.anotherStruct.int), true, "Struct in a Struct i32 properties error")

	assert((64L == mytest.long), true, "Struct i64 properties error")
	assert((mytest.long == mytest.anotherStruct.long), true, "Struct in a Struct i64 properties error")

	assert((32.0 == mytest.float), true, "Struct f32 properties error")
	assert((mytest.float == mytest.anotherStruct.float), true, "Struct in a Struct f32 properties error")
	
	assert((64.0D == mytest.decimal), true, "Struct f64 properties error")
	assert((mytest.decimal == mytest.anotherStruct.decimal), true, "Struct in a Struct f64 properties error")

	assert(mytest.boolean, true, "Struct bool properties error")
	assert((mytest.boolean && mytest.anotherStruct.boolean), true, "Struct in a Struct bool properties error")

	assert(mytest.byt, 255B, "Struct byte properties error")
	assert(mytest.byt, mytest.anotherStruct.byt, "Struct in a Struct byte properties error")

	assert(mytest.string, "Foo bar", "error")
	assert(("Foo bar" == mytest.string), true, "Struct str properties error")
	assert((mytest.anotherStruct.string == mytest.string), true, "Struct in a Struct str properties error")
}
