package testing

func testSlices () {
	// str.print("Running Slices Testing...")

	// str.print("--------Append testing--------")
	var slc []i32
	slc = append(slc, 11)
	slc = append(slc, 12)
	slc = append(slc, 13)
	slc = append(slc, 14)
	slc = append(slc, 15)
	slc = append(slc, 16)

	assert(slc[0], 11, "")
	assert(slc[1], 12, "")
	assert(slc[2], 13, "")
	assert(slc[3], 14, "")
	assert(slc[4], 15, "")
	assert(slc[5], 16, "")

	var slc2 []i32
	slc2 = slc

	assert(slc2[0], 11, "")
	assert(slc2[1], 12, "")
	assert(slc2[2], 13, "")
	assert(slc2[3], 14, "")
	assert(slc2[4], 15, "")
	assert(slc2[5], 16, "")

	// str.print("--------Slice literal testing--------")
	var slc3 []i32
	slc3 = []i32{21, 22, 23, 24, 25}

	assert(slc3[0], 21, "")
	assert(slc3[1], 22, "")
	assert(slc3[2], 23, "")
	assert(slc3[3], 24, "")
	assert(slc3[4], 25, "")

	var slc4 []i32
	slc4 = append(slc3, 26)

	assert(slc4[0], 21, "")
	assert(slc4[1], 22, "")
	assert(slc4[2], 23, "")
	assert(slc4[3], 24, "")
	assert(slc4[4], 25, "")
	assert(slc4[5], 26, "")

	var num i32
	num = slc4[5]

	assert(num, 26, "")
	assert(num, slc4[5], "")

	// str.print("--------Different native types testing--------")

	var slc5 []f32
	slc5 = append(slc5, 1.1)
	slc5 = append(slc5, 1.2)
	slc5 = append(slc5, 1.3)

	assert(slc5[0], 1.1, "")
	assert(slc5[1], 1.2, "")
	assert(slc5[2], 1.3, "")

	slc5 = []f32{11.11, 12.12, 13.13, 14.14}
	
	assert(slc5[0], 11.11, "")
	assert(slc5[1], 12.12, "")
	assert(slc5[2], 13.13, "")
	assert(slc5[3], 14.14, "")

	var slc6 []i64
	slc6 = append(slc6, 11L)
	slc6 = append(slc6, 12L)
	slc6 = append(slc6, 13L)

	assert(slc6[0], 11L, "")
	assert(slc6[1], 12L, "")
	assert(slc6[2], 13L, "")

	slc6 = []i64{11L, 12L, 13L, 14L}
	
	assert(slc6[0], 11L, "")
	assert(slc6[1], 12L, "")
	assert(slc6[2], 13L, "")
	assert(slc6[3], 14L, "")

	var slc7 []f64
	slc7 = append(slc7, 11.11D)
	slc7 = append(slc7, 12.12D)
	slc7 = append(slc7, 13.13D)

	assert(slc7[0], 11.11D, "")
	assert(slc7[1], 12.12D, "")
	assert(slc7[2], 13.13D, "")

	slc7 = []f64{11.11D, 12.12D, 13.13D, 14.14D}
	
	assert(slc7[0], 11.11D, "")
	assert(slc7[1], 12.12D, "")
	assert(slc7[2], 13.13D, "")
	assert(slc7[3], 14.14D, "")

	var slc8 []bool
	slc8 = append(slc8, true)
	slc8 = append(slc8, false)
	slc8 = append(slc8, true)

	assert(slc8[0], true, "")
	assert(slc8[1], false, "")
	assert(slc8[2], true, "")

	slc8 = []bool{false, true, true, true}
	
	// assert(slc8[0], false, "")
	// assert(slc8[1], true, "")
	// assert(slc8[2], true, "")
	// assert(slc8[3], true, "")
}
