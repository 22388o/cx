package testing

func I32ArithmeticFunctions() () {
	res = append(res, assert(i32.add(10, 10), 20, "Add error"))
	res = append(res, assert(i32.sub(10, 10), 0, "Subtract error"))
	res = append(res, assert(i32.mul(10, 10), 100, "Multiply error"))
	res = append(res, assert(i32.div(10, 10), 1, "Divide error"))
	res = append(res, assert(i32.mod(10, 3), 1, "Mod error"))
	res = append(res, assert(i32.bitshl(10, 5), 320, "Bit Shift Left error"))
	res = append(res, assert(i32.bitshr(10, 5), 0, "Bit Shift Right error"))
	res = append(res, assert(i32.bitand(10, 5), 0 , "Bit AND error"))
	res = append(res, assert(i32.bitor(10, 5), 15, "Bit OR error"))
	res = append(res, assert(i32.bitxor(10, 5), 15, "Bit XOR error"))
	res = append(res, assert(i32.bitclear(10, 2), 8, "Bit CLEAR error"))
	res = append(res, assert(i32.pow(10, 5), 100000, "Pow error"))
	res = append(res, assert(i32.abs(-10), 10, "Absolute Value error"))
	res = append(res, assert(i32.sqrt(4), 2, "Square Root error"))
	res = append(res, assert(i32.log(1), 0, "Log error"))
	res = append(res, assert(i32.log2(2), 1, "Log2 error"))
	res = append(res, assert(i32.log10(10), 1, "Log10 error"))
	res = append(res, assert(i32.max(2, 3), 3, "MAX error"))
	res = append(res, assert(i32.min(2, 3), 2, "MIN error"))
	res = append(res, assert(i32.sin(0), 0 ,"Sin error"))
	res = append(res, assert(i32.cos(0), 1, "Cos error"))
}

func I32ArithmeticShorthand() () {
	res = append(res, assert(10 + 10, 20, "Add error"))
	res = append(res, assert(10 - 10, 0, "Subtract error"))
	res = append(res, assert(10 * 10, 100, "Multiply error"))
	res = append(res, assert(10 / 10, 1, "Divide error"))
	res = append(res, assert(10 % 3, 1, "Mod error"))
	res = append(res, assert(10 << 5, 320, "Bit Shift Left error"))
	res = append(res, assert(10 >> 5, 0, "Bit Shift Right error"))
	res = append(res, assert(10 & 5, 0,"Bit AND error"))
	res = append(res, assert(10 | 5, 15, "Bit OR error"))
	res = append(res, assert(10 ^ 5, 15, "Bit XOR error"))
	res = append(res, assert(10 &^ 2, 8, "Bit CLEAR error"))
}

func I32RelationalFunctions() () {
	res = append(res, assert(i32.eq(5, 5), true, "I32 Equality error"))
	res = append(res, assert(i32.uneq(5, 5), false, "I32 Inequality error"))
	res = append(res, assert(i32.gt(5, 10), false, "I32 Greater error"))
	res = append(res, assert(i32.gteq(15, 10), true, "I32 Greater And Equal error"))
	res = append(res, assert(i32.lt(5, 10), true, "I32 Lesser than error"))
	res = append(res, assert(i32.lteq(10, 6), false, "I32 Lesser Or Equal error"))
}

func I32RelationalShorthand() (){
	res = append(res, assert(5 == 5, true, "I32 Equality Shorthand error"))
	res = append(res, assert(5 != 5, false, "I32 Inequality Shorthand error"))
	
	res = append(res, assert(5 > 10, false, "I32 Greater Shorthand error"))
	res = append(res, assert(15 >= 10, true, "I32 Greater And Equal Shorthand error"))
	res = append(res, assert(5 < 10, true, "I32 Lesser Shorthand error"))
	res = append(res, assert(10 <= 6, false, "I32 Lesser Or Equal error"))
}

func testI32() () {
	I32ArithmeticFunctions()
	I32ArithmeticShorthand()
	I32RelationalFunctions()
	I32RelationalShorthand()
}
