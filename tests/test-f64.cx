package testing


func F64ArithmeticFunctions() () {
	res = append(res, assert(f64.add(10.0D, 10.0D), 20.0D, "Add error"))
	res = append(res, assert(f64.sub(10.0D, 10.0D), 0.0D, "Subtract error"))
	res = append(res, assert(f64.mul(10.0D, 10.0D), 100.0D, "Multiply error"))
	res = append(res, assert(f64.div(10.0D, 10.0D), 1.0D, "Divide error"))
	res = append(res, assert(f64.pow(10.0D, 5.0D), 100000.0D, "Pow error"))
	res = append(res, assert(f64.abs(-10.0D), 10.0D, "Absolute Value error"))
	res = append(res, assert(f64.sqrt(4.0D), 2.0D, "Square Root error"))
	res = append(res, assert(f64.log(1.0D), 0.0D, "Log error"))
	res = append(res, assert(f64.log2(2.0D), 1.0D, "Log2 error"))
	res = append(res, assert(f64.log10(10.0D), 1.0D, "Log10 error"))
	res = append(res, assert(f64.max(3.0D, 1.0D), 3.0D, "MAX error"))
	res = append(res, assert(f64.min(3.0D, 1.0D), 1.0D, "MIN error"))
	res = append(res, assert(f64.sin(0.0D), 0.0D, "Sin error"))
	res = append(res, assert(f64.cos(0.0D), 1.0D, "Cos error"))
}

func F64ArithmeticShorthand() () {
	res = append(res, assert(10.0D + 10.0D, 20.0D, "Add error"))
	res = append(res, assert(10.0D - 10.0D, 0.0D, "Subtract error"))
	res = append(res, assert(10.0D * 10.0D, 100.0D, "Multiply error"))
	res = append(res, assert(10.0D / 10.0D, 1.0D, "Divide error"))
}

func F64RelationalFunctions() () {
	res = append(res, assert(f64.eq(5.0D, 5.0D), true, "F64 Equality error"))
	res = append(res, assert(f64.uneq(5.0D, 5.0D), false, "F64 Inequality error"))
	res = append(res, assert(f64.gt(5.0D, 10.0D), false, "F64 Greater error"))
	res = append(res, assert(f64.gteq(15.0D, 10.0D), true, "F64 Greater And Equal error"))
	res = append(res, assert(f64.lt(5.0D, 10.0D), true, "F64 Lesser error"))
	res = append(res, assert(f64.lteq(10.0D, 6.0D), false, "F64 Lesser Or Equal error"))
}

func F64RelationalShorthand() () {
	res = append(res, assert(5.0D == 5.0D, true, "F64 Equality Shorthand error"))
	res = append(res, assert(5.0D != 5.0D, false, "F64 Inequality Shorthand error"))
	res = append(res, assert(5.0D > 10.0D, false, "F64 Greater Shorthand error"))
	res = append(res, assert(15.0D >= 10.0D, true, "F64 Greater And Equal Shorthand error"))
	res = append(res, assert(5.0D < 10.0D, true, "F64 Lesser Shorthand error"))
	res = append(res, assert(10.0D <= 6.0D, false, "F64 Lesser Or Equal error"))
}

func testF64() () {
	F64ArithmeticFunctions()
	F64ArithmeticShorthand()
	F64RelationalFunctions()
	F64RelationalShorthand()
}
