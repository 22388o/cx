package main 

func I32Functions() () {
	str.print("--------I32 Functions Testing--------")
	test(i32.add(10, 10), 20, "Add error")
	test(i32.sub(10, 10), 0, "Subtract error")
	test(i32.mul(10, 10), 100, "Multiply error")
	test(i32.div(10, 10), 1, "Divide error")
	test(i32.mod(10, 3), 1, "Mod error")
	test(i32.bitshl(10, 5), 320, "Bit Shift Left error")
	test(i32.bitshr(10, 5), 0, "Bit Shift Right error")
	test(i32.bitand(10, 5), 0 , "Bit AND error")
	test(i32.bitor(10, 5), 15, "Bit OR error")
	test(i32.bitxor(10, 5), 15, "Bit XOR error")
	test(i32.bitclear(10, 2), 8, "Bit CLEAR error")
	test(i32.pow(10, 5), 100000, "Pow error")
	test(i32.abs(-10), 10, "Absolute Value error")
	test(i32.i64(10), 10L, "Convert to I64 error")
	test(i32.f32(10), 10.0, "Convert to F32 error")
	test(i32.f64(10), 10.0D, "Convert to F64 error")
	str.print("FAIL: i32.str() crash!")
	//test(i32.str(10), "10", "Convert to String error")
	str.print("PASS: i32.print()")
	i32.print(1)
}

func I32Shorthand() () {
	str.print("--------I32 Shorthand Testing--------")
	test(10 + 10, 20, "Add error")
	test(10 - 10, 0, "Subtract error")
	test(10 * 10, 100, "Multiply error")
	test(10 / 10, 1, "Divide error")
	test(10 % 3, 1, "Mod error")
	str.print("FAIL: Operator (<<) crash!")
	//test(10 << 5, 320, "Bit Shift Left error")
	str.print("FAIL: Operator (>>) crash!")
	//test(10 >> 5, 0, "Bit Shift Right error")
	test(10 & 5, 0,"Bit AND error")
	test(10 | 5, 15, "Bit OR error")
	test(10 ^ 5, 15, "Bit XOR error")
	str.print("FAIL: Operator (&^) crash!")
	//test(10 &^ 2, 8, "Bit CLEAR error")
	test(10 ** 5, 100000, "Pow error")
}

func I64Functions() () {
	str.print("--------I64 Functions Testing--------")
	test(i64.add(10L, 10L), 20L, "Add error")
	test(i64.sub(10L, 10L), 0L, "Subtract error")
	test(i64.mul(10L, 10L), 100L, "Multiply error")
	test(i64.div(10L, 10L), 1L, "Divide error")
	test(i64.mod(10L, 3L), 1L, "Mod error")
	test(i64.bitshl(10L, 5L), 320L, "Bit Shift Left error")
	test(i64.bitshr(10L, 5L), 0L, "Bit Shift Right error")
	test(i64.bitand(10L, 5L), 0L, "Bit AND error")
	test(i64.bitor(10L, 5L), 15L, "Bit OR error")
	test(i64.bitxor(10L, 5L), 15L, "Bit XOR error")
	test(i64.bitclear(10L, 2L), 8L, "Bit CLEAR error")
	test(i64.pow(10L, 5L), 100000L, "Pow error")
	test(i64.abs(-10L), 10L, "Absolute Value error")
	str.print("FAIL: i64.str() crash!")
	//test(i64.str(10L), "10", "Convert to String error")
	str.print("PASS: 164.print()")
	i64.print(10L)
}

func I64Shorthand() () {
	str.print("--------I64 Shorthand Testing--------")
	test(10L + 10L, 20L, "Add error")
	test(10L - 10L, 0L, "Subtract error")
	test(10L * 10L, 100L, "Multiply error")
	test(10L / 10L, 1L, "Divide error")
	test(10L % 3L, 1L, "Mod error")
	str.print("FAIL: Operator (<<) crash!")
	//test(10L << 5L, 320L, "Bit Shift Left error")
	str.print("FAIL: Operator (>>) crash!")
	//test(10L >> 5L, 0L, "Bit Shift Right error")
	test(10L & 5L, 0L,"Bit AND error")
	test(10L | 5L, 15L, "Bit OR error")
	test(10L ^ 5L, 15L, "Bit XOR error")
	str.print("FAIL: Operator (&^) crash!")
	//test(10L &^ 2L, 8L, "Bit CLEAR error")
	test(10L ** 5L, 100000L, "Pow error")
}

func F32Functions() () {
	str.print("--------F32 Functions Testing--------")
	test(f32.add(10.0, 10.0), 20.0, "Add error")
	test(f32.sub(10.0, 10.0), 0.0, "Subtract error")
	test(f32.mul(10.0, 10.0), 100.0, "Multiply error")
	test(f32.div(10.0, 10.0), 1.0, "Divide error")
	str.print("FAIL: f32.mod() crash!")
	//test(f32.mod(10.0, 3.0), 1.0, "Mod error")
	str.print("FAIL: f32.bitshl() crash!")
	//test(f32.bitshl(10.0, 5.0), 320.0, "Bit Shift Left error")
	str.print("FAIL: f32.bitshr() crash!")
	//test(f32.bitshr(10.0, 5.0), 0.0, "Bit Shift Right error")
	str.print("FAIL: f32.bitand() crash!")
	//test(f32.bitand(10.0, 5.0), 0.0 , "Bit AND error")
	str.print("FAIL: f32.bitor() crash!")
	//test(f32.bitor(10.0, 5.0), 15.0, "Bit OR error")
	str.print("FAIL: f32.bitxor() crash!")
	//test(f32.bitxor(10.0, 5.0), 15.0, "Bit XOR error")
	str.print("FAIL: f32.bitclear() crash!")
	//test(f32.bitclear(10.0, 2.0), 8.0, "Bit CLEAR error")
	test(f32.pow(10.0, 5.0), 100000.0, "Pow error")
	test(f32.abs(-10.0), 10.0, "Absolute Value error")
	str.print("FAIL: f32.f64() crash!")
	//test(f32.f64(10.0), 10.0D, "Convert to F64 error")
	str.print("FAIL: f32.str() crash!")
	//test(f32.str(10.0), "10", "Convert to String error")
	str.print("PASS: f32.print()")
	f32.print(2.3)
}

func F32Shorthand() () {
	str.print("--------F32 Shorthand Testing--------")
	test(10.0 + 10.0, 20.0, "Add error")
	test(10.0 - 10.0, 0.0, "Subtract error")
	test(10.0 * 10.0, 100.0, "Multiply error")
	test(10.0 / 10.0, 1.0, "Divide error")
	str.print("FAIL: Operator (%) crash!")
	//test(10.0 % 3.0, 1.0, "Mod error")
	str.print("FAIL: Operator (<<) crash!")
	//test(10.0 << 5.0, 320.0, "Bit Shift Left error")
	str.print("FAIL: Operator (>>) crash!")
	//test(10.0 >> 5.0, 0.0, "Bit Shift Right error")
	str.print("FAIL: Operator (&) crash!")
	//test(10.0 & 5.0, 0.0,"Bit AND error")
	str.print("FAIL: Operator (|) crash!")
	//test(10.0 | 5.0, 15.0, "Bit OR error")
	str.print("FAIL: Operator (^) crash!")
	//test(10.0 ^ 5.0, 15.0, "Bit XOR error")
	str.print("FAIL: Operator (&^) crash!")
	//test(10.0 &^ 2.0, 8.0, "Bit CLEAR error")
	test(10.0 ** 5.0, 100000.0, "Pow error")
}

func F64Functions() () {
	str.print("--------F64 Functions Testing--------")
	test(f64.add(10.0D, 10.0D), 20.0D, "Add error")
	test(f64.sub(10.0D, 10.0D), 0.0D, "Subtract error")
	test(f64.mul(10.0D, 10.0D), 100.0D, "Multiply error")
	test(f64.div(10.0D, 10.0D), 1.0D, "Divide error")
	str.print("FAIL: f64.mod() crash!")
	//test(f64.mod(10.0D, 3.0D), 1.0D, "Mod error")
	str.print("FAIL: f64.bitshl() crash!")
	//test(f64.bitshl(10.0D, 5.0D), 320.0D, "Bit Shift Left error")
	str.print("FAIL: f64.bitshr() crash!")
	//test(f64.bitshr(10.0D, 5.0D), 0.0D, "Bit Shift Right error")
	str.print("FAIL: f64.bitand() crash!")
	//test(f64.bitand(10.0D, 5.0D), 0.0D , "Bit AND error")
	str.print("FAIL: f64.bitor() crash!")
	//test(f64.bitor(10.0D, 5.0D), 15.0D, "Bit OR error")
	str.print("FAIL: f64.bitxor() crash!")
	//test(f64.bitxor(10.0D, 5.0D), 15.0D, "Bit XOR error")
	str.print("FAIL: f64.bitclear() crash!")
	//test(f64.bitclear(10.0D, 2.0D), 8.0D, "Bit CLEAR error")
	test(f64.pow(10.0D, 5.0D), 100000.0D, "Pow error")
	test(f64.abs(-10.0D), 10.0D, "Absolute Value error")
	str.print("FAIL: f64.str() crash!")
	//test(f64.str(10.0D), "10", "Convert to String error")
	str.print("PASS: f64.print()")
	f64.print(5.4D)
}

func F64Shorthand() () {
	str.print("--------F64 Shorthand Testing--------")
	test(10.0D + 10.0D, 20.0D, "Add error")
	test(10.0D - 10.0D, 0.0D, "Subtract error")
	test(10.0D * 10.0D, 100.0D, "Multiply error")
	test(10.0D / 10.0D, 1.0D, "Divide error")
	str.print("FAIL: Operator (%) crash!")
	//test(10.0D % 3.0D, 1.0D, "Mod error")
	str.print("FAIL: Operator (<<) crash!")
	//test(10.0D << 5.0D, 320.0D, "Bit Shift Left error")
	str.print("FAIL: Operator (>>) crash!")
	//test(10.0D >> 5.0D, 0.0D, "Bit Shift Right error")
	str.print("FAIL: Operator (&) crash!")
	//test(10.0D & 5.0D, 0.0D,"Bit AND error")
	str.print("FAIL: Operator (|) crash!")
	//test(10.0D | 5.0D, 15.0D, "Bit OR error")
	str.print("FAIL: Operator (^) crash!")
	//test(10.0D ^ 5.0D, 15.0D, "Bit XOR error")
	str.print("FAIL: Operator (&^) crash!")
	//test(10.0D &^ 2.0D, 8.0D, "Bit CLEAR error")
	test(10.0D ** 5.0D, 100000.0D, "Pow error")
}

func main () () {
	test.start()

	I32Functions()
	I32Shorthand()
	I64Functions()
	I64Shorthand()
	F32Functions()
	F32Shorthand()
	F64Functions()
	F64Shorthand()

	test.stop()
}
