package testing

func Equality() () {
	res = append(res, assert(bool.eq(true, true), true, "Bool Equality(true) error"))
	res = append(res, assert(bool.eq(false, true), false, "Bool Equality(false) error"))
	res = append(res, assert(bool.eq(true, false), false, "Bool Equality(false) error"))
	res = append(res, assert(bool.eq(false, false), true, "Bool Equality(false) error"))

	res = append(res, assert((true == true), true, "Bool Equality(true) error"))
	res = append(res, assert((true == false), false, "Bool Equality(false) error"))
	res = append(res, assert((false == true), false, "Bool Equality(false) error"))
	res = append(res, assert((false == false), true, "Bool Equality(true) error"))
}

func Inequality() () {
	res = append(res, assert(bool.uneq(true, true), false, "Bool Inequality(false) error"))
	res = append(res, assert(bool.uneq(false, true), true, "Bool Inequality(true) error"))
	res = append(res, assert(bool.uneq(true, false), true, "Bool Inequality(true) error"))
	res = append(res, assert(bool.uneq(false, false), false, "Bool Inequality(false) error"))

	res = append(res, assert((true != true), false, "Bool Inequality(false) error"))
	res = append(res, assert((true != false), true, "Bool Inequality(true) error"))
	res = append(res, assert((false != true), true, "Bool Inequality(true) error"))
	res = append(res, assert((false != false), false, "Bool Inequality(false) error"))
}

func And() () {
	res = append(res, assert(bool.and(true, true), true, "Bool And(true) error"))
	res = append(res, assert(bool.and(true, false), false, "Bool And(false) error"))
	res = append(res, assert(bool.and(false, true), false, "Bool And(false) error"))
	res = append(res, assert(bool.and(false, false), false, "Bool And(false) error"))

	res = append(res, assert(bool.and(true, true), true, "Bool And(true) error"))
	res = append(res, assert(bool.and(true, false), false, "Bool And(false) error"))
	res = append(res, assert(bool.and(false, true), false, "Bool And(false) error"))
	res = append(res, assert(bool.and(false, false), false, "Bool And(false) error"))

	res = append(res, assert((true && true), true, "Bool And(true) error"))
	res = append(res, assert((true && false), false, "Bool And(false) error"))
	res = append(res, assert((false && false), false, "Bool And(false) error"))
	res = append(res, assert((false && true), false, "Bool And(false) error"))
}

func Or() () {
	res = append(res, assert(bool.or(true, true), true, "Bool Or(true) error"))
	res = append(res, assert(bool.or(true, false), true, "Bool Or(true) error"))
	res = append(res, assert(bool.or(false, true), true, "Bool Or(true) error"))
	res = append(res, assert(bool.or(false, false), false, "Bool Or(false) error"))

	res = append(res, assert(bool.or(true, true), true, "Bool Or(true) error"))
	res = append(res, assert(bool.or(true, false), true, "Bool Or(true) error"))
	res = append(res, assert(bool.or(false, true), true, "Bool Or(true) error"))
	res = append(res, assert(bool.or(false, false), false, "Bool Or(false) error"))

	res = append(res, assert((true || true), true, "Bool Or(true) error"))
	res = append(res, assert((true || false), true, "Bool Or(true) error"))
	res = append(res, assert((false || false), false, "Bool Or(false) error"))
	res = append(res, assert((false || true), true, "Bool Or(true) error"))
}

func Not() () {
	res = append(res, assert(bool.not(false), true, "Bool not(true) error"))
	res = append(res, assert(bool.not(true), false, "Bool not(false) error"))
	
	res = append(res, assert((!true), false, "Bool Not (false) error"))
	res = append(res, assert((!false), true, "Bool Not (true) error"))
}

func testBOOL () () {
	Equality()
	Inequality()
	And()
	Or()
	Not()
}
