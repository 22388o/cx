package testing

func I64ArithmeticFunctions() () {
	res = append(res, assert(i64.add(10L, 10L), 20L, "Add error"))
	res = append(res, assert(i64.sub(10L, 10L), 0L, "Subtract error"))
	res = append(res, assert(i64.mul(10L, 10L), 100L, "Multiply error"))
	res = append(res, assert(i64.div(10L, 10L), 1L, "Divide error"))
	res = append(res, assert(i64.mod(10L, 3L), 1L, "Mod error"))
	res = append(res, assert(i64.bitshl(10L, 5L), 320L, "Bit Shift Left error"))
	res = append(res, assert(i64.bitshr(10L, 5L), 0L, "Bit Shift Right error"))
	res = append(res, assert(i64.bitand(10L, 5L), 0L, "Bit AND error"))
	res = append(res, assert(i64.bitor(10L, 5L), 15L, "Bit OR error"))
	res = append(res, assert(i64.bitxor(10L, 5L), 15L, "Bit XOR error"))
	res = append(res, assert(i64.bitclear(10L, 2L), 8L, "Bit CLEAR error"))
	res = append(res, assert(i64.pow(10L, 5L), 100000L, "Pow error"))
	res = append(res, assert(i64.abs(-10L), 10L, "Absolute Value error"))
	res = append(res, assert(i64.sqrt(4L), 2L, "Square Root error"))
	res = append(res, assert(i64.log(1L), 0L, "Log error"))
	res = append(res, assert(i64.log2(2L), 1L, "Log2 error"))
	res = append(res, assert(i64.log10(10L), 1L, "Log10 error"))
	res = append(res, assert(i64.max(3L, 1L), 3L, "MAX error"))
	res = append(res, assert(i64.min(3L, 1L), 1L, "MIN error"))
	res = append(res, assert(i64.sin(0L), 0L, "Sin error"))
	res = append(res, assert(i64.cos(0L), 1L, "Cos error"))
}

func I64ArithmeticShorthand() () {
	res = append(res, assert(10L + 10L, 20L, "Add error"))
	res = append(res, assert(10L - 10L, 0L, "Subtract error"))
	res = append(res, assert(10L * 10L, 100L, "Multiply error"))
	res = append(res, assert(10L / 10L, 1L, "Divide error"))
	res = append(res, assert(10L % 3L, 1L, "Mod error"))
	res = append(res, assert(10L << 5L, 320L, "Bit Shift Left error"))
	res = append(res, assert(10L >> 5L, 0L, "Bit Shift Right error"))
	res = append(res, assert(10L & 5L, 0L,"Bit AND error"))
	res = append(res, assert(10L | 5L, 15L, "Bit OR error"))
	res = append(res, assert(10L ^ 5L, 15L, "Bit XOR error"))
	res = append(res, assert(10L &^ 2L, 8L, "Bit CLEAR error"))
	// assert(10L ** 5L, 100000L, "Pow error") // removed this syntax due to conflicts with pointer syntax
}

func I64RelationalFunctions() () {
	res = append(res, assert(i64.eq(5L, 5L), true, "I64 Equality error"))
	res = append(res, assert(i64.uneq(5L, 5L), false, "I64 Inequality error"))
	res = append(res, assert(i64.gt(5L, 10L), false, "I64 Greater error"))
	res = append(res, assert(i64.gteq(15L, 10L), true, "I64 Greater And Equal error"))
	res = append(res, assert(i64.lt(5L, 10L), true, "I64 Lesser error"))
	res = append(res, assert(i64.lteq(10L, 6L), false, "I64 Lesser Or Equal error"))
}

func I64RelationalShorthand() () {
	res = append(res, assert(5L == 5L, true, "I64 Equality Shorthand error"))
	res = append(res, assert(i64.uneq(5L, 5L), false, "I64 Inequality error"))
	res = append(res, assert(5L != 5L, false, "I64 Inequality Shorthand error"))
	res = append(res, assert(5L > 10L, false, "I64 Greater Shorthand error"))
	res = append(res, assert(15L >= 10L, true, "I64 Greater And Equal Shorthand error"))
	res = append(res, assert(5L < 10L, true, "I64 Lesser Shorthand error"))
	res = append(res, assert(10L <= 6L, false, "I64 Lesser Or Equal error"))
}

func testI64() () {
	I64ArithmeticFunctions()
	I64ArithmeticShorthand()
	I64RelationalFunctions()
	I64RelationalShorthand()
}
