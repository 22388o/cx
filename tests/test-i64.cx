package main

func I64ArithmeticFunctions() () {
	assert_(i64.add(10L, 10L), 20L, "Add error")
	assert_(i64.sub(10L, 10L), 0L, "Subtract error")
	assert_(i64.mul(10L, 10L), 100L, "Multiply error")
	assert_(i64.div(10L, 10L), 1L, "Divide error")
	assert_(i64.mod(10L, 3L), 1L, "Mod error")
	assert_(i64.bitshl(10L, 5L), 320L, "Bit Shift Left error")
	assert_(i64.bitshr(10L, 5L), 0L, "Bit Shift Right error")
	assert_(i64.bitand(10L, 5L), 0L, "Bit AND error")
	assert_(i64.bitor(10L, 5L), 15L, "Bit OR error")
	assert_(i64.bitxor(10L, 5L), 15L, "Bit XOR error")
	assert_(i64.bitclear(10L, 2L), 8L, "Bit CLEAR error")
	assert_(i64.pow(10L, 5L), 100000L, "Pow error")
	assert_(i64.abs(-10L), 10L, "Absolute Value error")
	assert_(i64.sqrt(4L), 2L, "Square Root error")
	assert_(i64.log(1L), 0L, "Log error")
	assert_(i64.log2(2L), 1L, "Log2 error")
	assert_(i64.log10(10L), 1L, "Log10 error")
	assert_(i64.max(3L, 1L), 3L, "MAX error")
	assert_(i64.min(3L, 1L), 1L, "MIN error")
}

func I64ArithmeticShorthand() () {
	assert_(10L + 10L, 20L, "Add error")
	assert_(10L - 10L, 0L, "Subtract error")
	assert_(10L * 10L, 100L, "Multiply error")
	assert_(10L / 10L, 1L, "Divide error")
	assert_(10L % 3L, 1L, "Mod error")
	assert_(10L << 5L, 320L, "Bit Shift Left error")
	assert_(10L >> 5L, 0L, "Bit Shift Right error")
	assert_(10L & 5L, 0L,"Bit AND error")
	assert_(10L | 5L, 15L, "Bit OR error")
	assert_(10L ^ 5L, 15L, "Bit XOR error")
	assert_(10L &^ 2L, 8L, "Bit CLEAR error")
	// assert_(10L ** 5L, 100000L, "Pow error") // removed this syntax due to conflicts with pointer syntax
}

func I64RelationalFunctions() () {
	assert_(i64.eq(5L, 5L), true, "I64 Equality error")
	assert_(i64.uneq(5L, 5L), false, "I64 Inequality error")
	assert_(i64.gt(5L, 10L), false, "I64 Greater error")
	assert_(i64.gteq(15L, 10L), true, "I64 Greater And Equal error")
	assert_(i64.lt(5L, 10L), true, "I64 Lesser error")
	assert_(i64.lteq(10L, 6L), false, "I64 Lesser Or Equal error")
}

func I64RelationalShorthand() () {
	assert_(5L == 5L, true, "I64 Equality Shorthand error")
	assert_(i64.uneq(5L, 5L), false, "I64 Inequality error")
	assert_(5L != 5L, false, "I64 Inequality Shorthand error")
	assert_(5L > 10L, false, "I64 Greater Shorthand error")
	assert_(15L >= 10L, true, "I64 Greater And Equal Shorthand error")
	assert_(5L < 10L, true, "I64 Lesser Shorthand error")
	assert_(10L <= 6L, false, "I64 Lesser Or Equal error")
}

func main() () {
	I64ArithmeticFunctions()
	I64ArithmeticShorthand()
	I64RelationalFunctions()
	I64RelationalShorthand()
}
