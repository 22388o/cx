package testing

type miniStruct struct {
	mInt i32
	mLong i64
	mFloat f32
	mDecimal f64
	mBoolean bool
	mByt byte
	mString str
}

type TestStruct struct {
	int i32
	long i64
	float f32
	decimal f64
	boolean bool
	byt byte
	string str
	anotherStruct miniStruct
}

var gi32Ptr *i32
var gi64Ptr *i64

func returnPtrArrayStruct () (ptr *[2]miniStruct) {
	var c [2]miniStruct
	c[0] = miniStruct{mInt: 11, mString: "Foobar"}
	c[1] = miniStruct{mInt: 13, mString: "Barfoo"}

	ptr = &c
}

func testPointers () {
	str.print("Running Pointer Testing...")

	var li32Ptr *i32
	var li64Ptr *i64
	var num1 i32
	var num2 i64

	num1 = 15
	num2 = 55L

	li32Ptr = &num1
	li64Ptr = &num2

	assert(*li32Ptr, 15, "")
	assert(*li64Ptr, 55L, "")
	
	gi32Ptr = &num1
	gi64Ptr = &num2

	assert(*gi32Ptr, 15, "")
	assert(*gi64Ptr, 55L, "")

	var pStrct1 *TestStruct
	var pStrct2 *TestStruct

	var strct1 TestStruct
	var strct2 TestStruct

	strct1 = TestStruct{
		int: 32,
		long: 64L,
		float: 32.0,
		decimal: 64.0D,
		boolean: true,
		byt: 255B,
		string: "Foo bar"}

	strct2 = TestStruct{
		int: 33,
		long: 63L,
		float: 33.0,
		decimal: 63.0D,
		boolean: false,
		byt: 41B,
		string: "Bar foo"}

	pStrct1 = &strct1
	pStrct2 = &strct2

	(*pStrct1).int = num1
	(*pStrct2).long = num2

	assert((*pStrct1).int, 15, "")
	assert((*pStrct2).long, 55L, "")

	var pStrcts1 *[2]TestStruct
	var strcts1 [2]TestStruct

	strcts1[0] = strct1
	strcts1[1] = strct2

	assert(strcts1[0].decimal, 64.0D, "")
	assert(strcts1[1].decimal, 63.0D, "")

	pStrcts1 = &strcts1

	assert((*pStrct1).int, 15, "")
	assert((*pStrct1).long, 64L, "")
	assert((*pStrct1).float, 32.0, "")
	assert((*pStrct1).decimal, 64.0D, "")
	assert((*pStrct1).boolean, true, "")
	assert((*pStrct1).byt, 255B, "")
	assert((*pStrct1).string, "Foo bar", "")

	assert((*pStrct2).int, 33, "")
	assert((*pStrct2).long, 55L, "")
	assert((*pStrct2).float, 33.0, "")
	assert((*pStrct2).decimal, 63.0D, "")
	assert((*pStrct2).boolean, false, "")
	assert((*pStrct2).byt, 41B, "")
	assert((*pStrct2).string, "Bar foo", "")

	var ptrStrcts *[2]miniStruct
	ptrStrcts = returnPtrArrayStruct()

	assert((*ptrStrcts)[0].mInt, 11, "")
	assert((*ptrStrcts)[0].mString, "Foobar", "")
	assert((*ptrStrcts)[1].mInt, 13, "")
	assert((*ptrStrcts)[1].mString, "Barfoo", "")

	// var pStrcts *[2]TestStruct
	// // var pStrcts *[2]TestStruct

	// var strcts [2]TestStruct
	// // var strcts [2]TestStruct

	// strcts[0] = strct1
	// strcts[1] = strct2

	// pStrcts = &strcts

	// assert((*pStrcts)[i32.add(0, 0)].int, 32, "")
	// assert((*pStrcts)[i32.add(0, 0)].long, 64L, "")
	// assert((*pStrcts)[i32.add(0, 0)].decimal, 64.0D, "")
	// //
	// // To Do
	// //
	
	// var recStruct TestStruct
	// recStruct = (*pStrcts)[0]

	// assert(recStruct.int, 32, "")
	// assert(recStruct.long, 64L, "")
	// //
	// // To Do
	// //
	
	// recStruct = (*pStrcts)[1]
	// assert(recStruct.int, 33, "")
	// assert(recStruct.long, 63L, "")
}

