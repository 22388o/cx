package opcodes

import (
	"github.com/skycoin/cx/cx/ast"
	"github.com/skycoin/cx/cx/constants"
	"github.com/skycoin/cx/cx/globals"
	"github.com/skycoin/cx/cx/types"
)

//TODO: UND is used for both integers and for undefined
//TODO: dont need opcode for non-atomic types
//TODO: Compiler needs to substitute for types and specify earlier

// In Returns a slice of arguments from an argument list
func In(params ...*ast.CXArgument) []*ast.CXArgument {
	return params
}

// Out Returns a slice of arguments from an argument list
func Out(params ...*ast.CXArgument) []*ast.CXArgument {
	return params
}

func RegisterOpcodes(prgrm *ast.CXProgram) {
	ast.Operators = make([]*ast.CXNativeFunction, ast.OPERATOR_HANDLER_COUNT)

	RegisterOpCode(prgrm, constants.OP_IDENTITY, "identity", opIdentity, In(ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_UND_TYPE))
	RegisterOpCode(prgrm, constants.OP_GOTO, "goto", opGoto, nil, nil)
	RegisterOpCode(prgrm, constants.OP_BREAK, "break", opBreak, nil, nil)
	RegisterOpCode(prgrm, constants.OP_CONTINUE, "continue", opContinue, nil, nil)
	RegisterOpCode(prgrm, constants.OP_NOP, "nop", opNop, nil, nil)

	RegisterOpCode(prgrm, constants.OP_JMP, "jmp", opJmp, In(ast.ConstCxArg_BOOL), nil)
	RegisterOpCode(prgrm, constants.OP_ABS_JMP, "absjmp", opAbsJmp, In(ast.ConstCxArg_BOOL), nil)
	RegisterOpCode(prgrm, constants.OP_JMP_EQ, "jmpeq", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), nil)
	RegisterOpCode(prgrm, constants.OP_JMP_UNEQ, "jmpuneq", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), nil)
	RegisterOpCode(prgrm, constants.OP_JMP_GT, "jmpgt", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), nil)
	RegisterOpCode(prgrm, constants.OP_JMP_GTEQ, "jmpgteq", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), nil)
	RegisterOpCode(prgrm, constants.OP_JMP_LT, "jmplt", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), nil)
	RegisterOpCode(prgrm, constants.OP_JMP_LTEQ, "jmplteq", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), nil)
	RegisterOpCode(prgrm, constants.OP_JMP_ZERO, "jmpzero", nil, In(ast.ConstCxArg_UND_TYPE), nil)
	RegisterOpCode(prgrm, constants.OP_JMP_NOT_ZERO, "jmpnotzero", nil, In(ast.ConstCxArg_UND_TYPE), nil)

	RegisterOpCode(prgrm, constants.OP_DEBUG_PRINT_STACK, "debug", opDebugPrintStack, nil, nil)
	RegisterOpCode(prgrm, constants.OP_SERIALIZE, "serialize", opSerialize, In(ast.ConstCxArg_Affordance), Out(ast.ConstCxArg_PTR))
	RegisterOpCode(prgrm, constants.OP_DESERIALIZE, "deserialize", opDeserialize, In(ast.ConstCxArg_I32), nil)

	RegisterOpCode(prgrm, constants.OP_EQUAL, "eq", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_BOOL))
	RegisterOpCode(prgrm, constants.OP_UNEQUAL, "uneq", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_BOOL))
	RegisterOpCode(prgrm, constants.OP_LT, "lt", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_BOOL))
	RegisterOpCode(prgrm, constants.OP_GT, "gt", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_BOOL))
	RegisterOpCode(prgrm, constants.OP_LTEQ, "lteq", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_BOOL))
	RegisterOpCode(prgrm, constants.OP_GTEQ, "gteq", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_BOOL))

	RegisterOpCode(prgrm, constants.OP_BITAND, "bitand", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_UND_TYPE))
	RegisterOpCode(prgrm, constants.OP_BITOR, "bitor", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_UND_TYPE))
	RegisterOpCode(prgrm, constants.OP_BITXOR, "bitxor", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_UND_TYPE))
	RegisterOpCode(prgrm, constants.OP_BITCLEAR, "bitclear", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_UND_TYPE))
	RegisterOpCode(prgrm, constants.OP_BITSHL, "bitshl", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_UND_TYPE))
	RegisterOpCode(prgrm, constants.OP_BITSHR, "bitshr", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_UND_TYPE))
	RegisterOpCode(prgrm, constants.OP_MUL, "mul", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_UND_TYPE))
	RegisterOpCode(prgrm, constants.OP_DIV, "div", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_UND_TYPE))
	RegisterOpCode(prgrm, constants.OP_MOD, "mod", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_UND_TYPE))
	RegisterOpCode(prgrm, constants.OP_ADD, "add", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_UND_TYPE))
	RegisterOpCode(prgrm, constants.OP_SUB, "sub", nil, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_UND_TYPE))
	RegisterOpCode(prgrm, constants.OP_NEG, "neg", nil, In(ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_UND_TYPE))

	RegisterOpCode(prgrm, constants.OP_ASSERT, "assert", opAssertValue, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_STR), Out(ast.ConstCxArg_BOOL))
	RegisterOpCode(prgrm, constants.OP_TEST, "test", opTest, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_STR), nil)
	RegisterOpCode(prgrm, constants.OP_PANIC, "panic", opPanic, In(ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_UND_TYPE, ast.ConstCxArg_STR), nil)

	RegisterOpCode(prgrm, constants.OP_BOOL_OR, "bool.or", opBoolOr, In(ast.ConstCxArg_BOOL, ast.ConstCxArg_BOOL), Out(ast.ConstCxArg_BOOL))
	RegisterOpCode(prgrm, constants.OP_BOOL_AND, "bool.and", opBoolAnd, In(ast.ConstCxArg_BOOL, ast.ConstCxArg_BOOL), Out(ast.ConstCxArg_BOOL))
	RegisterOpCode(prgrm, constants.OP_BOOL_NOT, "bool.not", opBoolNot, In(ast.ConstCxArg_BOOL), Out(ast.ConstCxArg_BOOL))

	RegisterOpCode(prgrm, constants.OP_APPEND, "append", opSliceAppend, In(ast.Slice(types.UNDEFINED), ast.ConstCxArg_UND_TYPE), Out(ast.Slice(types.UNDEFINED)))

	RegisterFunction(prgrm, "resize", opSliceResize, In(ast.Slice(types.UNDEFINED), ast.ConstCxArg_I32), Out(ast.Slice(types.UNDEFINED)))
	RegisterFunction(prgrm, "insert", opSliceInsertElement, In(ast.Slice(types.UNDEFINED), ast.ConstCxArg_I32, ast.ConstCxArg_UND_TYPE), Out(ast.Slice(types.UNDEFINED)))
	RegisterFunction(prgrm, "remove", opSliceRemoveElement, In(ast.Slice(types.UNDEFINED), ast.ConstCxArg_I32), Out(ast.Slice(types.UNDEFINED)))
	RegisterFunction(prgrm, "copy", opSliceCopy, In(ast.Slice(types.UNDEFINED), ast.Slice(types.UNDEFINED)), Out(ast.ConstCxArg_I32))

	RegisterFunction(prgrm, "len", opSliceLen, In(ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_I32))

	RegisterFunction(prgrm, "printf", opPrintf, In(ast.ConstCxArg_UND_TYPE), nil)
	RegisterFunction(prgrm, "sprintf", opSprintf, In(ast.ConstCxArg_UND_TYPE), Out(ast.ConstCxArg_STR))

	//read user input from standard input
	//TODO: Better Keyword
	//TODO: Put into package
	RegisterFunction(prgrm, "read", OpReadStdin, nil, Out(ast.ConstCxArg_STR))

	RegisterOperator(prgrm, "bool.eq", opBoolEqual, In(ast.ConstCxArg_BOOL, ast.ConstCxArg_BOOL), Out(ast.ConstCxArg_BOOL), types.BOOL, constants.OP_EQUAL)
	RegisterOperator(prgrm, "bool.uneq", opBoolUnequal, In(ast.ConstCxArg_BOOL, ast.ConstCxArg_BOOL), Out(ast.ConstCxArg_BOOL), types.BOOL, constants.OP_UNEQUAL)
	RegisterFunction(prgrm, "bool.print", opBoolPrint, In(ast.ConstCxArg_BOOL), nil)

	// TODO: Rename to CASTING_OPS ?
	// TODO: Remove START_PARSE_OPS/END_PARSE_OPS, somehow we need to now start/end of these operator : used in isParseOp
	constants.START_PARSE_OPS = globals.OpCodeSystemCounter - 1
	RegisterFunction(prgrm, "i8.str", opI8ToStr, In(ast.ConstCXArg_I8), Out(ast.ConstCxArg_STR))
	RegisterFunction(prgrm, "i8.i16", opI8ToI16, In(ast.ConstCXArg_I8), Out(ast.ConstCxArg_I16))
	RegisterFunction(prgrm, "i8.i32", opI8ToI32, In(ast.ConstCXArg_I8), Out(ast.ConstCxArg_I32))
	RegisterFunction(prgrm, "i8.i64", opI8ToI64, In(ast.ConstCXArg_I8), Out(ast.ConstCxArg_I64))
	RegisterFunction(prgrm, "i8.ui8", opI8ToUI8, In(ast.ConstCXArg_I8), Out(ast.ConstCxArg_UI8))
	RegisterFunction(prgrm, "i8.ui16", opI8ToUI16, In(ast.ConstCXArg_I8), Out(ast.ConstCxArg_UI16))
	RegisterFunction(prgrm, "i8.ui32", opI8ToUI32, In(ast.ConstCXArg_I8), Out(ast.ConstCxArg_UI32))
	RegisterFunction(prgrm, "i8.ui64", opI8ToUI64, In(ast.ConstCXArg_I8), Out(ast.ConstCxArg_UI64))
	RegisterFunction(prgrm, "i8.f32", opI8ToF32, In(ast.ConstCXArg_I8), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "i8.f64", opI8ToF64, In(ast.ConstCXArg_I8), Out(ast.ConstCxArg_F64))

	RegisterFunction(prgrm, "i16.str", opI16ToStr, In(ast.ConstCxArg_I16), Out(ast.ConstCxArg_STR))
	RegisterFunction(prgrm, "i16.i8", opI16ToI8, In(ast.ConstCxArg_I16), Out(ast.ConstCXArg_I8))
	RegisterFunction(prgrm, "i16.i32", opI16ToI32, In(ast.ConstCxArg_I16), Out(ast.ConstCxArg_I32))
	RegisterFunction(prgrm, "i16.i64", opI16ToI64, In(ast.ConstCxArg_I16), Out(ast.ConstCxArg_I64))
	RegisterFunction(prgrm, "i16.ui8", opI16ToUI8, In(ast.ConstCxArg_I16), Out(ast.ConstCxArg_UI8))
	RegisterFunction(prgrm, "i16.ui16", opI16ToUI16, In(ast.ConstCxArg_I16), Out(ast.ConstCxArg_UI16))
	RegisterFunction(prgrm, "i16.ui32", opI16ToUI32, In(ast.ConstCxArg_I16), Out(ast.ConstCxArg_UI32))
	RegisterFunction(prgrm, "i16.ui64", opI16ToUI64, In(ast.ConstCxArg_I16), Out(ast.ConstCxArg_UI64))
	RegisterFunction(prgrm, "i16.f32", opI16ToF32, In(ast.ConstCxArg_I16), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "i16.f64", opI16ToF64, In(ast.ConstCxArg_I16), Out(ast.ConstCxArg_F64))

	RegisterFunction(prgrm, "i32.str", opI32ToStr, In(ast.ConstCxArg_I32), Out(ast.ConstCxArg_STR))
	RegisterFunction(prgrm, "i32.i8", opI32ToI8, In(ast.ConstCxArg_I32), Out(ast.ConstCXArg_I8))
	RegisterFunction(prgrm, "i32.i16", opI32ToI16, In(ast.ConstCxArg_I32), Out(ast.ConstCxArg_I16))
	RegisterFunction(prgrm, "i32.i64", opI32ToI64, In(ast.ConstCxArg_I32), Out(ast.ConstCxArg_I64))
	RegisterFunction(prgrm, "i32.ui8", opI32ToUI8, In(ast.ConstCxArg_I32), Out(ast.ConstCxArg_UI8))
	RegisterFunction(prgrm, "i32.ui16", opI32ToUI16, In(ast.ConstCxArg_I32), Out(ast.ConstCxArg_UI16))
	RegisterFunction(prgrm, "i32.ui32", opI32ToUI32, In(ast.ConstCxArg_I32), Out(ast.ConstCxArg_UI32))
	RegisterFunction(prgrm, "i32.ui64", opI32ToUI64, In(ast.ConstCxArg_I32), Out(ast.ConstCxArg_UI64))
	RegisterFunction(prgrm, "i32.f32", opI32ToF32, In(ast.ConstCxArg_I32), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "i32.f64", opI32ToF64, In(ast.ConstCxArg_I32), Out(ast.ConstCxArg_F64))

	RegisterFunction(prgrm, "i64.str", opI64ToStr, In(ast.ConstCxArg_I64), Out(ast.ConstCxArg_STR))
	RegisterFunction(prgrm, "i64.i8", opI64ToI8, In(ast.ConstCxArg_I64), Out(ast.ConstCXArg_I8))
	RegisterFunction(prgrm, "i64.i16", opI64ToI16, In(ast.ConstCxArg_I64), Out(ast.ConstCxArg_I16))
	RegisterFunction(prgrm, "i64.i32", opI64ToI32, In(ast.ConstCxArg_I64), Out(ast.ConstCxArg_I32))
	RegisterFunction(prgrm, "i64.ui8", opI64ToUI8, In(ast.ConstCxArg_I64), Out(ast.ConstCxArg_UI8))
	RegisterFunction(prgrm, "i64.ui16", opI64ToUI16, In(ast.ConstCxArg_I64), Out(ast.ConstCxArg_UI16))
	RegisterFunction(prgrm, "i64.ui32", opI64ToUI32, In(ast.ConstCxArg_I64), Out(ast.ConstCxArg_UI32))
	RegisterFunction(prgrm, "i64.ui64", opI64ToUI64, In(ast.ConstCxArg_I64), Out(ast.ConstCxArg_UI64))
	RegisterFunction(prgrm, "i64.f32", opI64ToF32, In(ast.ConstCxArg_I64), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "i64.f64", opI64ToF64, In(ast.ConstCxArg_I64), Out(ast.ConstCxArg_F64))

	RegisterFunction(prgrm, "ui8.str", opUI8ToStr, In(ast.ConstCxArg_UI8), Out(ast.ConstCxArg_STR))
	RegisterFunction(prgrm, "ui8.i8", opUI8ToI8, In(ast.ConstCxArg_UI8), Out(ast.ConstCXArg_I8))
	RegisterFunction(prgrm, "ui8.i16", opUI8ToI16, In(ast.ConstCxArg_UI8), Out(ast.ConstCxArg_I16))
	RegisterFunction(prgrm, "ui8.i32", opUI8ToI32, In(ast.ConstCxArg_UI8), Out(ast.ConstCxArg_I32))
	RegisterFunction(prgrm, "ui8.i64", opUI8ToI64, In(ast.ConstCxArg_UI8), Out(ast.ConstCxArg_I64))
	RegisterFunction(prgrm, "ui8.ui16", opUI8ToUI16, In(ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI16))
	RegisterFunction(prgrm, "ui8.ui32", opUI8ToUI32, In(ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI32))
	RegisterFunction(prgrm, "ui8.ui64", opUI8ToUI64, In(ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI64))
	RegisterFunction(prgrm, "ui8.f32", opUI8ToF32, In(ast.ConstCxArg_UI8), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "ui8.f64", opUI8ToF64, In(ast.ConstCxArg_UI8), Out(ast.ConstCxArg_F64))

	RegisterFunction(prgrm, "ui16.str", opUI16ToStr, In(ast.ConstCxArg_UI16), Out(ast.ConstCxArg_STR))
	RegisterFunction(prgrm, "ui16.i8", opUI16ToI8, In(ast.ConstCxArg_UI16), Out(ast.ConstCXArg_I8))
	RegisterFunction(prgrm, "ui16.i16", opUI16ToI16, In(ast.ConstCxArg_UI16), Out(ast.ConstCxArg_I16))
	RegisterFunction(prgrm, "ui16.i32", opUI16ToI32, In(ast.ConstCxArg_UI16), Out(ast.ConstCxArg_I32))
	RegisterFunction(prgrm, "ui16.i64", opUI16ToI64, In(ast.ConstCxArg_UI16), Out(ast.ConstCxArg_I64))
	RegisterFunction(prgrm, "ui16.ui8", opUI16ToUI8, In(ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI8))
	RegisterFunction(prgrm, "ui16.ui32", opUI16ToUI32, In(ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI32))
	RegisterFunction(prgrm, "ui16.ui64", opUI16ToUI64, In(ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI64))
	RegisterFunction(prgrm, "ui16.f32", opUI16ToF32, In(ast.ConstCxArg_UI16), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "ui16.f64", opUI16ToF64, In(ast.ConstCxArg_UI16), Out(ast.ConstCxArg_F64))

	RegisterFunction(prgrm, "ui32.str", opUI32ToStr, In(ast.ConstCxArg_UI32), Out(ast.ConstCxArg_STR))
	RegisterFunction(prgrm, "ui32.i8", opUI32ToI8, In(ast.ConstCxArg_UI32), Out(ast.ConstCXArg_I8))
	RegisterFunction(prgrm, "ui32.i16", opUI32ToI16, In(ast.ConstCxArg_UI32), Out(ast.ConstCxArg_I16))
	RegisterFunction(prgrm, "ui32.i32", opUI32ToI32, In(ast.ConstCxArg_UI32), Out(ast.ConstCxArg_I32))
	RegisterFunction(prgrm, "ui32.i64", opUI32ToI64, In(ast.ConstCxArg_UI32), Out(ast.ConstCxArg_I64))
	RegisterFunction(prgrm, "ui32.ui8", opUI32ToUI8, In(ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI8))
	RegisterFunction(prgrm, "ui32.ui16", opUI32ToUI16, In(ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI16))
	RegisterFunction(prgrm, "ui32.ui64", opUI32ToUI64, In(ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI64))
	RegisterFunction(prgrm, "ui32.f32", opUI32ToF32, In(ast.ConstCxArg_UI32), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "ui32.f64", opUI32ToF64, In(ast.ConstCxArg_UI32), Out(ast.ConstCxArg_F64))

	RegisterFunction(prgrm, "ui64.str", opUI64ToStr, In(ast.ConstCxArg_UI64), Out(ast.ConstCxArg_STR))
	RegisterFunction(prgrm, "ui64.i8", opUI64ToI8, In(ast.ConstCxArg_UI64), Out(ast.ConstCXArg_I8))
	RegisterFunction(prgrm, "ui64.i16", opUI64ToI16, In(ast.ConstCxArg_UI64), Out(ast.ConstCxArg_I16))
	RegisterFunction(prgrm, "ui64.i32", opUI64ToI32, In(ast.ConstCxArg_UI64), Out(ast.ConstCxArg_I32))
	RegisterFunction(prgrm, "ui64.i64", opUI64ToI64, In(ast.ConstCxArg_UI64), Out(ast.ConstCxArg_I64))
	RegisterFunction(prgrm, "ui64.ui8", opUI64ToUI8, In(ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI8))
	RegisterFunction(prgrm, "ui64.ui16", opUI64ToUI16, In(ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI16))
	RegisterFunction(prgrm, "ui64.ui32", opUI64ToUI32, In(ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI32))
	RegisterFunction(prgrm, "ui64.f32", opUI64ToF32, In(ast.ConstCxArg_UI64), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "ui64.f64", opUI64ToF64, In(ast.ConstCxArg_UI64), Out(ast.ConstCxArg_F64))

	RegisterFunction(prgrm, "f32.str", opF32ToStr, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_STR))
	RegisterFunction(prgrm, "f32.i8", opF32ToI8, In(ast.ConstCxArg_F32), Out(ast.ConstCXArg_I8))
	RegisterFunction(prgrm, "f32.i16", opF32ToI16, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_I16))
	RegisterFunction(prgrm, "f32.i32", opF32ToI32, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_I32))
	RegisterFunction(prgrm, "f32.i64", opF32ToI64, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_I64))
	RegisterFunction(prgrm, "f32.ui8", opF32ToUI8, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_UI8))
	RegisterFunction(prgrm, "f32.ui16", opF32ToUI16, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_UI16))
	RegisterFunction(prgrm, "f32.ui32", opF32ToUI32, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_UI32))
	RegisterFunction(prgrm, "f32.ui64", opF32ToUI64, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_UI64))
	RegisterFunction(prgrm, "f32.f64", opF32ToF64, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_F64))

	RegisterFunction(prgrm, "f64.str", opF64ToStr, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_STR))
	RegisterFunction(prgrm, "f64.i8", opF64ToI8, In(ast.ConstCxArg_F64), Out(ast.ConstCXArg_I8))
	RegisterFunction(prgrm, "f64.i16", opF64ToI16, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_I16))
	RegisterFunction(prgrm, "f64.i32", opF64ToI32, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_I32))
	RegisterFunction(prgrm, "f64.i64", opF64ToI64, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_I64))
	RegisterFunction(prgrm, "f64.ui8", opF64ToUI8, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_UI8))
	RegisterFunction(prgrm, "f64.ui16", opF64ToUI16, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_UI16))
	RegisterFunction(prgrm, "f64.ui32", opF64ToUI32, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_UI32))
	RegisterFunction(prgrm, "f64.ui64", opF64ToUI64, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_UI64))
	RegisterFunction(prgrm, "f64.f32", opF64ToF32, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_F32))
	// TODO: Rename to CASTING_OPS ?
	// TODO: Remove START_PARSE_OPS/END_PARSE_OPS, somehow we need to now start/end of these operator : used in isParseOp
	constants.END_PARSE_OPS = globals.OpCodeSystemCounter

	RegisterOperator(prgrm, "i8.eq", opI8Eq, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCxArg_BOOL), types.I8, constants.OP_EQUAL)
	RegisterOperator(prgrm, "i8.uneq", opI8Uneq, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCxArg_BOOL), types.I8, constants.OP_UNEQUAL)
	RegisterOperator(prgrm, "i8.bitand", opI8Bitand, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8), types.I8, constants.OP_BITAND)
	RegisterOperator(prgrm, "i8.bitor", opI8Bitor, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8), types.I8, constants.OP_BITOR)
	RegisterOperator(prgrm, "i8.bitxor", opI8Bitxor, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8), types.I8, constants.OP_BITXOR)
	RegisterOperator(prgrm, "i8.bitclear", opI8Bitclear, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8), types.I8, constants.OP_BITCLEAR)
	RegisterOperator(prgrm, "i8.bitshl", opI8Bitshl, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8), types.I8, constants.OP_BITSHL)
	RegisterOperator(prgrm, "i8.bitshr", opI8Bitshr, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8), types.I8, constants.OP_BITSHR)
	RegisterOperator(prgrm, "i8.add", opI8Add, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8), types.I8, constants.OP_ADD)
	RegisterOperator(prgrm, "i8.sub", opI8Sub, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8), types.I8, constants.OP_SUB)
	RegisterOperator(prgrm, "i8.neg", opI8Neg, In(ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8), types.I8, constants.OP_NEG)
	RegisterOperator(prgrm, "i8.mul", opI8Mul, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8), types.I8, constants.OP_MUL)
	RegisterOperator(prgrm, "i8.div", opI8Div, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8), types.I8, constants.OP_DIV)
	RegisterOperator(prgrm, "i8.mod", opI8Mod, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8), types.I8, constants.OP_MOD)
	RegisterOperator(prgrm, "i8.gt", opI8Gt, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCxArg_BOOL), types.I8, constants.OP_GT)
	RegisterOperator(prgrm, "i8.gteq", opI8Gteq, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCxArg_BOOL), types.I8, constants.OP_GTEQ)
	RegisterOperator(prgrm, "i8.lt", opI8Lt, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCxArg_BOOL), types.I8, constants.OP_LT)
	RegisterOperator(prgrm, "i8.lteq", opI8Lteq, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCxArg_BOOL), types.I8, constants.OP_LTEQ)
	RegisterFunction(prgrm, "i8.print", opI8Print, In(ast.ConstCXArg_I8), nil)
	RegisterFunction(prgrm, "i8.abs", opI8Abs, In(ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8))
	RegisterFunction(prgrm, "i8.max", opI8Max, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8))
	RegisterFunction(prgrm, "i8.min", opI8Min, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8))
	RegisterFunction(prgrm, "i8.rand", opI8Rand, In(ast.ConstCXArg_I8, ast.ConstCXArg_I8), Out(ast.ConstCXArg_I8))

	RegisterOperator(prgrm, "i16.eq", opI16Eq, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_BOOL), types.I16, constants.OP_EQUAL)
	RegisterOperator(prgrm, "i16.uneq", opI16Uneq, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_BOOL), types.I16, constants.OP_UNEQUAL)
	RegisterOperator(prgrm, "i16.bitand", opI16Bitand, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16), types.I16, constants.OP_BITAND)
	RegisterOperator(prgrm, "i16.bitor", opI16Bitor, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16), types.I16, constants.OP_BITOR)
	RegisterOperator(prgrm, "i16.bitxor", opI16Bitxor, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16), types.I16, constants.OP_BITXOR)
	RegisterOperator(prgrm, "i16.bitclear", opI16Bitclear, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16), types.I16, constants.OP_BITCLEAR)
	RegisterOperator(prgrm, "i16.bitshl", opI16Bitshl, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16), types.I16, constants.OP_BITSHL)
	RegisterOperator(prgrm, "i16.bitshr", opI16Bitshr, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16), types.I16, constants.OP_BITSHR)
	RegisterOperator(prgrm, "i16.add", opI16Add, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16), types.I16, constants.OP_ADD)
	RegisterOperator(prgrm, "i16.sub", opI16Sub, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16), types.I16, constants.OP_SUB)
	RegisterOperator(prgrm, "i16.neg", opI16Neg, In(ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16), types.I16, constants.OP_NEG)
	RegisterOperator(prgrm, "i16.mul", opI16Mul, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16), types.I16, constants.OP_MUL)
	RegisterOperator(prgrm, "i16.div", opI16Div, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16), types.I16, constants.OP_DIV)
	RegisterOperator(prgrm, "i16.mod", opI16Mod, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16), types.I16, constants.OP_MOD)
	RegisterOperator(prgrm, "i16.gt", opI16Gt, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_BOOL), types.I16, constants.OP_GT)
	RegisterOperator(prgrm, "i16.gteq", opI16Gteq, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_BOOL), types.I16, constants.OP_GTEQ)
	RegisterOperator(prgrm, "i16.lt", opI16Lt, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_BOOL), types.I16, constants.OP_LT)
	RegisterOperator(prgrm, "i16.lteq", opI16Lteq, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_BOOL), types.I16, constants.OP_LTEQ)
	RegisterFunction(prgrm, "i16.print", opI16Print, In(ast.ConstCxArg_I16), nil)
	RegisterFunction(prgrm, "i16.abs", opI16Abs, In(ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16))
	RegisterFunction(prgrm, "i16.max", opI16Max, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16))
	RegisterFunction(prgrm, "i16.min", opI16Min, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16))
	RegisterFunction(prgrm, "i16.rand", opI16Rand, In(ast.ConstCxArg_I16, ast.ConstCxArg_I16), Out(ast.ConstCxArg_I16))

	RegisterOperator(prgrm, "i32.jmpeq", opI32JmpEq, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), nil, types.I32, constants.OP_JMP_EQ)
	RegisterOperator(prgrm, "i32.jmpuneq", opI32JmpUnEq, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), nil, types.I32, constants.OP_JMP_UNEQ)
	RegisterOperator(prgrm, "i32.jmpgt", opI32JmpGt, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), nil, types.I32, constants.OP_JMP_GT)
	RegisterOperator(prgrm, "i32.jmpgteq", opI32JmpGtEq, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), nil, types.I32, constants.OP_JMP_GTEQ)
	RegisterOperator(prgrm, "i32.jmplt", opI32JmpLt, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), nil, types.I32, constants.OP_JMP_LT)
	RegisterOperator(prgrm, "i32.jmplteq", opI32JmpLtEq, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), nil, types.I32, constants.OP_JMP_LTEQ)
	RegisterOperator(prgrm, "i32.jmpzero", opI32JmpZero, In(ast.ConstCxArg_I32), nil, types.I32, constants.OP_JMP_ZERO)
	RegisterOperator(prgrm, "i32.jmpnotzero", opI32JmpNotZero, In(ast.ConstCxArg_I32), nil, types.I32, constants.OP_JMP_NOT_ZERO)

	RegisterOperator(prgrm, "i32.eq", opI32Eq, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_BOOL), types.I32, constants.OP_EQUAL)
	RegisterOperator(prgrm, "i32.uneq", opI32Uneq, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_BOOL), types.I32, constants.OP_UNEQUAL)
	RegisterOperator(prgrm, "i32.bitand", opI32Bitand, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32), types.I32, constants.OP_BITAND)
	RegisterOperator(prgrm, "i32.bitor", opI32Bitor, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32), types.I32, constants.OP_BITOR)
	RegisterOperator(prgrm, "i32.bitxor", opI32Bitxor, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32), types.I32, constants.OP_BITXOR)
	RegisterOperator(prgrm, "i32.bitclear", opI32Bitclear, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32), types.I32, constants.OP_BITCLEAR)
	RegisterOperator(prgrm, "i32.bitshl", opI32Bitshl, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32), types.I32, constants.OP_BITSHL)
	RegisterOperator(prgrm, "i32.bitshr", opI32Bitshr, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32), types.I32, constants.OP_BITSHR)
	RegisterOperator(prgrm, "i32.add", opI32Add, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32), types.I32, constants.OP_ADD)
	RegisterOperator(prgrm, "i32.sub", opI32Sub, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32), types.I32, constants.OP_SUB)
	RegisterOperator(prgrm, "i32.neg", opI32Neg, In(ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32), types.I32, constants.OP_NEG)
	RegisterOperator(prgrm, "i32.mul", opI32Mul, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32), types.I32, constants.OP_MUL)
	RegisterOperator(prgrm, "i32.div", opI32Div, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32), types.I32, constants.OP_DIV)
	RegisterOperator(prgrm, "i32.mod", opI32Mod, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32), types.I32, constants.OP_MOD)
	RegisterOperator(prgrm, "i32.gt", opI32Gt, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_BOOL), types.I32, constants.OP_GT)
	RegisterOperator(prgrm, "i32.gteq", opI32Gteq, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_BOOL), types.I32, constants.OP_GTEQ)
	RegisterOperator(prgrm, "i32.lt", opI32Lt, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_BOOL), types.I32, constants.OP_LT)
	RegisterOperator(prgrm, "i32.lteq", opI32Lteq, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_BOOL), types.I32, constants.OP_LTEQ)
	RegisterFunction(prgrm, "i32.print", opI32Print, In(ast.ConstCxArg_I32), nil)
	RegisterFunction(prgrm, "i32.abs", opI32Abs, In(ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32))
	RegisterFunction(prgrm, "i32.max", opI32Max, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32))
	RegisterFunction(prgrm, "i32.min", opI32Min, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32))
	RegisterFunction(prgrm, "i32.rand", opI32Rand, In(ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_I32))

	RegisterOperator(prgrm, "i64.eq", opI64Eq, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_BOOL), types.I64, constants.OP_EQUAL)
	RegisterOperator(prgrm, "i64.uneq", opI64Uneq, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_BOOL), types.I64, constants.OP_UNEQUAL)
	RegisterOperator(prgrm, "i64.bitand", opI64Bitand, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64), types.I64, constants.OP_BITAND)
	RegisterOperator(prgrm, "i64.bitor", opI64Bitor, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64), types.I64, constants.OP_BITOR)
	RegisterOperator(prgrm, "i64.bitxor", opI64Bitxor, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64), types.I64, constants.OP_BITXOR)
	RegisterOperator(prgrm, "i64.bitclear", opI64Bitclear, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64), types.I64, constants.OP_BITCLEAR)
	RegisterOperator(prgrm, "i64.bitshl", opI64Bitshl, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64), types.I64, constants.OP_BITSHL)
	RegisterOperator(prgrm, "i64.bitshr", opI64Bitshr, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64), types.I64, constants.OP_BITSHR)
	RegisterOperator(prgrm, "i64.add", opI64Add, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64), types.I64, constants.OP_ADD)
	RegisterOperator(prgrm, "i64.sub", opI64Sub, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64), types.I64, constants.OP_SUB)
	RegisterOperator(prgrm, "i64.neg", opI64Neg, In(ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64), types.I64, constants.OP_NEG)
	RegisterOperator(prgrm, "i64.mul", opI64Mul, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64), types.I64, constants.OP_MUL)
	RegisterOperator(prgrm, "i64.div", opI64Div, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64), types.I64, constants.OP_DIV)
	RegisterOperator(prgrm, "i64.mod", opI64Mod, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64), types.I64, constants.OP_MOD)
	RegisterOperator(prgrm, "i64.gt", opI64Gt, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_BOOL), types.I64, constants.OP_GT)
	RegisterOperator(prgrm, "i64.gteq", opI64Gteq, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_BOOL), types.I64, constants.OP_GTEQ)
	RegisterOperator(prgrm, "i64.lt", opI64Lt, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_BOOL), types.I64, constants.OP_LT)
	RegisterOperator(prgrm, "i64.lteq", opI64Lteq, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_BOOL), types.I64, constants.OP_LTEQ)
	RegisterFunction(prgrm, "i64.print", opI64Print, In(ast.ConstCxArg_I64), nil)
	RegisterFunction(prgrm, "i64.abs", opI64Abs, In(ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64))
	RegisterFunction(prgrm, "i64.max", opI64Max, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64))
	RegisterFunction(prgrm, "i64.min", opI64Min, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64))
	RegisterFunction(prgrm, "i64.rand", opI64Rand, In(ast.ConstCxArg_I64, ast.ConstCxArg_I64), Out(ast.ConstCxArg_I64))

	RegisterOperator(prgrm, "ui8.eq", opUI8Eq, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_BOOL), types.UI8, constants.OP_EQUAL)
	RegisterOperator(prgrm, "ui8.uneq", opUI8Uneq, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_BOOL), types.UI8, constants.OP_UNEQUAL)
	RegisterOperator(prgrm, "ui8.bitand", opUI8Bitand, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI8), types.UI8, constants.OP_BITAND)
	RegisterOperator(prgrm, "ui8.bitor", opUI8Bitor, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI8), types.UI8, constants.OP_BITOR)
	RegisterOperator(prgrm, "ui8.bitxor", opUI8Bitxor, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI8), types.UI8, constants.OP_BITXOR)
	RegisterOperator(prgrm, "ui8.bitclear", opUI8Bitclear, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI8), types.UI8, constants.OP_BITCLEAR)
	RegisterOperator(prgrm, "ui8.bitshl", opUI8Bitshl, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI8), types.UI8, constants.OP_BITSHL)
	RegisterOperator(prgrm, "ui8.bitshr", opUI8Bitshr, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI8), types.UI8, constants.OP_BITSHR)
	RegisterOperator(prgrm, "ui8.add", opUI8Add, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI8), types.UI8, constants.OP_ADD)
	RegisterOperator(prgrm, "ui8.sub", opUI8Sub, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI8), types.UI8, constants.OP_SUB)
	RegisterOperator(prgrm, "ui8.mul", opUI8Mul, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI8), types.UI8, constants.OP_MUL)
	RegisterOperator(prgrm, "ui8.div", opUI8Div, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI8), types.UI8, constants.OP_DIV)
	RegisterOperator(prgrm, "ui8.mod", opUI8Mod, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI8), types.UI8, constants.OP_MOD)
	RegisterOperator(prgrm, "ui8.gt", opUI8Gt, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_BOOL), types.UI8, constants.OP_GT)
	RegisterOperator(prgrm, "ui8.gteq", opUI8Gteq, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_BOOL), types.UI8, constants.OP_GTEQ)
	RegisterOperator(prgrm, "ui8.lt", opUI8Lt, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_BOOL), types.UI8, constants.OP_LT)
	RegisterOperator(prgrm, "ui8.lteq", opUI8Lteq, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_BOOL), types.UI8, constants.OP_LTEQ)
	RegisterFunction(prgrm, "ui8.print", opUI8Print, In(ast.ConstCxArg_UI8), nil)
	RegisterFunction(prgrm, "ui8.max", opUI8Max, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI8))
	RegisterFunction(prgrm, "ui8.min", opUI8Min, In(ast.ConstCxArg_UI8, ast.ConstCxArg_UI8), Out(ast.ConstCxArg_UI8))
	RegisterFunction(prgrm, "ui8.rand", opUI8Rand, nil, Out(ast.ConstCxArg_UI8))

	RegisterOperator(prgrm, "ui16.eq", opUI16Eq, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_BOOL), types.UI16, constants.OP_EQUAL)
	RegisterOperator(prgrm, "ui16.uneq", opUI16Uneq, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_BOOL), types.UI16, constants.OP_UNEQUAL)
	RegisterOperator(prgrm, "ui16.bitand", opUI16Bitand, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI16), types.UI16, constants.OP_BITAND)
	RegisterOperator(prgrm, "ui16.bitor", opUI16Bitor, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI16), types.UI16, constants.OP_BITOR)
	RegisterOperator(prgrm, "ui16.bitxor", opUI16Bitxor, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI16), types.UI16, constants.OP_BITXOR)
	RegisterOperator(prgrm, "ui16.bitclear", opUI16Bitclear, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI16), types.UI16, constants.OP_BITCLEAR)
	RegisterOperator(prgrm, "ui16.bitshl", opUI16Bitshl, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI16), types.UI16, constants.OP_BITSHL)
	RegisterOperator(prgrm, "ui16.bitshr", opUI16Bitshr, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI16), types.UI16, constants.OP_BITSHR)
	RegisterOperator(prgrm, "ui16.add", opUI16Add, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI16), types.UI16, constants.OP_ADD)
	RegisterOperator(prgrm, "ui16.sub", opUI16Sub, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI16), types.UI16, constants.OP_SUB)
	RegisterOperator(prgrm, "ui16.mul", opUI16Mul, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI16), types.UI16, constants.OP_MUL)
	RegisterOperator(prgrm, "ui16.div", opUI16Div, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI16), types.UI16, constants.OP_DIV)
	RegisterOperator(prgrm, "ui16.mod", opUI16Mod, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI16), types.UI16, constants.OP_MOD)
	RegisterOperator(prgrm, "ui16.gt", opUI16Gt, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), In(ast.ConstCxArg_BOOL), types.UI16, constants.OP_GT)
	RegisterOperator(prgrm, "ui16.gteq", opUI16Gteq, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_BOOL), types.UI16, constants.OP_GTEQ)
	RegisterOperator(prgrm, "ui16.lt", opUI16Lt, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_BOOL), types.UI16, constants.OP_LT)
	RegisterOperator(prgrm, "ui16.lteq", opUI16Lteq, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_BOOL), types.UI16, constants.OP_LTEQ)
	RegisterFunction(prgrm, "ui16.print", opUI16Print, In(ast.ConstCxArg_UI16), nil)
	RegisterFunction(prgrm, "ui16.max", opUI16Max, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI16))
	RegisterFunction(prgrm, "ui16.min", opUI16Min, In(ast.ConstCxArg_UI16, ast.ConstCxArg_UI16), Out(ast.ConstCxArg_UI16))
	RegisterFunction(prgrm, "ui16.rand", opUI16Rand, nil, Out(ast.ConstCxArg_UI16))

	RegisterOperator(prgrm, "ui32.eq", opUI32Eq, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_BOOL), types.UI32, constants.OP_EQUAL)
	RegisterOperator(prgrm, "ui32.uneq", opUI32Uneq, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_BOOL), types.UI32, constants.OP_UNEQUAL)
	RegisterOperator(prgrm, "ui32.bitand", opUI32Bitand, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI32), types.UI32, constants.OP_BITAND)
	RegisterOperator(prgrm, "ui32.bitor", opUI32Bitor, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI32), types.UI32, constants.OP_BITOR)
	RegisterOperator(prgrm, "ui32.bitxor", opUI32Bitxor, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI32), types.UI32, constants.OP_BITXOR)
	RegisterOperator(prgrm, "ui32.bitclear", opUI32Bitclear, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI32), types.UI32, constants.OP_BITCLEAR)
	RegisterOperator(prgrm, "ui32.bitshl", opUI32Bitshl, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI32), types.UI32, constants.OP_BITSHL)
	RegisterOperator(prgrm, "ui32.bitshr", opUI32Bitshr, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI32), types.UI32, constants.OP_BITSHR)
	RegisterOperator(prgrm, "ui32.add", opUI32Add, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI32), types.UI32, constants.OP_ADD)
	RegisterOperator(prgrm, "ui32.sub", opUI32Sub, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI32), types.UI32, constants.OP_SUB)
	RegisterOperator(prgrm, "ui32.mul", opUI32Mul, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI32), types.UI32, constants.OP_MUL)
	RegisterOperator(prgrm, "ui32.div", opUI32Div, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI32), types.UI32, constants.OP_DIV)
	RegisterOperator(prgrm, "ui32.mod", opUI32Mod, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI32), types.UI32, constants.OP_MOD)
	RegisterOperator(prgrm, "ui32.gt", opUI32Gt, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_BOOL), types.UI32, constants.OP_GT)
	RegisterOperator(prgrm, "ui32.gteq", opUI32Gteq, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_BOOL), types.UI32, constants.OP_GTEQ)
	RegisterOperator(prgrm, "ui32.lt", opUI32Lt, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_BOOL), types.UI32, constants.OP_LT)
	RegisterOperator(prgrm, "ui32.lteq", opUI32Lteq, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_BOOL), types.UI32, constants.OP_LTEQ)
	RegisterFunction(prgrm, "ui32.print", opUI32Print, In(ast.ConstCxArg_UI32), nil)
	RegisterFunction(prgrm, "ui32.max", opUI32Max, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI32))
	RegisterFunction(prgrm, "ui32.min", opUI32Min, In(ast.ConstCxArg_UI32, ast.ConstCxArg_UI32), Out(ast.ConstCxArg_UI32))
	RegisterFunction(prgrm, "ui32.rand", opUI32Rand, nil, Out(ast.ConstCxArg_UI32))

	RegisterOperator(prgrm, "ui64.eq", opUI64Eq, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_BOOL), types.UI64, constants.OP_EQUAL)
	RegisterOperator(prgrm, "ui64.uneq", opUI64Uneq, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_BOOL), types.UI64, constants.OP_UNEQUAL)
	RegisterOperator(prgrm, "ui64.bitand", opUI64Bitand, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI64), types.UI64, constants.OP_BITAND)
	RegisterOperator(prgrm, "ui64.bitor", opUI64Bitor, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI64), types.UI64, constants.OP_BITOR)
	RegisterOperator(prgrm, "ui64.bitxor", opUI64Bitxor, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI64), types.UI64, constants.OP_BITXOR)
	RegisterOperator(prgrm, "ui64.bitclear", opUI64Bitclear, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI64), types.UI64, constants.OP_BITCLEAR)
	RegisterOperator(prgrm, "ui64.bitshl", opUI64Bitshl, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI64), types.UI64, constants.OP_BITSHL)
	RegisterOperator(prgrm, "ui64.bitshr", opUI64Bitshr, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI64), types.UI64, constants.OP_BITSHR)
	RegisterOperator(prgrm, "ui64.add", opUI64Add, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI64), types.UI64, constants.OP_ADD)
	RegisterOperator(prgrm, "ui64.sub", opUI64Sub, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI64), types.UI64, constants.OP_SUB)
	RegisterOperator(prgrm, "ui64.mul", opUI64Mul, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI64), types.UI64, constants.OP_MUL)
	RegisterOperator(prgrm, "ui64.div", opUI64Div, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI64), types.UI64, constants.OP_DIV)
	RegisterOperator(prgrm, "ui64.mod", opUI64Mod, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI64), types.UI64, constants.OP_MOD)
	RegisterOperator(prgrm, "ui64.gt", opUI64Gt, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_BOOL), types.UI64, constants.OP_GT)
	RegisterOperator(prgrm, "ui64.gteq", opUI64Gteq, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_BOOL), types.UI64, constants.OP_GTEQ)
	RegisterOperator(prgrm, "ui64.lt", opUI64Lt, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_BOOL), types.UI64, constants.OP_LT)
	RegisterOperator(prgrm, "ui64.lteq", opUI64Lteq, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_BOOL), types.UI64, constants.OP_LTEQ)
	RegisterFunction(prgrm, "ui64.print", opUI64Print, In(ast.ConstCxArg_UI64), nil)
	RegisterFunction(prgrm, "ui64.max", opUI64Max, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI64))
	RegisterFunction(prgrm, "ui64.min", opUI64Min, In(ast.ConstCxArg_UI64, ast.ConstCxArg_UI64), Out(ast.ConstCxArg_UI64))
	RegisterFunction(prgrm, "ui64.rand", opUI64Rand, nil, Out(ast.ConstCxArg_UI64))

	RegisterOperator(prgrm, "f32.eq", opF32Eq, In(ast.ConstCxArg_F32, ast.ConstCxArg_F32), Out(ast.ConstCxArg_BOOL), types.F32, constants.OP_EQUAL)
	RegisterOperator(prgrm, "f32.uneq", opF32Uneq, In(ast.ConstCxArg_F32, ast.ConstCxArg_F32), Out(ast.ConstCxArg_BOOL), types.F32, constants.OP_UNEQUAL)
	RegisterOperator(prgrm, "f32.add", opF32Add, In(ast.ConstCxArg_F32, ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32), types.F32, constants.OP_ADD)
	RegisterOperator(prgrm, "f32.sub", opF32Sub, In(ast.ConstCxArg_F32, ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32), types.F32, constants.OP_SUB)
	RegisterOperator(prgrm, "f32.neg", opF32Neg, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32), types.F32, constants.OP_NEG)
	RegisterOperator(prgrm, "f32.mul", opF32Mul, In(ast.ConstCxArg_F32, ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32), types.F32, constants.OP_MUL)
	RegisterOperator(prgrm, "f32.div", opF32Div, In(ast.ConstCxArg_F32, ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32), types.F32, constants.OP_DIV)
	RegisterOperator(prgrm, "f32.mod", opF32Mod, In(ast.ConstCxArg_F32, ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32), types.F32, constants.OP_MOD)
	RegisterOperator(prgrm, "f32.gt", opF32Gt, In(ast.ConstCxArg_F32, ast.ConstCxArg_F32), Out(ast.ConstCxArg_BOOL), types.F32, constants.OP_GT)
	RegisterOperator(prgrm, "f32.gteq", opF32Gteq, In(ast.ConstCxArg_F32, ast.ConstCxArg_F32), Out(ast.ConstCxArg_BOOL), types.F32, constants.OP_GTEQ)
	RegisterOperator(prgrm, "f32.lt", opF32Lt, In(ast.ConstCxArg_F32, ast.ConstCxArg_F32), Out(ast.ConstCxArg_BOOL), types.F32, constants.OP_LT)
	RegisterOperator(prgrm, "f32.lteq", opF32Lteq, In(ast.ConstCxArg_F32, ast.ConstCxArg_F32), Out(ast.ConstCxArg_BOOL), types.F32, constants.OP_LTEQ)
	RegisterFunction(prgrm, "f32.isnan", opF32Isnan, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_BOOL))
	RegisterFunction(prgrm, "f32.print", opF32Print, In(ast.ConstCxArg_F32), nil)
	RegisterFunction(prgrm, "f32.abs", opF32Abs, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "f32.pow", opF32Pow, In(ast.ConstCxArg_F32, ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "f32.acos", opF32Acos, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "f32.cos", opF32Cos, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "f32.asin", opF32Asin, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "f32.sin", opF32Sin, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "f32.sqrt", opF32Sqrt, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "f32.log", opF32Log, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "f32.log2", opF32Log2, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "f32.log10", opF32Log10, In(ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "f32.max", opF32Max, In(ast.ConstCxArg_F32, ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "f32.min", opF32Min, In(ast.ConstCxArg_F32, ast.ConstCxArg_F32), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "f32.rand", opF32Rand, nil, Out(ast.ConstCxArg_F32))

	RegisterOperator(prgrm, "f64.eq", opF64Eq, In(ast.ConstCxArg_F64, ast.ConstCxArg_F64), Out(ast.ConstCxArg_BOOL), types.F64, constants.OP_EQUAL)
	RegisterOperator(prgrm, "f64.uneq", opF64Uneq, In(ast.ConstCxArg_F64, ast.ConstCxArg_F64), Out(ast.ConstCxArg_BOOL), types.F64, constants.OP_UNEQUAL)
	RegisterOperator(prgrm, "f64.add", opF64Add, In(ast.ConstCxArg_F64, ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64), types.F64, constants.OP_ADD)
	RegisterOperator(prgrm, "f64.sub", opF64Sub, In(ast.ConstCxArg_F64, ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64), types.F64, constants.OP_SUB)
	RegisterOperator(prgrm, "f64.neg", opF64Neg, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64), types.F64, constants.OP_NEG)
	RegisterOperator(prgrm, "f64.mul", opF64Mul, In(ast.ConstCxArg_F64, ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64), types.F64, constants.OP_MUL)
	RegisterOperator(prgrm, "f64.div", opF64Div, In(ast.ConstCxArg_F64, ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64), types.F64, constants.OP_DIV)
	RegisterOperator(prgrm, "f32.mod", opF64Mod, In(ast.ConstCxArg_F64, ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64), types.F64, constants.OP_MOD)
	RegisterOperator(prgrm, "f64.gt", opF64Gt, In(ast.ConstCxArg_F64, ast.ConstCxArg_F64), Out(ast.ConstCxArg_BOOL), types.F64, constants.OP_GT)
	RegisterOperator(prgrm, "f64.gteq", opF64Gteq, In(ast.ConstCxArg_F64, ast.ConstCxArg_F64), Out(ast.ConstCxArg_BOOL), types.F64, constants.OP_GTEQ)
	RegisterOperator(prgrm, "f64.lt", opF64Lt, In(ast.ConstCxArg_F64, ast.ConstCxArg_F64), Out(ast.ConstCxArg_BOOL), types.F64, constants.OP_LT)
	RegisterOperator(prgrm, "f64.lteq", opF64Lteq, In(ast.ConstCxArg_F64, ast.ConstCxArg_F64), Out(ast.ConstCxArg_BOOL), types.F64, constants.OP_LTEQ)
	RegisterFunction(prgrm, "f64.isnan", opF64Isnan, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_BOOL))
	RegisterFunction(prgrm, "f64.print", opF64Print, In(ast.ConstCxArg_F64), nil)
	RegisterFunction(prgrm, "f64.abs", opF64Abs, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64))
	RegisterFunction(prgrm, "f64.pow", opF64Pow, In(ast.ConstCxArg_F64, ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64))
	RegisterFunction(prgrm, "f64.acos", opF64Acos, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64))
	RegisterFunction(prgrm, "f64.cos", opF64Cos, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64))
	RegisterFunction(prgrm, "f64.asin", opF64Asin, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64))
	RegisterFunction(prgrm, "f64.sin", opF64Sin, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64))
	RegisterFunction(prgrm, "f64.sqrt", opF64Sqrt, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64))
	RegisterFunction(prgrm, "f64.log", opF64Log, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64))
	RegisterFunction(prgrm, "f64.log2", opF64Log2, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64))
	RegisterFunction(prgrm, "f64.log10", opF64Log10, In(ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64))
	RegisterFunction(prgrm, "f64.max", opF64Max, In(ast.ConstCxArg_F64, ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64))
	RegisterFunction(prgrm, "f64.min", opF64Min, In(ast.ConstCxArg_F64, ast.ConstCxArg_F64), Out(ast.ConstCxArg_F64))
	RegisterFunction(prgrm, "f64.rand", opF64Rand, nil, Out(ast.ConstCxArg_F64))

	RegisterOperator(prgrm, "str.eq", opStrEq, In(ast.ConstCxArg_STR, ast.ConstCxArg_STR), Out(ast.ConstCxArg_BOOL), types.STR, constants.OP_EQUAL)
	RegisterOperator(prgrm, "str.uneq", opStrUneq, In(ast.ConstCxArg_STR, ast.ConstCxArg_STR), Out(ast.ConstCxArg_BOOL), types.STR, constants.OP_UNEQUAL)
	RegisterOperator(prgrm, "str.concat", opStrConcat, In(ast.ConstCxArg_STR, ast.ConstCxArg_STR), Out(ast.ConstCxArg_STR), types.STR, constants.OP_ADD)
	RegisterFunction(prgrm, "str.i8", opStrToI8, In(ast.ConstCxArg_STR), Out(ast.ConstCXArg_I8))
	RegisterFunction(prgrm, "str.i16", opStrToI16, In(ast.ConstCxArg_STR), Out(ast.ConstCxArg_I16))
	RegisterFunction(prgrm, "str.i32", opStrToI32, In(ast.ConstCxArg_STR), Out(ast.ConstCxArg_I32))
	RegisterFunction(prgrm, "str.i64", opStrToI64, In(ast.ConstCxArg_STR), Out(ast.ConstCxArg_I64))
	RegisterFunction(prgrm, "str.ui8", opStrToUI8, In(ast.ConstCxArg_STR), Out(ast.ConstCxArg_UI8))
	RegisterFunction(prgrm, "str.ui16", opStrToUI16, In(ast.ConstCxArg_STR), Out(ast.ConstCxArg_UI16))
	RegisterFunction(prgrm, "str.ui32", opStrToUI32, In(ast.ConstCxArg_STR), Out(ast.ConstCxArg_UI32))
	RegisterFunction(prgrm, "str.ui64", opStrToUI64, In(ast.ConstCxArg_STR), Out(ast.ConstCxArg_UI64))
	RegisterFunction(prgrm, "str.f32", opStrToF32, In(ast.ConstCxArg_STR), Out(ast.ConstCxArg_F32))
	RegisterFunction(prgrm, "str.f64", opStrToF64, In(ast.ConstCxArg_STR), Out(ast.ConstCxArg_F64))
	RegisterFunction(prgrm, "str.print", opStrPrint, In(ast.ConstCxArg_STR), nil)
	RegisterFunction(prgrm, "str.substr", opStrSubstr, In(ast.ConstCxArg_STR, ast.ConstCxArg_I32, ast.ConstCxArg_I32), Out(ast.ConstCxArg_STR))
	RegisterFunction(prgrm, "str.index", opStrIndex, In(ast.ConstCxArg_STR, ast.ConstCxArg_STR), Out(ast.ConstCxArg_I32))
	RegisterFunction(prgrm, "str.lastindex", opStrLastIndex, In(ast.ConstCxArg_STR, ast.ConstCxArg_STR), Out(ast.ConstCxArg_I32))
	RegisterFunction(prgrm, "str.trimspace", opStrTrimSpace, In(ast.ConstCxArg_STR), Out(ast.ConstCxArg_STR))

	RegisterFunction(prgrm, "panicIf", opPanicIf, In(ast.ConstCxArg_BOOL, ast.ConstCxArg_STR), nil)
	RegisterFunction(prgrm, "panicIfNot", opPanicIfNot, In(ast.ConstCxArg_BOOL, ast.ConstCxArg_STR), nil)
	RegisterFunction(prgrm, "strerror", opStrError, In(ast.ConstCxArg_I32), Out(ast.ConstCxArg_STR))

	RegisterFunction(prgrm, "aff.print", opAffPrint, In(ast.Slice(types.AFF)), nil)
	RegisterFunction(prgrm, "aff.query", opAffQuery, In(ast.Slice(types.AFF)), Out(ast.Slice(types.AFF)))
	// RegisterFunction(prgrm,"aff.on", opAffOn, In(ast.Slice(types.AFF), ast.Slice(types.AFF)), nil)
	// RegisterFunction(prgrm,"aff.of", opAffOf, In(ast.Slice(types.AFF), ast.Slice(types.AFF)), nil)
	// RegisterFunction(prgrm,"aff.inform", opAffInform, In(ast.Slice(types.AFF), ast.ConstCxArg_I32, ast.Slice(types.AFF)), nil)
	// RegisterFunction(prgrm,"aff.request", opAffRequest, In(ast.Slice(types.AFF), ast.ConstCxArg_I32, ast.Slice(types.AFF)), nil)

	RegisterFunction(prgrm, "tcp.Dial", opTCPDial, In(ast.ConstCxArg_STR, ast.ConstCxArg_STR), Out(ast.ConstCxArg_STR))
	RegisterFunction(prgrm, "tcp.Listen", opTCPListen, In(ast.ConstCxArg_STR, ast.ConstCxArg_STR), Out(ast.ConstCxArg_STR))
	RegisterFunction(prgrm, "tcp.Accept", opTCPAccept, In(ast.ConstCxArg_STR, ast.ConstCxArg_STR), Out(ast.ConstCxArg_STR))
	RegisterFunction(prgrm, "tcp.Close", opTCPClose, nil, nil)

	//RegisterOpCode(prgrm,OP_EVOLVE_EVOLVE, "evolve.evolve", opEvolve, In(Slice(TYPE_AFF), Slice(TYPE_AFF), Slice(TYPE_F64), Slice(TYPE_F64), ConstCxArg_I32, ConstCxArg_I32, ConstCxArg_I32, ConstCxArg_F64), nil)
	//RegisterOpCode(prgrm,OP_EVOLVE_EVOLVE, "evolve.evolve", opEvolve, In(Slice(TYPE_AFF), Slice(TYPE_AFF), Slice(TYPE_AFF), Slice(TYPE_AFF), Slice(TYPE_AFF), ConstCxArg_I32, ConstCxArg_I32, ConstCxArg_I32, ConstCxArg_F64), nil)

}
